// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Invoicing/ExtendedSigner.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Invoicing/ExtendedSigner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Invoicing {
namespace Signers {

namespace {

const ::google::protobuf::Descriptor* ExtendedSigner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtendedSigner_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtendedSignerDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtendedSignerDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtendedSignerDetailsToPost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtendedSignerDetailsToPost_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SignerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SignerPowers_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SignerStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DocumentTitleType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Invoicing_2fExtendedSigner_2eproto() {
  protobuf_AddDesc_Invoicing_2fExtendedSigner_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Invoicing/ExtendedSigner.proto");
  GOOGLE_CHECK(file != NULL);
  ExtendedSigner_descriptor_ = file->message_type(0);
  static const int ExtendedSigner_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSigner, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSigner, signercertificate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSigner, signercertificatethumbprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSigner, signerdetails_),
  };
  ExtendedSigner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtendedSigner_descriptor_,
      ExtendedSigner::default_instance_,
      ExtendedSigner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSigner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSigner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtendedSigner));
  ExtendedSignerDetails_descriptor_ = file->message_type(1);
  static const int ExtendedSignerDetails_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, surname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, patronymic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, jobtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, inn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, registrationcertificate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, signertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, signerorganizationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, signerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, signerpowers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, signerstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, signerpowersbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, signerorgpowersbase_),
  };
  ExtendedSignerDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtendedSignerDetails_descriptor_,
      ExtendedSignerDetails::default_instance_,
      ExtendedSignerDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtendedSignerDetails));
  ExtendedSignerDetailsToPost_descriptor_ = file->message_type(2);
  static const int ExtendedSignerDetailsToPost_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetailsToPost, jobtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetailsToPost, registrationcertificate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetailsToPost, signertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetailsToPost, signerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetailsToPost, signerpowers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetailsToPost, signerstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetailsToPost, signerpowersbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetailsToPost, signerorgpowersbase_),
  };
  ExtendedSignerDetailsToPost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtendedSignerDetailsToPost_descriptor_,
      ExtendedSignerDetailsToPost::default_instance_,
      ExtendedSignerDetailsToPost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetailsToPost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSignerDetailsToPost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtendedSignerDetailsToPost));
  SignerType_descriptor_ = file->enum_type(0);
  SignerPowers_descriptor_ = file->enum_type(1);
  SignerStatus_descriptor_ = file->enum_type(2);
  DocumentTitleType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Invoicing_2fExtendedSigner_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtendedSigner_descriptor_, &ExtendedSigner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtendedSignerDetails_descriptor_, &ExtendedSignerDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtendedSignerDetailsToPost_descriptor_, &ExtendedSignerDetailsToPost::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Invoicing_2fExtendedSigner_2eproto() {
  delete ExtendedSigner::default_instance_;
  delete ExtendedSigner_reflection_;
  delete ExtendedSignerDetails::default_instance_;
  delete ExtendedSignerDetails_reflection_;
  delete ExtendedSignerDetailsToPost::default_instance_;
  delete ExtendedSignerDetailsToPost_reflection_;
}

void protobuf_AddDesc_Invoicing_2fExtendedSigner_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036Invoicing/ExtendedSigner.proto\022\"Diadoc"
    ".Api.Proto.Invoicing.Signers\"\261\001\n\016Extende"
    "dSigner\022\r\n\005BoxId\030\001 \001(\t\022\031\n\021SignerCertific"
    "ate\030\002 \001(\014\022#\n\033SignerCertificateThumbprint"
    "\030\003 \001(\t\022P\n\rSignerDetails\030\004 \001(\01329.Diadoc.A"
    "pi.Proto.Invoicing.Signers.ExtendedSigne"
    "rDetails\"\333\003\n\025ExtendedSignerDetails\022\017\n\007Su"
    "rname\030\001 \002(\t\022\021\n\tFirstName\030\002 \002(\t\022\022\n\nPatron"
    "ymic\030\003 \001(\t\022\020\n\010JobTitle\030\004 \001(\t\022\013\n\003Inn\030\005 \001("
    "\t\022\037\n\027RegistrationCertificate\030\006 \001(\t\022O\n\nSi"
    "gnerType\030\007 \002(\0162..Diadoc.Api.Proto.Invoic"
    "ing.Signers.SignerType:\013LegalEntity\022\036\n\026S"
    "ignerOrganizationName\030\010 \001(\t\022\022\n\nSignerInf"
    "o\030\t \001(\t\022F\n\014SignerPowers\030\n \002(\01620.Diadoc.A"
    "pi.Proto.Invoicing.Signers.SignerPowers\022"
    "F\n\014SignerStatus\030\013 \002(\01620.Diadoc.Api.Proto"
    ".Invoicing.Signers.SignerStatus\022\030\n\020Signe"
    "rPowersBase\030\014 \001(\t\022\033\n\023SignerOrgPowersBase"
    "\030\r \001(\t\"\357\002\n\033ExtendedSignerDetailsToPost\022\020"
    "\n\010JobTitle\030\001 \001(\t\022\037\n\027RegistrationCertific"
    "ate\030\002 \001(\t\022B\n\nSignerType\030\003 \002(\0162..Diadoc.A"
    "pi.Proto.Invoicing.Signers.SignerType\022\022\n"
    "\nSignerInfo\030\004 \001(\t\022F\n\014SignerPowers\030\005 \002(\0162"
    "0.Diadoc.Api.Proto.Invoicing.Signers.Sig"
    "nerPowers\022F\n\014SignerStatus\030\006 \002(\01620.Diadoc"
    ".Api.Proto.Invoicing.Signers.SignerStatu"
    "s\022\030\n\020SignerPowersBase\030\007 \001(\t\022\033\n\023SignerOrg"
    "PowersBase\030\010 \001(\t*G\n\nSignerType\022\017\n\013LegalE"
    "ntity\020\001\022\024\n\020IndividualEntity\020\002\022\022\n\016Physica"
    "lPerson\020\003*\223\003\n\014SignerPowers\022\021\n\rInvoiceSig"
    "ner\020\000\022\027\n\023PersonMadeOperation\020\001\022\030\n\024MadeAn"
    "dSignOperation\020\002\022\035\n\031PersonDocumentedOper"
    "ation\020\003\022!\n\035MadeOperationAndSignedInvoice"
    "\020\004\0222\n.MadeAndResponsibleForOperationAndS"
    "ignedInvoice\020\005\022.\n*ResponsibleForOperatio"
    "nAndSignerForInvoice\020\006\022\026\n\022ChairmanCommis"
    "sion\020\007\022\024\n\020MemberCommission\020\010\022\032\n\026PersonAp"
    "provedDocument\020\025\022\033\n\027PersonConfirmedDocum"
    "ent\020\026\022\032\n\026PersonAgreedOnDocument\020\027\022\024\n\020Per"
    "sonOtherPower\020\035*\257\001\n\014SignerStatus\022\022\n\016Sell"
    "erEmployee\020\001\022\036\n\032InformationCreatorEmploy"
    "ee\020\002\022\035\n\031OtherOrganizationEmployee\020\003\022\024\n\020A"
    "uthorizedPerson\020\004\022\021\n\rBuyerEmployee\020\005\022#\n\037"
    "InformationCreatorBuyerEmployee\020\006*\362\001\n\021Do"
    "cumentTitleType\022\023\n\006Absent\020\377\377\377\377\377\377\377\377\377\001\022\r\n\t"
    "UtdSeller\020\000\022\014\n\010UtdBuyer\020\001\022\r\n\tUcdSeller\020\002"
    "\022\014\n\010UcdBuyer\020\003\022\024\n\020TovTorg551Seller\020\004\022\023\n\017"
    "TovTorg551Buyer\020\005\022\024\n\020AccCert552Seller\020\006\022"
    "\023\n\017AccCert552Buyer\020\007\022\017\n\013Utd820Buyer\020\010\022\016\n"
    "\nTorg2Buyer\020\t\022\027\n\023Torg2AdditionalInfo\020\n", 1998);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Invoicing/ExtendedSigner.proto", &protobuf_RegisterTypes);
  ExtendedSigner::default_instance_ = new ExtendedSigner();
  ExtendedSignerDetails::default_instance_ = new ExtendedSignerDetails();
  ExtendedSignerDetailsToPost::default_instance_ = new ExtendedSignerDetailsToPost();
  ExtendedSigner::default_instance_->InitAsDefaultInstance();
  ExtendedSignerDetails::default_instance_->InitAsDefaultInstance();
  ExtendedSignerDetailsToPost::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Invoicing_2fExtendedSigner_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Invoicing_2fExtendedSigner_2eproto {
  StaticDescriptorInitializer_Invoicing_2fExtendedSigner_2eproto() {
    protobuf_AddDesc_Invoicing_2fExtendedSigner_2eproto();
  }
} static_descriptor_initializer_Invoicing_2fExtendedSigner_2eproto_;
const ::google::protobuf::EnumDescriptor* SignerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignerType_descriptor_;
}
bool SignerType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SignerPowers_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignerPowers_descriptor_;
}
bool SignerPowers_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 21:
    case 22:
    case 23:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SignerStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignerStatus_descriptor_;
}
bool SignerStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DocumentTitleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentTitleType_descriptor_;
}
bool DocumentTitleType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ExtendedSigner::kBoxIdFieldNumber;
const int ExtendedSigner::kSignerCertificateFieldNumber;
const int ExtendedSigner::kSignerCertificateThumbprintFieldNumber;
const int ExtendedSigner::kSignerDetailsFieldNumber;
#endif  // !_MSC_VER

ExtendedSigner::ExtendedSigner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner)
}

void ExtendedSigner::InitAsDefaultInstance() {
  signerdetails_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSignerDetails*>(&::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSignerDetails::default_instance());
}

ExtendedSigner::ExtendedSigner(const ExtendedSigner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner)
}

void ExtendedSigner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signercertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signercertificatethumbprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signerdetails_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtendedSigner::~ExtendedSigner() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner)
  SharedDtor();
}

void ExtendedSigner::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (signercertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signercertificate_;
  }
  if (signercertificatethumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signercertificatethumbprint_;
  }
  if (this != default_instance_) {
    delete signerdetails_;
  }
}

void ExtendedSigner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtendedSigner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtendedSigner_descriptor_;
}

const ExtendedSigner& ExtendedSigner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fExtendedSigner_2eproto();
  return *default_instance_;
}

ExtendedSigner* ExtendedSigner::default_instance_ = NULL;

ExtendedSigner* ExtendedSigner::New() const {
  return new ExtendedSigner;
}

void ExtendedSigner::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxid_->clear();
      }
    }
    if (has_signercertificate()) {
      if (signercertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signercertificate_->clear();
      }
    }
    if (has_signercertificatethumbprint()) {
      if (signercertificatethumbprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signercertificatethumbprint_->clear();
      }
    }
    if (has_signerdetails()) {
      if (signerdetails_ != NULL) signerdetails_->::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSignerDetails::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtendedSigner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SignerCertificate;
        break;
      }

      // optional bytes SignerCertificate = 2;
      case 2: {
        if (tag == 18) {
         parse_SignerCertificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signercertificate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SignerCertificateThumbprint;
        break;
      }

      // optional string SignerCertificateThumbprint = 3;
      case 3: {
        if (tag == 26) {
         parse_SignerCertificateThumbprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signercertificatethumbprint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signercertificatethumbprint().data(), this->signercertificatethumbprint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signercertificatethumbprint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SignerDetails;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails SignerDetails = 4;
      case 4: {
        if (tag == 34) {
         parse_SignerDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signerdetails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner)
  return false;
#undef DO_
}

void ExtendedSigner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner)
  // optional string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->boxid(), output);
  }

  // optional bytes SignerCertificate = 2;
  if (has_signercertificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signercertificate(), output);
  }

  // optional string SignerCertificateThumbprint = 3;
  if (has_signercertificatethumbprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signercertificatethumbprint().data(), this->signercertificatethumbprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signercertificatethumbprint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->signercertificatethumbprint(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails SignerDetails = 4;
  if (has_signerdetails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->signerdetails(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner)
}

::google::protobuf::uint8* ExtendedSigner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner)
  // optional string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // optional bytes SignerCertificate = 2;
  if (has_signercertificate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signercertificate(), target);
  }

  // optional string SignerCertificateThumbprint = 3;
  if (has_signercertificatethumbprint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signercertificatethumbprint().data(), this->signercertificatethumbprint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signercertificatethumbprint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signercertificatethumbprint(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails SignerDetails = 4;
  if (has_signerdetails()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->signerdetails(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner)
  return target;
}

int ExtendedSigner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // optional bytes SignerCertificate = 2;
    if (has_signercertificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signercertificate());
    }

    // optional string SignerCertificateThumbprint = 3;
    if (has_signercertificatethumbprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signercertificatethumbprint());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails SignerDetails = 4;
    if (has_signerdetails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signerdetails());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtendedSigner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtendedSigner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtendedSigner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtendedSigner::MergeFrom(const ExtendedSigner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_signercertificate()) {
      set_signercertificate(from.signercertificate());
    }
    if (from.has_signercertificatethumbprint()) {
      set_signercertificatethumbprint(from.signercertificatethumbprint());
    }
    if (from.has_signerdetails()) {
      mutable_signerdetails()->::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSignerDetails::MergeFrom(from.signerdetails());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtendedSigner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendedSigner::CopyFrom(const ExtendedSigner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedSigner::IsInitialized() const {

  if (has_signerdetails()) {
    if (!this->signerdetails().IsInitialized()) return false;
  }
  return true;
}

void ExtendedSigner::Swap(ExtendedSigner* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(signercertificate_, other->signercertificate_);
    std::swap(signercertificatethumbprint_, other->signercertificatethumbprint_);
    std::swap(signerdetails_, other->signerdetails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtendedSigner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtendedSigner_descriptor_;
  metadata.reflection = ExtendedSigner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtendedSignerDetails::kSurnameFieldNumber;
const int ExtendedSignerDetails::kFirstNameFieldNumber;
const int ExtendedSignerDetails::kPatronymicFieldNumber;
const int ExtendedSignerDetails::kJobTitleFieldNumber;
const int ExtendedSignerDetails::kInnFieldNumber;
const int ExtendedSignerDetails::kRegistrationCertificateFieldNumber;
const int ExtendedSignerDetails::kSignerTypeFieldNumber;
const int ExtendedSignerDetails::kSignerOrganizationNameFieldNumber;
const int ExtendedSignerDetails::kSignerInfoFieldNumber;
const int ExtendedSignerDetails::kSignerPowersFieldNumber;
const int ExtendedSignerDetails::kSignerStatusFieldNumber;
const int ExtendedSignerDetails::kSignerPowersBaseFieldNumber;
const int ExtendedSignerDetails::kSignerOrgPowersBaseFieldNumber;
#endif  // !_MSC_VER

ExtendedSignerDetails::ExtendedSignerDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails)
}

void ExtendedSignerDetails::InitAsDefaultInstance() {
}

ExtendedSignerDetails::ExtendedSignerDetails(const ExtendedSignerDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails)
}

void ExtendedSignerDetails::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  surname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patronymic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registrationcertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signertype_ = 1;
  signerorganizationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signerinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signerpowers_ = 0;
  signerstatus_ = 1;
  signerpowersbase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signerorgpowersbase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtendedSignerDetails::~ExtendedSignerDetails() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails)
  SharedDtor();
}

void ExtendedSignerDetails::SharedDtor() {
  if (surname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete surname_;
  }
  if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstname_;
  }
  if (patronymic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patronymic_;
  }
  if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobtitle_;
  }
  if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inn_;
  }
  if (registrationcertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete registrationcertificate_;
  }
  if (signerorganizationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signerorganizationname_;
  }
  if (signerinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signerinfo_;
  }
  if (signerpowersbase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signerpowersbase_;
  }
  if (signerorgpowersbase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signerorgpowersbase_;
  }
  if (this != default_instance_) {
  }
}

void ExtendedSignerDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtendedSignerDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtendedSignerDetails_descriptor_;
}

const ExtendedSignerDetails& ExtendedSignerDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fExtendedSigner_2eproto();
  return *default_instance_;
}

ExtendedSignerDetails* ExtendedSignerDetails::default_instance_ = NULL;

ExtendedSignerDetails* ExtendedSignerDetails::New() const {
  return new ExtendedSignerDetails;
}

void ExtendedSignerDetails::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_surname()) {
      if (surname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        surname_->clear();
      }
    }
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstname_->clear();
      }
    }
    if (has_patronymic()) {
      if (patronymic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patronymic_->clear();
      }
    }
    if (has_jobtitle()) {
      if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jobtitle_->clear();
      }
    }
    if (has_inn()) {
      if (inn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inn_->clear();
      }
    }
    if (has_registrationcertificate()) {
      if (registrationcertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        registrationcertificate_->clear();
      }
    }
    signertype_ = 1;
    if (has_signerorganizationname()) {
      if (signerorganizationname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signerorganizationname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_signerinfo()) {
      if (signerinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signerinfo_->clear();
      }
    }
    signerpowers_ = 0;
    signerstatus_ = 1;
    if (has_signerpowersbase()) {
      if (signerpowersbase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signerpowersbase_->clear();
      }
    }
    if (has_signerorgpowersbase()) {
      if (signerorgpowersbase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signerorgpowersbase_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtendedSignerDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Surname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->surname().data(), this->surname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "surname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FirstName;
        break;
      }

      // required string FirstName = 2;
      case 2: {
        if (tag == 18) {
         parse_FirstName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Patronymic;
        break;
      }

      // optional string Patronymic = 3;
      case 3: {
        if (tag == 26) {
         parse_Patronymic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patronymic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patronymic().data(), this->patronymic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "patronymic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_JobTitle;
        break;
      }

      // optional string JobTitle = 4;
      case 4: {
        if (tag == 34) {
         parse_JobTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jobtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jobtitle().data(), this->jobtitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jobtitle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Inn;
        break;
      }

      // optional string Inn = 5;
      case 5: {
        if (tag == 42) {
         parse_Inn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inn().data(), this->inn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RegistrationCertificate;
        break;
      }

      // optional string RegistrationCertificate = 6;
      case 6: {
        if (tag == 50) {
         parse_RegistrationCertificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registrationcertificate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->registrationcertificate().data(), this->registrationcertificate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "registrationcertificate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SignerType;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signers.SignerType SignerType = 7 [default = LegalEntity];
      case 7: {
        if (tag == 56) {
         parse_SignerType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Invoicing::Signers::SignerType_IsValid(value)) {
            set_signertype(static_cast< ::Diadoc::Api::Proto::Invoicing::Signers::SignerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SignerOrganizationName;
        break;
      }

      // optional string SignerOrganizationName = 8;
      case 8: {
        if (tag == 66) {
         parse_SignerOrganizationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signerorganizationname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signerorganizationname().data(), this->signerorganizationname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signerorganizationname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_SignerInfo;
        break;
      }

      // optional string SignerInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_SignerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signerinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signerinfo().data(), this->signerinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signerinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_SignerPowers;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signers.SignerPowers SignerPowers = 10;
      case 10: {
        if (tag == 80) {
         parse_SignerPowers:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Invoicing::Signers::SignerPowers_IsValid(value)) {
            set_signerpowers(static_cast< ::Diadoc::Api::Proto::Invoicing::Signers::SignerPowers >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_SignerStatus;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signers.SignerStatus SignerStatus = 11;
      case 11: {
        if (tag == 88) {
         parse_SignerStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Invoicing::Signers::SignerStatus_IsValid(value)) {
            set_signerstatus(static_cast< ::Diadoc::Api::Proto::Invoicing::Signers::SignerStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_SignerPowersBase;
        break;
      }

      // optional string SignerPowersBase = 12;
      case 12: {
        if (tag == 98) {
         parse_SignerPowersBase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signerpowersbase()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signerpowersbase().data(), this->signerpowersbase().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signerpowersbase");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_SignerOrgPowersBase;
        break;
      }

      // optional string SignerOrgPowersBase = 13;
      case 13: {
        if (tag == 106) {
         parse_SignerOrgPowersBase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signerorgpowersbase()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signerorgpowersbase().data(), this->signerorgpowersbase().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signerorgpowersbase");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails)
  return false;
#undef DO_
}

void ExtendedSignerDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails)
  // required string Surname = 1;
  if (has_surname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->surname().data(), this->surname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "surname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->surname(), output);
  }

  // required string FirstName = 2;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firstname(), output);
  }

  // optional string Patronymic = 3;
  if (has_patronymic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patronymic().data(), this->patronymic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patronymic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->patronymic(), output);
  }

  // optional string JobTitle = 4;
  if (has_jobtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jobtitle().data(), this->jobtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jobtitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->jobtitle(), output);
  }

  // optional string Inn = 5;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->inn(), output);
  }

  // optional string RegistrationCertificate = 6;
  if (has_registrationcertificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->registrationcertificate().data(), this->registrationcertificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "registrationcertificate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->registrationcertificate(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signers.SignerType SignerType = 7 [default = LegalEntity];
  if (has_signertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->signertype(), output);
  }

  // optional string SignerOrganizationName = 8;
  if (has_signerorganizationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerorganizationname().data(), this->signerorganizationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerorganizationname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->signerorganizationname(), output);
  }

  // optional string SignerInfo = 9;
  if (has_signerinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerinfo().data(), this->signerinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->signerinfo(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signers.SignerPowers SignerPowers = 10;
  if (has_signerpowers()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->signerpowers(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signers.SignerStatus SignerStatus = 11;
  if (has_signerstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->signerstatus(), output);
  }

  // optional string SignerPowersBase = 12;
  if (has_signerpowersbase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerpowersbase().data(), this->signerpowersbase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerpowersbase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->signerpowersbase(), output);
  }

  // optional string SignerOrgPowersBase = 13;
  if (has_signerorgpowersbase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerorgpowersbase().data(), this->signerorgpowersbase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerorgpowersbase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->signerorgpowersbase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails)
}

::google::protobuf::uint8* ExtendedSignerDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails)
  // required string Surname = 1;
  if (has_surname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->surname().data(), this->surname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "surname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->surname(), target);
  }

  // required string FirstName = 2;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firstname(), target);
  }

  // optional string Patronymic = 3;
  if (has_patronymic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patronymic().data(), this->patronymic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patronymic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->patronymic(), target);
  }

  // optional string JobTitle = 4;
  if (has_jobtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jobtitle().data(), this->jobtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jobtitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jobtitle(), target);
  }

  // optional string Inn = 5;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inn().data(), this->inn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->inn(), target);
  }

  // optional string RegistrationCertificate = 6;
  if (has_registrationcertificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->registrationcertificate().data(), this->registrationcertificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "registrationcertificate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->registrationcertificate(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signers.SignerType SignerType = 7 [default = LegalEntity];
  if (has_signertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->signertype(), target);
  }

  // optional string SignerOrganizationName = 8;
  if (has_signerorganizationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerorganizationname().data(), this->signerorganizationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerorganizationname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->signerorganizationname(), target);
  }

  // optional string SignerInfo = 9;
  if (has_signerinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerinfo().data(), this->signerinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->signerinfo(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signers.SignerPowers SignerPowers = 10;
  if (has_signerpowers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->signerpowers(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signers.SignerStatus SignerStatus = 11;
  if (has_signerstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->signerstatus(), target);
  }

  // optional string SignerPowersBase = 12;
  if (has_signerpowersbase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerpowersbase().data(), this->signerpowersbase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerpowersbase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->signerpowersbase(), target);
  }

  // optional string SignerOrgPowersBase = 13;
  if (has_signerorgpowersbase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerorgpowersbase().data(), this->signerorgpowersbase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerorgpowersbase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->signerorgpowersbase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetails)
  return target;
}

int ExtendedSignerDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Surname = 1;
    if (has_surname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->surname());
    }

    // required string FirstName = 2;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional string Patronymic = 3;
    if (has_patronymic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patronymic());
    }

    // optional string JobTitle = 4;
    if (has_jobtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jobtitle());
    }

    // optional string Inn = 5;
    if (has_inn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inn());
    }

    // optional string RegistrationCertificate = 6;
    if (has_registrationcertificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registrationcertificate());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signers.SignerType SignerType = 7 [default = LegalEntity];
    if (has_signertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signertype());
    }

    // optional string SignerOrganizationName = 8;
    if (has_signerorganizationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signerorganizationname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string SignerInfo = 9;
    if (has_signerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signerinfo());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signers.SignerPowers SignerPowers = 10;
    if (has_signerpowers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signerpowers());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signers.SignerStatus SignerStatus = 11;
    if (has_signerstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signerstatus());
    }

    // optional string SignerPowersBase = 12;
    if (has_signerpowersbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signerpowersbase());
    }

    // optional string SignerOrgPowersBase = 13;
    if (has_signerorgpowersbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signerorgpowersbase());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtendedSignerDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtendedSignerDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtendedSignerDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtendedSignerDetails::MergeFrom(const ExtendedSignerDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_surname()) {
      set_surname(from.surname());
    }
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_patronymic()) {
      set_patronymic(from.patronymic());
    }
    if (from.has_jobtitle()) {
      set_jobtitle(from.jobtitle());
    }
    if (from.has_inn()) {
      set_inn(from.inn());
    }
    if (from.has_registrationcertificate()) {
      set_registrationcertificate(from.registrationcertificate());
    }
    if (from.has_signertype()) {
      set_signertype(from.signertype());
    }
    if (from.has_signerorganizationname()) {
      set_signerorganizationname(from.signerorganizationname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_signerinfo()) {
      set_signerinfo(from.signerinfo());
    }
    if (from.has_signerpowers()) {
      set_signerpowers(from.signerpowers());
    }
    if (from.has_signerstatus()) {
      set_signerstatus(from.signerstatus());
    }
    if (from.has_signerpowersbase()) {
      set_signerpowersbase(from.signerpowersbase());
    }
    if (from.has_signerorgpowersbase()) {
      set_signerorgpowersbase(from.signerorgpowersbase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtendedSignerDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendedSignerDetails::CopyFrom(const ExtendedSignerDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedSignerDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000643) != 0x00000643) return false;

  return true;
}

void ExtendedSignerDetails::Swap(ExtendedSignerDetails* other) {
  if (other != this) {
    std::swap(surname_, other->surname_);
    std::swap(firstname_, other->firstname_);
    std::swap(patronymic_, other->patronymic_);
    std::swap(jobtitle_, other->jobtitle_);
    std::swap(inn_, other->inn_);
    std::swap(registrationcertificate_, other->registrationcertificate_);
    std::swap(signertype_, other->signertype_);
    std::swap(signerorganizationname_, other->signerorganizationname_);
    std::swap(signerinfo_, other->signerinfo_);
    std::swap(signerpowers_, other->signerpowers_);
    std::swap(signerstatus_, other->signerstatus_);
    std::swap(signerpowersbase_, other->signerpowersbase_);
    std::swap(signerorgpowersbase_, other->signerorgpowersbase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtendedSignerDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtendedSignerDetails_descriptor_;
  metadata.reflection = ExtendedSignerDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtendedSignerDetailsToPost::kJobTitleFieldNumber;
const int ExtendedSignerDetailsToPost::kRegistrationCertificateFieldNumber;
const int ExtendedSignerDetailsToPost::kSignerTypeFieldNumber;
const int ExtendedSignerDetailsToPost::kSignerInfoFieldNumber;
const int ExtendedSignerDetailsToPost::kSignerPowersFieldNumber;
const int ExtendedSignerDetailsToPost::kSignerStatusFieldNumber;
const int ExtendedSignerDetailsToPost::kSignerPowersBaseFieldNumber;
const int ExtendedSignerDetailsToPost::kSignerOrgPowersBaseFieldNumber;
#endif  // !_MSC_VER

ExtendedSignerDetailsToPost::ExtendedSignerDetailsToPost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetailsToPost)
}

void ExtendedSignerDetailsToPost::InitAsDefaultInstance() {
}

ExtendedSignerDetailsToPost::ExtendedSignerDetailsToPost(const ExtendedSignerDetailsToPost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetailsToPost)
}

void ExtendedSignerDetailsToPost::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registrationcertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signertype_ = 1;
  signerinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signerpowers_ = 0;
  signerstatus_ = 1;
  signerpowersbase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signerorgpowersbase_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtendedSignerDetailsToPost::~ExtendedSignerDetailsToPost() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetailsToPost)
  SharedDtor();
}

void ExtendedSignerDetailsToPost::SharedDtor() {
  if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobtitle_;
  }
  if (registrationcertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete registrationcertificate_;
  }
  if (signerinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signerinfo_;
  }
  if (signerpowersbase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signerpowersbase_;
  }
  if (signerorgpowersbase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signerorgpowersbase_;
  }
  if (this != default_instance_) {
  }
}

void ExtendedSignerDetailsToPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtendedSignerDetailsToPost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtendedSignerDetailsToPost_descriptor_;
}

const ExtendedSignerDetailsToPost& ExtendedSignerDetailsToPost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Invoicing_2fExtendedSigner_2eproto();
  return *default_instance_;
}

ExtendedSignerDetailsToPost* ExtendedSignerDetailsToPost::default_instance_ = NULL;

ExtendedSignerDetailsToPost* ExtendedSignerDetailsToPost::New() const {
  return new ExtendedSignerDetailsToPost;
}

void ExtendedSignerDetailsToPost::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_jobtitle()) {
      if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jobtitle_->clear();
      }
    }
    if (has_registrationcertificate()) {
      if (registrationcertificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        registrationcertificate_->clear();
      }
    }
    signertype_ = 1;
    if (has_signerinfo()) {
      if (signerinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signerinfo_->clear();
      }
    }
    signerpowers_ = 0;
    signerstatus_ = 1;
    if (has_signerpowersbase()) {
      if (signerpowersbase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signerpowersbase_->clear();
      }
    }
    if (has_signerorgpowersbase()) {
      if (signerorgpowersbase_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signerorgpowersbase_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtendedSignerDetailsToPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetailsToPost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string JobTitle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jobtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jobtitle().data(), this->jobtitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jobtitle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RegistrationCertificate;
        break;
      }

      // optional string RegistrationCertificate = 2;
      case 2: {
        if (tag == 18) {
         parse_RegistrationCertificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registrationcertificate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->registrationcertificate().data(), this->registrationcertificate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "registrationcertificate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SignerType;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signers.SignerType SignerType = 3;
      case 3: {
        if (tag == 24) {
         parse_SignerType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Invoicing::Signers::SignerType_IsValid(value)) {
            set_signertype(static_cast< ::Diadoc::Api::Proto::Invoicing::Signers::SignerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SignerInfo;
        break;
      }

      // optional string SignerInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_SignerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signerinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signerinfo().data(), this->signerinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signerinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SignerPowers;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signers.SignerPowers SignerPowers = 5;
      case 5: {
        if (tag == 40) {
         parse_SignerPowers:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Invoicing::Signers::SignerPowers_IsValid(value)) {
            set_signerpowers(static_cast< ::Diadoc::Api::Proto::Invoicing::Signers::SignerPowers >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SignerStatus;
        break;
      }

      // required .Diadoc.Api.Proto.Invoicing.Signers.SignerStatus SignerStatus = 6;
      case 6: {
        if (tag == 48) {
         parse_SignerStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Invoicing::Signers::SignerStatus_IsValid(value)) {
            set_signerstatus(static_cast< ::Diadoc::Api::Proto::Invoicing::Signers::SignerStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SignerPowersBase;
        break;
      }

      // optional string SignerPowersBase = 7;
      case 7: {
        if (tag == 58) {
         parse_SignerPowersBase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signerpowersbase()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signerpowersbase().data(), this->signerpowersbase().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signerpowersbase");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SignerOrgPowersBase;
        break;
      }

      // optional string SignerOrgPowersBase = 8;
      case 8: {
        if (tag == 66) {
         parse_SignerOrgPowersBase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signerorgpowersbase()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signerorgpowersbase().data(), this->signerorgpowersbase().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signerorgpowersbase");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetailsToPost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetailsToPost)
  return false;
#undef DO_
}

void ExtendedSignerDetailsToPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetailsToPost)
  // optional string JobTitle = 1;
  if (has_jobtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jobtitle().data(), this->jobtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jobtitle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->jobtitle(), output);
  }

  // optional string RegistrationCertificate = 2;
  if (has_registrationcertificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->registrationcertificate().data(), this->registrationcertificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "registrationcertificate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->registrationcertificate(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signers.SignerType SignerType = 3;
  if (has_signertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->signertype(), output);
  }

  // optional string SignerInfo = 4;
  if (has_signerinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerinfo().data(), this->signerinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->signerinfo(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signers.SignerPowers SignerPowers = 5;
  if (has_signerpowers()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->signerpowers(), output);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signers.SignerStatus SignerStatus = 6;
  if (has_signerstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->signerstatus(), output);
  }

  // optional string SignerPowersBase = 7;
  if (has_signerpowersbase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerpowersbase().data(), this->signerpowersbase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerpowersbase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->signerpowersbase(), output);
  }

  // optional string SignerOrgPowersBase = 8;
  if (has_signerorgpowersbase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerorgpowersbase().data(), this->signerorgpowersbase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerorgpowersbase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->signerorgpowersbase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetailsToPost)
}

::google::protobuf::uint8* ExtendedSignerDetailsToPost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetailsToPost)
  // optional string JobTitle = 1;
  if (has_jobtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jobtitle().data(), this->jobtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jobtitle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->jobtitle(), target);
  }

  // optional string RegistrationCertificate = 2;
  if (has_registrationcertificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->registrationcertificate().data(), this->registrationcertificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "registrationcertificate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->registrationcertificate(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signers.SignerType SignerType = 3;
  if (has_signertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->signertype(), target);
  }

  // optional string SignerInfo = 4;
  if (has_signerinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerinfo().data(), this->signerinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->signerinfo(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signers.SignerPowers SignerPowers = 5;
  if (has_signerpowers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->signerpowers(), target);
  }

  // required .Diadoc.Api.Proto.Invoicing.Signers.SignerStatus SignerStatus = 6;
  if (has_signerstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->signerstatus(), target);
  }

  // optional string SignerPowersBase = 7;
  if (has_signerpowersbase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerpowersbase().data(), this->signerpowersbase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerpowersbase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->signerpowersbase(), target);
  }

  // optional string SignerOrgPowersBase = 8;
  if (has_signerorgpowersbase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signerorgpowersbase().data(), this->signerorgpowersbase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signerorgpowersbase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->signerorgpowersbase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Invoicing.Signers.ExtendedSignerDetailsToPost)
  return target;
}

int ExtendedSignerDetailsToPost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string JobTitle = 1;
    if (has_jobtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jobtitle());
    }

    // optional string RegistrationCertificate = 2;
    if (has_registrationcertificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registrationcertificate());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signers.SignerType SignerType = 3;
    if (has_signertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signertype());
    }

    // optional string SignerInfo = 4;
    if (has_signerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signerinfo());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signers.SignerPowers SignerPowers = 5;
    if (has_signerpowers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signerpowers());
    }

    // required .Diadoc.Api.Proto.Invoicing.Signers.SignerStatus SignerStatus = 6;
    if (has_signerstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signerstatus());
    }

    // optional string SignerPowersBase = 7;
    if (has_signerpowersbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signerpowersbase());
    }

    // optional string SignerOrgPowersBase = 8;
    if (has_signerorgpowersbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signerorgpowersbase());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtendedSignerDetailsToPost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtendedSignerDetailsToPost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtendedSignerDetailsToPost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtendedSignerDetailsToPost::MergeFrom(const ExtendedSignerDetailsToPost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jobtitle()) {
      set_jobtitle(from.jobtitle());
    }
    if (from.has_registrationcertificate()) {
      set_registrationcertificate(from.registrationcertificate());
    }
    if (from.has_signertype()) {
      set_signertype(from.signertype());
    }
    if (from.has_signerinfo()) {
      set_signerinfo(from.signerinfo());
    }
    if (from.has_signerpowers()) {
      set_signerpowers(from.signerpowers());
    }
    if (from.has_signerstatus()) {
      set_signerstatus(from.signerstatus());
    }
    if (from.has_signerpowersbase()) {
      set_signerpowersbase(from.signerpowersbase());
    }
    if (from.has_signerorgpowersbase()) {
      set_signerorgpowersbase(from.signerorgpowersbase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtendedSignerDetailsToPost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendedSignerDetailsToPost::CopyFrom(const ExtendedSignerDetailsToPost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedSignerDetailsToPost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000034) != 0x00000034) return false;

  return true;
}

void ExtendedSignerDetailsToPost::Swap(ExtendedSignerDetailsToPost* other) {
  if (other != this) {
    std::swap(jobtitle_, other->jobtitle_);
    std::swap(registrationcertificate_, other->registrationcertificate_);
    std::swap(signertype_, other->signertype_);
    std::swap(signerinfo_, other->signerinfo_);
    std::swap(signerpowers_, other->signerpowers_);
    std::swap(signerstatus_, other->signerstatus_);
    std::swap(signerpowersbase_, other->signerpowersbase_);
    std::swap(signerorgpowersbase_, other->signerorgpowersbase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtendedSignerDetailsToPost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtendedSignerDetailsToPost_descriptor_;
  metadata.reflection = ExtendedSignerDetailsToPost_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Signers
}  // namespace Invoicing
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
