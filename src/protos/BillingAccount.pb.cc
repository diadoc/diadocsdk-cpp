// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BillingAccount.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BillingAccount.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* BillingAccountList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillingAccountList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillingAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillingAccount_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BillingAccount_2eproto() {
  protobuf_AddDesc_BillingAccount_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BillingAccount.proto");
  GOOGLE_CHECK(file != NULL);
  BillingAccountList_descriptor_ = file->message_type(0);
  static const int BillingAccountList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAccountList, billingaccounts_),
  };
  BillingAccountList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BillingAccountList_descriptor_,
      BillingAccountList::default_instance_,
      BillingAccountList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAccountList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAccountList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BillingAccountList));
  BillingAccount_descriptor_ = file->message_type(1);
  static const int BillingAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAccount, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAccount, productid_),
  };
  BillingAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BillingAccount_descriptor_,
      BillingAccount::default_instance_,
      BillingAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BillingAccount));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BillingAccount_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BillingAccountList_descriptor_, &BillingAccountList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BillingAccount_descriptor_, &BillingAccount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BillingAccount_2eproto() {
  delete BillingAccountList::default_instance_;
  delete BillingAccountList_reflection_;
  delete BillingAccount::default_instance_;
  delete BillingAccount_reflection_;
}

void protobuf_AddDesc_BillingAccount_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024BillingAccount.proto\022\020Diadoc.Api.Proto"
    "\"O\n\022BillingAccountList\0229\n\017BillingAccount"
    "s\030\001 \003(\0132 .Diadoc.Api.Proto.BillingAccoun"
    "t\"6\n\016BillingAccount\022\021\n\tAccountId\030\001 \002(\t\022\021"
    "\n\tProductId\030\002 \002(\005", 177);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BillingAccount.proto", &protobuf_RegisterTypes);
  BillingAccountList::default_instance_ = new BillingAccountList();
  BillingAccount::default_instance_ = new BillingAccount();
  BillingAccountList::default_instance_->InitAsDefaultInstance();
  BillingAccount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BillingAccount_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BillingAccount_2eproto {
  StaticDescriptorInitializer_BillingAccount_2eproto() {
    protobuf_AddDesc_BillingAccount_2eproto();
  }
} static_descriptor_initializer_BillingAccount_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BillingAccountList::kBillingAccountsFieldNumber;
#endif  // !_MSC_VER

BillingAccountList::BillingAccountList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.BillingAccountList)
}

void BillingAccountList::InitAsDefaultInstance() {
}

BillingAccountList::BillingAccountList(const BillingAccountList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.BillingAccountList)
}

void BillingAccountList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BillingAccountList::~BillingAccountList() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.BillingAccountList)
  SharedDtor();
}

void BillingAccountList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BillingAccountList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillingAccountList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillingAccountList_descriptor_;
}

const BillingAccountList& BillingAccountList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BillingAccount_2eproto();
  return *default_instance_;
}

BillingAccountList* BillingAccountList::default_instance_ = NULL;

BillingAccountList* BillingAccountList::New() const {
  return new BillingAccountList;
}

void BillingAccountList::Clear() {
  billingaccounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BillingAccountList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.BillingAccountList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.BillingAccount BillingAccounts = 1;
      case 1: {
        if (tag == 10) {
         parse_BillingAccounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_billingaccounts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BillingAccounts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.BillingAccountList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.BillingAccountList)
  return false;
#undef DO_
}

void BillingAccountList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.BillingAccountList)
  // repeated .Diadoc.Api.Proto.BillingAccount BillingAccounts = 1;
  for (int i = 0; i < this->billingaccounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->billingaccounts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.BillingAccountList)
}

::google::protobuf::uint8* BillingAccountList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.BillingAccountList)
  // repeated .Diadoc.Api.Proto.BillingAccount BillingAccounts = 1;
  for (int i = 0; i < this->billingaccounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->billingaccounts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.BillingAccountList)
  return target;
}

int BillingAccountList::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.BillingAccount BillingAccounts = 1;
  total_size += 1 * this->billingaccounts_size();
  for (int i = 0; i < this->billingaccounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->billingaccounts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillingAccountList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BillingAccountList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BillingAccountList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillingAccountList::MergeFrom(const BillingAccountList& from) {
  GOOGLE_CHECK_NE(&from, this);
  billingaccounts_.MergeFrom(from.billingaccounts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BillingAccountList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillingAccountList::CopyFrom(const BillingAccountList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillingAccountList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->billingaccounts())) return false;
  return true;
}

void BillingAccountList::Swap(BillingAccountList* other) {
  if (other != this) {
    billingaccounts_.Swap(&other->billingaccounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BillingAccountList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillingAccountList_descriptor_;
  metadata.reflection = BillingAccountList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BillingAccount::kAccountIdFieldNumber;
const int BillingAccount::kProductIdFieldNumber;
#endif  // !_MSC_VER

BillingAccount::BillingAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.BillingAccount)
}

void BillingAccount::InitAsDefaultInstance() {
}

BillingAccount::BillingAccount(const BillingAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.BillingAccount)
}

void BillingAccount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BillingAccount::~BillingAccount() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.BillingAccount)
  SharedDtor();
}

void BillingAccount::SharedDtor() {
  if (accountid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountid_;
  }
  if (this != default_instance_) {
  }
}

void BillingAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillingAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillingAccount_descriptor_;
}

const BillingAccount& BillingAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BillingAccount_2eproto();
  return *default_instance_;
}

BillingAccount* BillingAccount::default_instance_ = NULL;

BillingAccount* BillingAccount::New() const {
  return new BillingAccount;
}

void BillingAccount::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountid_->clear();
      }
    }
    productid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BillingAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.BillingAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string AccountId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ProductId;
        break;
      }

      // required int32 ProductId = 2;
      case 2: {
        if (tag == 16) {
         parse_ProductId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.BillingAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.BillingAccount)
  return false;
#undef DO_
}

void BillingAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.BillingAccount)
  // required string AccountId = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->accountid(), output);
  }

  // required int32 ProductId = 2;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->productid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.BillingAccount)
}

::google::protobuf::uint8* BillingAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.BillingAccount)
  // required string AccountId = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountid(), target);
  }

  // required int32 ProductId = 2;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->productid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.BillingAccount)
  return target;
}

int BillingAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string AccountId = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }

    // required int32 ProductId = 2;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillingAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BillingAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BillingAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillingAccount::MergeFrom(const BillingAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BillingAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillingAccount::CopyFrom(const BillingAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillingAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BillingAccount::Swap(BillingAccount* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(productid_, other->productid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BillingAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillingAccount_descriptor_;
  metadata.reflection = BillingAccount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
