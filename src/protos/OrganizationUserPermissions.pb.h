// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrganizationUserPermissions.proto

#ifndef PROTOBUF_OrganizationUserPermissions_2eproto__INCLUDED
#define PROTOBUF_OrganizationUserPermissions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OrganizationUserPermissions_2eproto();
void protobuf_AssignDesc_OrganizationUserPermissions_2eproto();
void protobuf_ShutdownFile_OrganizationUserPermissions_2eproto();

class OrganizationUserPermissions;

enum DocumentAccessLevel {
  UnknownDocumentAccessLevel = -1,
  DepartmentOnly = 0,
  DepartmentAndSubdepartments = 1,
  AllDocuments = 2,
  SelectedDepartments = 3
};
bool DocumentAccessLevel_IsValid(int value);
const DocumentAccessLevel DocumentAccessLevel_MIN = UnknownDocumentAccessLevel;
const DocumentAccessLevel DocumentAccessLevel_MAX = SelectedDepartments;
const int DocumentAccessLevel_ARRAYSIZE = DocumentAccessLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* DocumentAccessLevel_descriptor();
inline const ::std::string& DocumentAccessLevel_Name(DocumentAccessLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    DocumentAccessLevel_descriptor(), value);
}
inline bool DocumentAccessLevel_Parse(
    const ::std::string& name, DocumentAccessLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DocumentAccessLevel>(
    DocumentAccessLevel_descriptor(), name, value);
}
// ===================================================================

class OrganizationUserPermissions : public ::google::protobuf::Message {
 public:
  OrganizationUserPermissions();
  virtual ~OrganizationUserPermissions();

  OrganizationUserPermissions(const OrganizationUserPermissions& from);

  inline OrganizationUserPermissions& operator=(const OrganizationUserPermissions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrganizationUserPermissions& default_instance();

  void Swap(OrganizationUserPermissions* other);

  // implements Message ----------------------------------------------

  OrganizationUserPermissions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrganizationUserPermissions& from);
  void MergeFrom(const OrganizationUserPermissions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string UserDepartmentId = 1;
  inline bool has_userdepartmentid() const;
  inline void clear_userdepartmentid();
  static const int kUserDepartmentIdFieldNumber = 1;
  inline const ::std::string& userdepartmentid() const;
  inline void set_userdepartmentid(const ::std::string& value);
  inline void set_userdepartmentid(const char* value);
  inline void set_userdepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_userdepartmentid();
  inline ::std::string* release_userdepartmentid();
  inline void set_allocated_userdepartmentid(::std::string* userdepartmentid);

  // required bool IsAdministrator = 2;
  inline bool has_isadministrator() const;
  inline void clear_isadministrator();
  static const int kIsAdministratorFieldNumber = 2;
  inline bool isadministrator() const;
  inline void set_isadministrator(bool value);

  // optional .Diadoc.Api.Proto.DocumentAccessLevel DocumentAccessLevel = 3 [default = UnknownDocumentAccessLevel];
  inline bool has_documentaccesslevel() const;
  inline void clear_documentaccesslevel();
  static const int kDocumentAccessLevelFieldNumber = 3;
  inline ::Diadoc::Api::Proto::DocumentAccessLevel documentaccesslevel() const;
  inline void set_documentaccesslevel(::Diadoc::Api::Proto::DocumentAccessLevel value);

  // required bool CanSignDocuments = 4;
  inline bool has_cansigndocuments() const;
  inline void clear_cansigndocuments();
  static const int kCanSignDocumentsFieldNumber = 4;
  inline bool cansigndocuments() const;
  inline void set_cansigndocuments(bool value);

  // required bool CanAddResolutions = 7;
  inline bool has_canaddresolutions() const;
  inline void clear_canaddresolutions();
  static const int kCanAddResolutionsFieldNumber = 7;
  inline bool canaddresolutions() const;
  inline void set_canaddresolutions(bool value);

  // required bool CanRequestResolutions = 8;
  inline bool has_canrequestresolutions() const;
  inline void clear_canrequestresolutions();
  static const int kCanRequestResolutionsFieldNumber = 8;
  inline bool canrequestresolutions() const;
  inline void set_canrequestresolutions(bool value);

  // repeated string SelectedDepartmentIds = 9;
  inline int selecteddepartmentids_size() const;
  inline void clear_selecteddepartmentids();
  static const int kSelectedDepartmentIdsFieldNumber = 9;
  inline const ::std::string& selecteddepartmentids(int index) const;
  inline ::std::string* mutable_selecteddepartmentids(int index);
  inline void set_selecteddepartmentids(int index, const ::std::string& value);
  inline void set_selecteddepartmentids(int index, const char* value);
  inline void set_selecteddepartmentids(int index, const char* value, size_t size);
  inline ::std::string* add_selecteddepartmentids();
  inline void add_selecteddepartmentids(const ::std::string& value);
  inline void add_selecteddepartmentids(const char* value);
  inline void add_selecteddepartmentids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& selecteddepartmentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_selecteddepartmentids();

  // optional string JobTitle = 10;
  inline bool has_jobtitle() const;
  inline void clear_jobtitle();
  static const int kJobTitleFieldNumber = 10;
  inline const ::std::string& jobtitle() const;
  inline void set_jobtitle(const ::std::string& value);
  inline void set_jobtitle(const char* value);
  inline void set_jobtitle(const char* value, size_t size);
  inline ::std::string* mutable_jobtitle();
  inline ::std::string* release_jobtitle();
  inline void set_allocated_jobtitle(::std::string* jobtitle);

  // required bool CanCreateDocuments = 11;
  inline bool has_cancreatedocuments() const;
  inline void clear_cancreatedocuments();
  static const int kCanCreateDocumentsFieldNumber = 11;
  inline bool cancreatedocuments() const;
  inline void set_cancreatedocuments(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.OrganizationUserPermissions)
 private:
  inline void set_has_userdepartmentid();
  inline void clear_has_userdepartmentid();
  inline void set_has_isadministrator();
  inline void clear_has_isadministrator();
  inline void set_has_documentaccesslevel();
  inline void clear_has_documentaccesslevel();
  inline void set_has_cansigndocuments();
  inline void clear_has_cansigndocuments();
  inline void set_has_canaddresolutions();
  inline void clear_has_canaddresolutions();
  inline void set_has_canrequestresolutions();
  inline void clear_has_canrequestresolutions();
  inline void set_has_jobtitle();
  inline void clear_has_jobtitle();
  inline void set_has_cancreatedocuments();
  inline void clear_has_cancreatedocuments();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* userdepartmentid_;
  int documentaccesslevel_;
  bool isadministrator_;
  bool cansigndocuments_;
  bool canaddresolutions_;
  bool canrequestresolutions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> selecteddepartmentids_;
  ::std::string* jobtitle_;
  bool cancreatedocuments_;
  friend void  protobuf_AddDesc_OrganizationUserPermissions_2eproto();
  friend void protobuf_AssignDesc_OrganizationUserPermissions_2eproto();
  friend void protobuf_ShutdownFile_OrganizationUserPermissions_2eproto();

  void InitAsDefaultInstance();
  static OrganizationUserPermissions* default_instance_;
};
// ===================================================================


// ===================================================================

// OrganizationUserPermissions

// required string UserDepartmentId = 1;
inline bool OrganizationUserPermissions::has_userdepartmentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrganizationUserPermissions::set_has_userdepartmentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrganizationUserPermissions::clear_has_userdepartmentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrganizationUserPermissions::clear_userdepartmentid() {
  if (userdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdepartmentid_->clear();
  }
  clear_has_userdepartmentid();
}
inline const ::std::string& OrganizationUserPermissions::userdepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUserPermissions.UserDepartmentId)
  return *userdepartmentid_;
}
inline void OrganizationUserPermissions::set_userdepartmentid(const ::std::string& value) {
  set_has_userdepartmentid();
  if (userdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdepartmentid_ = new ::std::string;
  }
  userdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUserPermissions.UserDepartmentId)
}
inline void OrganizationUserPermissions::set_userdepartmentid(const char* value) {
  set_has_userdepartmentid();
  if (userdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdepartmentid_ = new ::std::string;
  }
  userdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.OrganizationUserPermissions.UserDepartmentId)
}
inline void OrganizationUserPermissions::set_userdepartmentid(const char* value, size_t size) {
  set_has_userdepartmentid();
  if (userdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdepartmentid_ = new ::std::string;
  }
  userdepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.OrganizationUserPermissions.UserDepartmentId)
}
inline ::std::string* OrganizationUserPermissions::mutable_userdepartmentid() {
  set_has_userdepartmentid();
  if (userdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userdepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.OrganizationUserPermissions.UserDepartmentId)
  return userdepartmentid_;
}
inline ::std::string* OrganizationUserPermissions::release_userdepartmentid() {
  clear_has_userdepartmentid();
  if (userdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userdepartmentid_;
    userdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OrganizationUserPermissions::set_allocated_userdepartmentid(::std::string* userdepartmentid) {
  if (userdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdepartmentid_;
  }
  if (userdepartmentid) {
    set_has_userdepartmentid();
    userdepartmentid_ = userdepartmentid;
  } else {
    clear_has_userdepartmentid();
    userdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.OrganizationUserPermissions.UserDepartmentId)
}

// required bool IsAdministrator = 2;
inline bool OrganizationUserPermissions::has_isadministrator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrganizationUserPermissions::set_has_isadministrator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrganizationUserPermissions::clear_has_isadministrator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrganizationUserPermissions::clear_isadministrator() {
  isadministrator_ = false;
  clear_has_isadministrator();
}
inline bool OrganizationUserPermissions::isadministrator() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUserPermissions.IsAdministrator)
  return isadministrator_;
}
inline void OrganizationUserPermissions::set_isadministrator(bool value) {
  set_has_isadministrator();
  isadministrator_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUserPermissions.IsAdministrator)
}

// optional .Diadoc.Api.Proto.DocumentAccessLevel DocumentAccessLevel = 3 [default = UnknownDocumentAccessLevel];
inline bool OrganizationUserPermissions::has_documentaccesslevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrganizationUserPermissions::set_has_documentaccesslevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrganizationUserPermissions::clear_has_documentaccesslevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrganizationUserPermissions::clear_documentaccesslevel() {
  documentaccesslevel_ = -1;
  clear_has_documentaccesslevel();
}
inline ::Diadoc::Api::Proto::DocumentAccessLevel OrganizationUserPermissions::documentaccesslevel() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUserPermissions.DocumentAccessLevel)
  return static_cast< ::Diadoc::Api::Proto::DocumentAccessLevel >(documentaccesslevel_);
}
inline void OrganizationUserPermissions::set_documentaccesslevel(::Diadoc::Api::Proto::DocumentAccessLevel value) {
  assert(::Diadoc::Api::Proto::DocumentAccessLevel_IsValid(value));
  set_has_documentaccesslevel();
  documentaccesslevel_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUserPermissions.DocumentAccessLevel)
}

// required bool CanSignDocuments = 4;
inline bool OrganizationUserPermissions::has_cansigndocuments() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrganizationUserPermissions::set_has_cansigndocuments() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrganizationUserPermissions::clear_has_cansigndocuments() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrganizationUserPermissions::clear_cansigndocuments() {
  cansigndocuments_ = false;
  clear_has_cansigndocuments();
}
inline bool OrganizationUserPermissions::cansigndocuments() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUserPermissions.CanSignDocuments)
  return cansigndocuments_;
}
inline void OrganizationUserPermissions::set_cansigndocuments(bool value) {
  set_has_cansigndocuments();
  cansigndocuments_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUserPermissions.CanSignDocuments)
}

// required bool CanAddResolutions = 7;
inline bool OrganizationUserPermissions::has_canaddresolutions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrganizationUserPermissions::set_has_canaddresolutions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrganizationUserPermissions::clear_has_canaddresolutions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrganizationUserPermissions::clear_canaddresolutions() {
  canaddresolutions_ = false;
  clear_has_canaddresolutions();
}
inline bool OrganizationUserPermissions::canaddresolutions() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUserPermissions.CanAddResolutions)
  return canaddresolutions_;
}
inline void OrganizationUserPermissions::set_canaddresolutions(bool value) {
  set_has_canaddresolutions();
  canaddresolutions_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUserPermissions.CanAddResolutions)
}

// required bool CanRequestResolutions = 8;
inline bool OrganizationUserPermissions::has_canrequestresolutions() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrganizationUserPermissions::set_has_canrequestresolutions() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrganizationUserPermissions::clear_has_canrequestresolutions() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrganizationUserPermissions::clear_canrequestresolutions() {
  canrequestresolutions_ = false;
  clear_has_canrequestresolutions();
}
inline bool OrganizationUserPermissions::canrequestresolutions() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUserPermissions.CanRequestResolutions)
  return canrequestresolutions_;
}
inline void OrganizationUserPermissions::set_canrequestresolutions(bool value) {
  set_has_canrequestresolutions();
  canrequestresolutions_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUserPermissions.CanRequestResolutions)
}

// repeated string SelectedDepartmentIds = 9;
inline int OrganizationUserPermissions::selecteddepartmentids_size() const {
  return selecteddepartmentids_.size();
}
inline void OrganizationUserPermissions::clear_selecteddepartmentids() {
  selecteddepartmentids_.Clear();
}
inline const ::std::string& OrganizationUserPermissions::selecteddepartmentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUserPermissions.SelectedDepartmentIds)
  return selecteddepartmentids_.Get(index);
}
inline ::std::string* OrganizationUserPermissions::mutable_selecteddepartmentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.OrganizationUserPermissions.SelectedDepartmentIds)
  return selecteddepartmentids_.Mutable(index);
}
inline void OrganizationUserPermissions::set_selecteddepartmentids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUserPermissions.SelectedDepartmentIds)
  selecteddepartmentids_.Mutable(index)->assign(value);
}
inline void OrganizationUserPermissions::set_selecteddepartmentids(int index, const char* value) {
  selecteddepartmentids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.OrganizationUserPermissions.SelectedDepartmentIds)
}
inline void OrganizationUserPermissions::set_selecteddepartmentids(int index, const char* value, size_t size) {
  selecteddepartmentids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.OrganizationUserPermissions.SelectedDepartmentIds)
}
inline ::std::string* OrganizationUserPermissions::add_selecteddepartmentids() {
  return selecteddepartmentids_.Add();
}
inline void OrganizationUserPermissions::add_selecteddepartmentids(const ::std::string& value) {
  selecteddepartmentids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.OrganizationUserPermissions.SelectedDepartmentIds)
}
inline void OrganizationUserPermissions::add_selecteddepartmentids(const char* value) {
  selecteddepartmentids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.OrganizationUserPermissions.SelectedDepartmentIds)
}
inline void OrganizationUserPermissions::add_selecteddepartmentids(const char* value, size_t size) {
  selecteddepartmentids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.OrganizationUserPermissions.SelectedDepartmentIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
OrganizationUserPermissions::selecteddepartmentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.OrganizationUserPermissions.SelectedDepartmentIds)
  return selecteddepartmentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
OrganizationUserPermissions::mutable_selecteddepartmentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.OrganizationUserPermissions.SelectedDepartmentIds)
  return &selecteddepartmentids_;
}

// optional string JobTitle = 10;
inline bool OrganizationUserPermissions::has_jobtitle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OrganizationUserPermissions::set_has_jobtitle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OrganizationUserPermissions::clear_has_jobtitle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OrganizationUserPermissions::clear_jobtitle() {
  if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_->clear();
  }
  clear_has_jobtitle();
}
inline const ::std::string& OrganizationUserPermissions::jobtitle() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUserPermissions.JobTitle)
  return *jobtitle_;
}
inline void OrganizationUserPermissions::set_jobtitle(const ::std::string& value) {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_ = new ::std::string;
  }
  jobtitle_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUserPermissions.JobTitle)
}
inline void OrganizationUserPermissions::set_jobtitle(const char* value) {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_ = new ::std::string;
  }
  jobtitle_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.OrganizationUserPermissions.JobTitle)
}
inline void OrganizationUserPermissions::set_jobtitle(const char* value, size_t size) {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_ = new ::std::string;
  }
  jobtitle_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.OrganizationUserPermissions.JobTitle)
}
inline ::std::string* OrganizationUserPermissions::mutable_jobtitle() {
  set_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobtitle_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.OrganizationUserPermissions.JobTitle)
  return jobtitle_;
}
inline ::std::string* OrganizationUserPermissions::release_jobtitle() {
  clear_has_jobtitle();
  if (jobtitle_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jobtitle_;
    jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OrganizationUserPermissions::set_allocated_jobtitle(::std::string* jobtitle) {
  if (jobtitle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobtitle_;
  }
  if (jobtitle) {
    set_has_jobtitle();
    jobtitle_ = jobtitle;
  } else {
    clear_has_jobtitle();
    jobtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.OrganizationUserPermissions.JobTitle)
}

// required bool CanCreateDocuments = 11;
inline bool OrganizationUserPermissions::has_cancreatedocuments() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OrganizationUserPermissions::set_has_cancreatedocuments() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OrganizationUserPermissions::clear_has_cancreatedocuments() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OrganizationUserPermissions::clear_cancreatedocuments() {
  cancreatedocuments_ = false;
  clear_has_cancreatedocuments();
}
inline bool OrganizationUserPermissions::cancreatedocuments() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.OrganizationUserPermissions.CanCreateDocuments)
  return cancreatedocuments_;
}
inline void OrganizationUserPermissions::set_cancreatedocuments(bool value) {
  set_has_cancreatedocuments();
  cancreatedocuments_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.OrganizationUserPermissions.CanCreateDocuments)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Diadoc::Api::Proto::DocumentAccessLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::DocumentAccessLevel>() {
  return ::Diadoc::Api::Proto::DocumentAccessLevel_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OrganizationUserPermissions_2eproto__INCLUDED
