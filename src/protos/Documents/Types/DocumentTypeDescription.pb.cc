// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/Types/DocumentTypeDescription.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Documents/Types/DocumentTypeDescription.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {
namespace Types {

namespace {

const ::google::protobuf::Descriptor* DocumentTypeDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentTypeDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDocumentTypesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDocumentTypesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentFunction_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentWorkflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentWorkflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentMetadataItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentMetadataItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectedDocumentType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectedDocumentType_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectDocumentTypesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectDocumentTypesResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DocumentDocflow_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DocumentMetadataItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DocumentMetadataSource_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto() {
  protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Documents/Types/DocumentTypeDescription.proto");
  GOOGLE_CHECK(file != NULL);
  DocumentTypeDescription_descriptor_ = file->message_type(0);
  static const int DocumentTypeDescription_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescription, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescription, supporteddocflows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescription, requiresfnsregistration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescription, functions_),
  };
  DocumentTypeDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentTypeDescription_descriptor_,
      DocumentTypeDescription::default_instance_,
      DocumentTypeDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTypeDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentTypeDescription));
  GetDocumentTypesResponse_descriptor_ = file->message_type(1);
  static const int GetDocumentTypesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocumentTypesResponse, documenttypes_),
  };
  GetDocumentTypesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDocumentTypesResponse_descriptor_,
      GetDocumentTypesResponse::default_instance_,
      GetDocumentTypesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocumentTypesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDocumentTypesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDocumentTypesResponse));
  DocumentFunction_descriptor_ = file->message_type(2);
  static const int DocumentFunction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFunction, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFunction, versions_),
  };
  DocumentFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentFunction_descriptor_,
      DocumentFunction::default_instance_,
      DocumentFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentFunction));
  DocumentVersion_descriptor_ = file->message_type(3);
  static const int DocumentVersion_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersion, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersion, supportscontentpatching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersion, supportsencrypting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersion, titles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersion, isactual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersion, workflows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersion, supportspredefinedrecipienttitle_),
  };
  DocumentVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentVersion_descriptor_,
      DocumentVersion::default_instance_,
      DocumentVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentVersion));
  DocumentWorkflow_descriptor_ = file->message_type(4);
  static const int DocumentWorkflow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWorkflow, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWorkflow, isdefault_),
  };
  DocumentWorkflow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentWorkflow_descriptor_,
      DocumentWorkflow::default_instance_,
      DocumentWorkflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWorkflow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentWorkflow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentWorkflow));
  DocumentTitle_descriptor_ = file->message_type(5);
  static const int DocumentTitle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitle, isformal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitle, xsdurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitle, userdataxsdurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitle, metadataitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitle, encryptedmetadataitems_),
  };
  DocumentTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentTitle_descriptor_,
      DocumentTitle::default_instance_,
      DocumentTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentTitle));
  DocumentMetadataItem_descriptor_ = file->message_type(6);
  static const int DocumentMetadataItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetadataItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetadataItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetadataItem, isrequired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetadataItem, source_),
  };
  DocumentMetadataItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentMetadataItem_descriptor_,
      DocumentMetadataItem::default_instance_,
      DocumentMetadataItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetadataItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetadataItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentMetadataItem));
  DetectedDocumentType_descriptor_ = file->message_type(7);
  static const int DetectedDocumentType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedDocumentType, typenamedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedDocumentType, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedDocumentType, version_),
  };
  DetectedDocumentType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectedDocumentType_descriptor_,
      DetectedDocumentType::default_instance_,
      DetectedDocumentType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedDocumentType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectedDocumentType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectedDocumentType));
  DetectDocumentTypesResponse_descriptor_ = file->message_type(8);
  static const int DetectDocumentTypesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectDocumentTypesResponse, documenttypes_),
  };
  DetectDocumentTypesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectDocumentTypesResponse_descriptor_,
      DetectDocumentTypesResponse::default_instance_,
      DetectDocumentTypesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectDocumentTypesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectDocumentTypesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectDocumentTypesResponse));
  DocumentDocflow_descriptor_ = file->enum_type(0);
  DocumentMetadataItemType_descriptor_ = file->enum_type(1);
  DocumentMetadataSource_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentTypeDescription_descriptor_, &DocumentTypeDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDocumentTypesResponse_descriptor_, &GetDocumentTypesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentFunction_descriptor_, &DocumentFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentVersion_descriptor_, &DocumentVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentWorkflow_descriptor_, &DocumentWorkflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentTitle_descriptor_, &DocumentTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentMetadataItem_descriptor_, &DocumentMetadataItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectedDocumentType_descriptor_, &DetectedDocumentType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectDocumentTypesResponse_descriptor_, &DetectDocumentTypesResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescription_2eproto() {
  delete DocumentTypeDescription::default_instance_;
  delete DocumentTypeDescription_reflection_;
  delete GetDocumentTypesResponse::default_instance_;
  delete GetDocumentTypesResponse_reflection_;
  delete DocumentFunction::default_instance_;
  delete DocumentFunction_reflection_;
  delete DocumentVersion::default_instance_;
  delete DocumentVersion_reflection_;
  delete DocumentWorkflow::default_instance_;
  delete DocumentWorkflow_reflection_;
  delete DocumentTitle::default_instance_;
  delete DocumentTitle_reflection_;
  delete DocumentMetadataItem::default_instance_;
  delete DocumentMetadataItem_reflection_;
  delete DetectedDocumentType::default_instance_;
  delete DetectedDocumentType_reflection_;
  delete DetectDocumentTypesResponse::default_instance_;
  delete DetectDocumentTypesResponse_reflection_;
}

void protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n-Documents/Types/DocumentTypeDescriptio"
    "n.proto\022 Diadoc.Api.Proto.Documents.Type"
    "s\"\354\001\n\027DocumentTypeDescription\022\014\n\004Name\030\001 "
    "\002(\t\022\r\n\005Title\030\002 \002(\t\022L\n\021SupportedDocflows\030"
    "\003 \003(\01621.Diadoc.Api.Proto.Documents.Types"
    ".DocumentDocflow\022\037\n\027RequiresFnsRegistrat"
    "ion\030\004 \002(\010\022E\n\tFunctions\030\t \003(\01322.Diadoc.Ap"
    "i.Proto.Documents.Types.DocumentFunction"
    "\"l\n\030GetDocumentTypesResponse\022P\n\rDocument"
    "Types\030\001 \003(\01329.Diadoc.Api.Proto.Documents"
    ".Types.DocumentTypeDescription\"e\n\020Docume"
    "ntFunction\022\014\n\004Name\030\001 \002(\t\022C\n\010Versions\030\002 \003"
    "(\01321.Diadoc.Api.Proto.Documents.Types.Do"
    "cumentVersion\"\243\002\n\017DocumentVersion\022\017\n\007Ver"
    "sion\030\001 \002(\t\022\037\n\027SupportsContentPatching\030\002 "
    "\002(\010\022\032\n\022SupportsEncrypting\030\003 \002(\010\022\?\n\006Title"
    "s\030\004 \003(\0132/.Diadoc.Api.Proto.Documents.Typ"
    "es.DocumentTitle\022\020\n\010IsActual\030\005 \002(\010\022E\n\tWo"
    "rkflows\030\006 \003(\01322.Diadoc.Api.Proto.Documen"
    "ts.Types.DocumentWorkflow\022(\n SupportsPre"
    "definedRecipientTitle\030\007 \002(\010\"1\n\020DocumentW"
    "orkflow\022\n\n\002Id\030\001 \002(\005\022\021\n\tIsDefault\030\002 \002(\010\"\360"
    "\001\n\rDocumentTitle\022\020\n\010IsFormal\030\001 \002(\010\022\016\n\006Xs"
    "dUrl\030\002 \001(\t\022\026\n\016UserDataXsdUrl\030\005 \001(\t\022M\n\rMe"
    "tadataItems\030\003 \003(\01326.Diadoc.Api.Proto.Doc"
    "uments.Types.DocumentMetadataItem\022V\n\026Enc"
    "ryptedMetadataItems\030\004 \003(\01326.Diadoc.Api.P"
    "roto.Documents.Types.DocumentMetadataIte"
    "m\"\312\001\n\024DocumentMetadataItem\022\n\n\002Id\030\001 \002(\t\022H"
    "\n\004Type\030\002 \002(\0162:.Diadoc.Api.Proto.Document"
    "s.Types.DocumentMetadataItemType\022\022\n\nIsRe"
    "quired\030\003 \002(\010\022H\n\006Source\030\004 \002(\01628.Diadoc.Ap"
    "i.Proto.Documents.Types.DocumentMetadata"
    "Source\"N\n\024DetectedDocumentType\022\023\n\013TypeNa"
    "medId\030\001 \002(\t\022\020\n\010Function\030\002 \002(\t\022\017\n\007Version"
    "\030\003 \002(\t\"l\n\033DetectDocumentTypesResponse\022M\n"
    "\rDocumentTypes\030\001 \003(\01326.Diadoc.Api.Proto."
    "Documents.Types.DetectedDocumentType*-\n\017"
    "DocumentDocflow\022\014\n\010External\020\000\022\014\n\010Interna"
    "l\020\001*T\n\030DocumentMetadataItemType\022\n\n\006Strin"
    "g\020\000\022\013\n\007Integer\020\001\022\013\n\007Decimal\020\002\022\010\n\004Date\020\003\022"
    "\010\n\004Time\020\004*+\n\026DocumentMetadataSource\022\007\n\003X"
    "ml\020\000\022\010\n\004User\020\001", 1694);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Documents/Types/DocumentTypeDescription.proto", &protobuf_RegisterTypes);
  DocumentTypeDescription::default_instance_ = new DocumentTypeDescription();
  GetDocumentTypesResponse::default_instance_ = new GetDocumentTypesResponse();
  DocumentFunction::default_instance_ = new DocumentFunction();
  DocumentVersion::default_instance_ = new DocumentVersion();
  DocumentWorkflow::default_instance_ = new DocumentWorkflow();
  DocumentTitle::default_instance_ = new DocumentTitle();
  DocumentMetadataItem::default_instance_ = new DocumentMetadataItem();
  DetectedDocumentType::default_instance_ = new DetectedDocumentType();
  DetectDocumentTypesResponse::default_instance_ = new DetectDocumentTypesResponse();
  DocumentTypeDescription::default_instance_->InitAsDefaultInstance();
  GetDocumentTypesResponse::default_instance_->InitAsDefaultInstance();
  DocumentFunction::default_instance_->InitAsDefaultInstance();
  DocumentVersion::default_instance_->InitAsDefaultInstance();
  DocumentWorkflow::default_instance_->InitAsDefaultInstance();
  DocumentTitle::default_instance_->InitAsDefaultInstance();
  DocumentMetadataItem::default_instance_->InitAsDefaultInstance();
  DetectedDocumentType::default_instance_->InitAsDefaultInstance();
  DetectDocumentTypesResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Documents_2fTypes_2fDocumentTypeDescription_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Documents_2fTypes_2fDocumentTypeDescription_2eproto {
  StaticDescriptorInitializer_Documents_2fTypes_2fDocumentTypeDescription_2eproto() {
    protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto();
  }
} static_descriptor_initializer_Documents_2fTypes_2fDocumentTypeDescription_2eproto_;
const ::google::protobuf::EnumDescriptor* DocumentDocflow_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentDocflow_descriptor_;
}
bool DocumentDocflow_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DocumentMetadataItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentMetadataItemType_descriptor_;
}
bool DocumentMetadataItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DocumentMetadataSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentMetadataSource_descriptor_;
}
bool DocumentMetadataSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentTypeDescription::kNameFieldNumber;
const int DocumentTypeDescription::kTitleFieldNumber;
const int DocumentTypeDescription::kSupportedDocflowsFieldNumber;
const int DocumentTypeDescription::kRequiresFnsRegistrationFieldNumber;
const int DocumentTypeDescription::kFunctionsFieldNumber;
#endif  // !_MSC_VER

DocumentTypeDescription::DocumentTypeDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription)
}

void DocumentTypeDescription::InitAsDefaultInstance() {
}

DocumentTypeDescription::DocumentTypeDescription(const DocumentTypeDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription)
}

void DocumentTypeDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requiresfnsregistration_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentTypeDescription::~DocumentTypeDescription() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription)
  SharedDtor();
}

void DocumentTypeDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void DocumentTypeDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentTypeDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentTypeDescription_descriptor_;
}

const DocumentTypeDescription& DocumentTypeDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto();
  return *default_instance_;
}

DocumentTypeDescription* DocumentTypeDescription::default_instance_ = NULL;

DocumentTypeDescription* DocumentTypeDescription::New() const {
  return new DocumentTypeDescription;
}

void DocumentTypeDescription::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    requiresfnsregistration_ = false;
  }
  supporteddocflows_.Clear();
  functions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentTypeDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Title;
        break;
      }

      // required string Title = 2;
      case 2: {
        if (tag == 18) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SupportedDocflows;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentDocflow SupportedDocflows = 3;
      case 3: {
        if (tag == 24) {
         parse_SupportedDocflows:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::Types::DocumentDocflow_IsValid(value)) {
            add_supporteddocflows(static_cast< ::Diadoc::Api::Proto::Documents::Types::DocumentDocflow >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Diadoc::Api::Proto::Documents::Types::DocumentDocflow_IsValid,
                 this->mutable_supporteddocflows())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SupportedDocflows;
        if (input->ExpectTag(32)) goto parse_RequiresFnsRegistration;
        break;
      }

      // required bool RequiresFnsRegistration = 4;
      case 4: {
        if (tag == 32) {
         parse_RequiresFnsRegistration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requiresfnsregistration_)));
          set_has_requiresfnsregistration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Functions;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentFunction Functions = 9;
      case 9: {
        if (tag == 74) {
         parse_Functions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_functions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Functions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription)
  return false;
#undef DO_
}

void DocumentTypeDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string Title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentDocflow SupportedDocflows = 3;
  for (int i = 0; i < this->supporteddocflows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->supporteddocflows(i), output);
  }

  // required bool RequiresFnsRegistration = 4;
  if (has_requiresfnsregistration()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->requiresfnsregistration(), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentFunction Functions = 9;
  for (int i = 0; i < this->functions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->functions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription)
}

::google::protobuf::uint8* DocumentTypeDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string Title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentDocflow SupportedDocflows = 3;
  for (int i = 0; i < this->supporteddocflows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->supporteddocflows(i), target);
  }

  // required bool RequiresFnsRegistration = 4;
  if (has_requiresfnsregistration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->requiresfnsregistration(), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentFunction Functions = 9;
  for (int i = 0; i < this->functions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->functions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription)
  return target;
}

int DocumentTypeDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string Title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required bool RequiresFnsRegistration = 4;
    if (has_requiresfnsregistration()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentDocflow SupportedDocflows = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->supporteddocflows_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->supporteddocflows(i));
    }
    total_size += 1 * this->supporteddocflows_size() + data_size;
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentFunction Functions = 9;
  total_size += 1 * this->functions_size();
  for (int i = 0; i < this->functions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentTypeDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentTypeDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentTypeDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentTypeDescription::MergeFrom(const DocumentTypeDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  supporteddocflows_.MergeFrom(from.supporteddocflows_);
  functions_.MergeFrom(from.functions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_requiresfnsregistration()) {
      set_requiresfnsregistration(from.requiresfnsregistration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentTypeDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentTypeDescription::CopyFrom(const DocumentTypeDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentTypeDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->functions())) return false;
  return true;
}

void DocumentTypeDescription::Swap(DocumentTypeDescription* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(title_, other->title_);
    supporteddocflows_.Swap(&other->supporteddocflows_);
    std::swap(requiresfnsregistration_, other->requiresfnsregistration_);
    functions_.Swap(&other->functions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentTypeDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentTypeDescription_descriptor_;
  metadata.reflection = DocumentTypeDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDocumentTypesResponse::kDocumentTypesFieldNumber;
#endif  // !_MSC_VER

GetDocumentTypesResponse::GetDocumentTypesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponse)
}

void GetDocumentTypesResponse::InitAsDefaultInstance() {
}

GetDocumentTypesResponse::GetDocumentTypesResponse(const GetDocumentTypesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponse)
}

void GetDocumentTypesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDocumentTypesResponse::~GetDocumentTypesResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponse)
  SharedDtor();
}

void GetDocumentTypesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDocumentTypesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDocumentTypesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDocumentTypesResponse_descriptor_;
}

const GetDocumentTypesResponse& GetDocumentTypesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto();
  return *default_instance_;
}

GetDocumentTypesResponse* GetDocumentTypesResponse::default_instance_ = NULL;

GetDocumentTypesResponse* GetDocumentTypesResponse::New() const {
  return new GetDocumentTypesResponse;
}

void GetDocumentTypesResponse::Clear() {
  documenttypes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDocumentTypesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription DocumentTypes = 1;
      case 1: {
        if (tag == 10) {
         parse_DocumentTypes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documenttypes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DocumentTypes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponse)
  return false;
#undef DO_
}

void GetDocumentTypesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponse)
  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription DocumentTypes = 1;
  for (int i = 0; i < this->documenttypes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documenttypes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponse)
}

::google::protobuf::uint8* GetDocumentTypesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponse)
  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription DocumentTypes = 1;
  for (int i = 0; i < this->documenttypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documenttypes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.GetDocumentTypesResponse)
  return target;
}

int GetDocumentTypesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTypeDescription DocumentTypes = 1;
  total_size += 1 * this->documenttypes_size();
  for (int i = 0; i < this->documenttypes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documenttypes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDocumentTypesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDocumentTypesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDocumentTypesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDocumentTypesResponse::MergeFrom(const GetDocumentTypesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  documenttypes_.MergeFrom(from.documenttypes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDocumentTypesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDocumentTypesResponse::CopyFrom(const GetDocumentTypesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocumentTypesResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->documenttypes())) return false;
  return true;
}

void GetDocumentTypesResponse::Swap(GetDocumentTypesResponse* other) {
  if (other != this) {
    documenttypes_.Swap(&other->documenttypes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDocumentTypesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDocumentTypesResponse_descriptor_;
  metadata.reflection = GetDocumentTypesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentFunction::kNameFieldNumber;
const int DocumentFunction::kVersionsFieldNumber;
#endif  // !_MSC_VER

DocumentFunction::DocumentFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DocumentFunction)
}

void DocumentFunction::InitAsDefaultInstance() {
}

DocumentFunction::DocumentFunction(const DocumentFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DocumentFunction)
}

void DocumentFunction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentFunction::~DocumentFunction() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DocumentFunction)
  SharedDtor();
}

void DocumentFunction::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DocumentFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentFunction_descriptor_;
}

const DocumentFunction& DocumentFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto();
  return *default_instance_;
}

DocumentFunction* DocumentFunction::default_instance_ = NULL;

DocumentFunction* DocumentFunction::New() const {
  return new DocumentFunction;
}

void DocumentFunction::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DocumentFunction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Versions;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentVersion Versions = 2;
      case 2: {
        if (tag == 18) {
         parse_Versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_versions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Versions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DocumentFunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DocumentFunction)
  return false;
#undef DO_
}

void DocumentFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DocumentFunction)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentVersion Versions = 2;
  for (int i = 0; i < this->versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->versions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DocumentFunction)
}

::google::protobuf::uint8* DocumentFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DocumentFunction)
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentVersion Versions = 2;
  for (int i = 0; i < this->versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->versions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DocumentFunction)
  return target;
}

int DocumentFunction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentVersion Versions = 2;
  total_size += 1 * this->versions_size();
  for (int i = 0; i < this->versions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->versions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentFunction::MergeFrom(const DocumentFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  versions_.MergeFrom(from.versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentFunction::CopyFrom(const DocumentFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentFunction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->versions())) return false;
  return true;
}

void DocumentFunction::Swap(DocumentFunction* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    versions_.Swap(&other->versions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentFunction_descriptor_;
  metadata.reflection = DocumentFunction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentVersion::kVersionFieldNumber;
const int DocumentVersion::kSupportsContentPatchingFieldNumber;
const int DocumentVersion::kSupportsEncryptingFieldNumber;
const int DocumentVersion::kTitlesFieldNumber;
const int DocumentVersion::kIsActualFieldNumber;
const int DocumentVersion::kWorkflowsFieldNumber;
const int DocumentVersion::kSupportsPredefinedRecipientTitleFieldNumber;
#endif  // !_MSC_VER

DocumentVersion::DocumentVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DocumentVersion)
}

void DocumentVersion::InitAsDefaultInstance() {
}

DocumentVersion::DocumentVersion(const DocumentVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DocumentVersion)
}

void DocumentVersion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supportscontentpatching_ = false;
  supportsencrypting_ = false;
  isactual_ = false;
  supportspredefinedrecipienttitle_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentVersion::~DocumentVersion() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DocumentVersion)
  SharedDtor();
}

void DocumentVersion::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void DocumentVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentVersion_descriptor_;
}

const DocumentVersion& DocumentVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto();
  return *default_instance_;
}

DocumentVersion* DocumentVersion::default_instance_ = NULL;

DocumentVersion* DocumentVersion::New() const {
  return new DocumentVersion;
}

void DocumentVersion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DocumentVersion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 87) {
    ZR_(supportscontentpatching_, supportspredefinedrecipienttitle_);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  titles_.Clear();
  workflows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DocumentVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SupportsContentPatching;
        break;
      }

      // required bool SupportsContentPatching = 2;
      case 2: {
        if (tag == 16) {
         parse_SupportsContentPatching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supportscontentpatching_)));
          set_has_supportscontentpatching();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SupportsEncrypting;
        break;
      }

      // required bool SupportsEncrypting = 3;
      case 3: {
        if (tag == 24) {
         parse_SupportsEncrypting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supportsencrypting_)));
          set_has_supportsencrypting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Titles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTitle Titles = 4;
      case 4: {
        if (tag == 34) {
         parse_Titles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Titles;
        if (input->ExpectTag(40)) goto parse_IsActual;
        break;
      }

      // required bool IsActual = 5;
      case 5: {
        if (tag == 40) {
         parse_IsActual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactual_)));
          set_has_isactual();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Workflows;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentWorkflow Workflows = 6;
      case 6: {
        if (tag == 50) {
         parse_Workflows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_workflows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Workflows;
        if (input->ExpectTag(56)) goto parse_SupportsPredefinedRecipientTitle;
        break;
      }

      // required bool SupportsPredefinedRecipientTitle = 7;
      case 7: {
        if (tag == 56) {
         parse_SupportsPredefinedRecipientTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supportspredefinedrecipienttitle_)));
          set_has_supportspredefinedrecipienttitle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DocumentVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DocumentVersion)
  return false;
#undef DO_
}

void DocumentVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DocumentVersion)
  // required string Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // required bool SupportsContentPatching = 2;
  if (has_supportscontentpatching()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->supportscontentpatching(), output);
  }

  // required bool SupportsEncrypting = 3;
  if (has_supportsencrypting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->supportsencrypting(), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTitle Titles = 4;
  for (int i = 0; i < this->titles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->titles(i), output);
  }

  // required bool IsActual = 5;
  if (has_isactual()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isactual(), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentWorkflow Workflows = 6;
  for (int i = 0; i < this->workflows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->workflows(i), output);
  }

  // required bool SupportsPredefinedRecipientTitle = 7;
  if (has_supportspredefinedrecipienttitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->supportspredefinedrecipienttitle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DocumentVersion)
}

::google::protobuf::uint8* DocumentVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DocumentVersion)
  // required string Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // required bool SupportsContentPatching = 2;
  if (has_supportscontentpatching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->supportscontentpatching(), target);
  }

  // required bool SupportsEncrypting = 3;
  if (has_supportsencrypting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->supportsencrypting(), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTitle Titles = 4;
  for (int i = 0; i < this->titles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->titles(i), target);
  }

  // required bool IsActual = 5;
  if (has_isactual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isactual(), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentWorkflow Workflows = 6;
  for (int i = 0; i < this->workflows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->workflows(i), target);
  }

  // required bool SupportsPredefinedRecipientTitle = 7;
  if (has_supportspredefinedrecipienttitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->supportspredefinedrecipienttitle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DocumentVersion)
  return target;
}

int DocumentVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required bool SupportsContentPatching = 2;
    if (has_supportscontentpatching()) {
      total_size += 1 + 1;
    }

    // required bool SupportsEncrypting = 3;
    if (has_supportsencrypting()) {
      total_size += 1 + 1;
    }

    // required bool IsActual = 5;
    if (has_isactual()) {
      total_size += 1 + 1;
    }

    // required bool SupportsPredefinedRecipientTitle = 7;
    if (has_supportspredefinedrecipienttitle()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentTitle Titles = 4;
  total_size += 1 * this->titles_size();
  for (int i = 0; i < this->titles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titles(i));
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentWorkflow Workflows = 6;
  total_size += 1 * this->workflows_size();
  for (int i = 0; i < this->workflows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->workflows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentVersion::MergeFrom(const DocumentVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  titles_.MergeFrom(from.titles_);
  workflows_.MergeFrom(from.workflows_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_supportscontentpatching()) {
      set_supportscontentpatching(from.supportscontentpatching());
    }
    if (from.has_supportsencrypting()) {
      set_supportsencrypting(from.supportsencrypting());
    }
    if (from.has_isactual()) {
      set_isactual(from.isactual());
    }
    if (from.has_supportspredefinedrecipienttitle()) {
      set_supportspredefinedrecipienttitle(from.supportspredefinedrecipienttitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentVersion::CopyFrom(const DocumentVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000057) != 0x00000057) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->titles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->workflows())) return false;
  return true;
}

void DocumentVersion::Swap(DocumentVersion* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(supportscontentpatching_, other->supportscontentpatching_);
    std::swap(supportsencrypting_, other->supportsencrypting_);
    titles_.Swap(&other->titles_);
    std::swap(isactual_, other->isactual_);
    workflows_.Swap(&other->workflows_);
    std::swap(supportspredefinedrecipienttitle_, other->supportspredefinedrecipienttitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentVersion_descriptor_;
  metadata.reflection = DocumentVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentWorkflow::kIdFieldNumber;
const int DocumentWorkflow::kIsDefaultFieldNumber;
#endif  // !_MSC_VER

DocumentWorkflow::DocumentWorkflow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DocumentWorkflow)
}

void DocumentWorkflow::InitAsDefaultInstance() {
}

DocumentWorkflow::DocumentWorkflow(const DocumentWorkflow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DocumentWorkflow)
}

void DocumentWorkflow::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  isdefault_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentWorkflow::~DocumentWorkflow() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DocumentWorkflow)
  SharedDtor();
}

void DocumentWorkflow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DocumentWorkflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentWorkflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentWorkflow_descriptor_;
}

const DocumentWorkflow& DocumentWorkflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto();
  return *default_instance_;
}

DocumentWorkflow* DocumentWorkflow::default_instance_ = NULL;

DocumentWorkflow* DocumentWorkflow::New() const {
  return new DocumentWorkflow;
}

void DocumentWorkflow::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DocumentWorkflow*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, isdefault_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentWorkflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DocumentWorkflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsDefault;
        break;
      }

      // required bool IsDefault = 2;
      case 2: {
        if (tag == 16) {
         parse_IsDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DocumentWorkflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DocumentWorkflow)
  return false;
#undef DO_
}

void DocumentWorkflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DocumentWorkflow)
  // required int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool IsDefault = 2;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isdefault(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DocumentWorkflow)
}

::google::protobuf::uint8* DocumentWorkflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DocumentWorkflow)
  // required int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bool IsDefault = 2;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isdefault(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DocumentWorkflow)
  return target;
}

int DocumentWorkflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool IsDefault = 2;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentWorkflow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentWorkflow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentWorkflow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentWorkflow::MergeFrom(const DocumentWorkflow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentWorkflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentWorkflow::CopyFrom(const DocumentWorkflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentWorkflow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DocumentWorkflow::Swap(DocumentWorkflow* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentWorkflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentWorkflow_descriptor_;
  metadata.reflection = DocumentWorkflow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentTitle::kIsFormalFieldNumber;
const int DocumentTitle::kXsdUrlFieldNumber;
const int DocumentTitle::kUserDataXsdUrlFieldNumber;
const int DocumentTitle::kMetadataItemsFieldNumber;
const int DocumentTitle::kEncryptedMetadataItemsFieldNumber;
#endif  // !_MSC_VER

DocumentTitle::DocumentTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DocumentTitle)
}

void DocumentTitle::InitAsDefaultInstance() {
}

DocumentTitle::DocumentTitle(const DocumentTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DocumentTitle)
}

void DocumentTitle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  isformal_ = false;
  xsdurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userdataxsdurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentTitle::~DocumentTitle() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DocumentTitle)
  SharedDtor();
}

void DocumentTitle::SharedDtor() {
  if (xsdurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xsdurl_;
  }
  if (userdataxsdurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userdataxsdurl_;
  }
  if (this != default_instance_) {
  }
}

void DocumentTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentTitle_descriptor_;
}

const DocumentTitle& DocumentTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto();
  return *default_instance_;
}

DocumentTitle* DocumentTitle::default_instance_ = NULL;

DocumentTitle* DocumentTitle::New() const {
  return new DocumentTitle;
}

void DocumentTitle::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    isformal_ = false;
    if (has_xsdurl()) {
      if (xsdurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xsdurl_->clear();
      }
    }
    if (has_userdataxsdurl()) {
      if (userdataxsdurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userdataxsdurl_->clear();
      }
    }
  }
  metadataitems_.Clear();
  encryptedmetadataitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DocumentTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool IsFormal = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isformal_)));
          set_has_isformal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_XsdUrl;
        break;
      }

      // optional string XsdUrl = 2;
      case 2: {
        if (tag == 18) {
         parse_XsdUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xsdurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xsdurl().data(), this->xsdurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xsdurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MetadataItems;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem MetadataItems = 3;
      case 3: {
        if (tag == 26) {
         parse_MetadataItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadataitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MetadataItems;
        if (input->ExpectTag(34)) goto parse_EncryptedMetadataItems;
        break;
      }

      // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem EncryptedMetadataItems = 4;
      case 4: {
        if (tag == 34) {
         parse_EncryptedMetadataItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_encryptedmetadataitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_EncryptedMetadataItems;
        if (input->ExpectTag(42)) goto parse_UserDataXsdUrl;
        break;
      }

      // optional string UserDataXsdUrl = 5;
      case 5: {
        if (tag == 42) {
         parse_UserDataXsdUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userdataxsdurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userdataxsdurl().data(), this->userdataxsdurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userdataxsdurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DocumentTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DocumentTitle)
  return false;
#undef DO_
}

void DocumentTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DocumentTitle)
  // required bool IsFormal = 1;
  if (has_isformal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isformal(), output);
  }

  // optional string XsdUrl = 2;
  if (has_xsdurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xsdurl().data(), this->xsdurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xsdurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->xsdurl(), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem MetadataItems = 3;
  for (int i = 0; i < this->metadataitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->metadataitems(i), output);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem EncryptedMetadataItems = 4;
  for (int i = 0; i < this->encryptedmetadataitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->encryptedmetadataitems(i), output);
  }

  // optional string UserDataXsdUrl = 5;
  if (has_userdataxsdurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userdataxsdurl().data(), this->userdataxsdurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userdataxsdurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->userdataxsdurl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DocumentTitle)
}

::google::protobuf::uint8* DocumentTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DocumentTitle)
  // required bool IsFormal = 1;
  if (has_isformal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isformal(), target);
  }

  // optional string XsdUrl = 2;
  if (has_xsdurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xsdurl().data(), this->xsdurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xsdurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->xsdurl(), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem MetadataItems = 3;
  for (int i = 0; i < this->metadataitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->metadataitems(i), target);
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem EncryptedMetadataItems = 4;
  for (int i = 0; i < this->encryptedmetadataitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->encryptedmetadataitems(i), target);
  }

  // optional string UserDataXsdUrl = 5;
  if (has_userdataxsdurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userdataxsdurl().data(), this->userdataxsdurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userdataxsdurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userdataxsdurl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DocumentTitle)
  return target;
}

int DocumentTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool IsFormal = 1;
    if (has_isformal()) {
      total_size += 1 + 1;
    }

    // optional string XsdUrl = 2;
    if (has_xsdurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xsdurl());
    }

    // optional string UserDataXsdUrl = 5;
    if (has_userdataxsdurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userdataxsdurl());
    }

  }
  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem MetadataItems = 3;
  total_size += 1 * this->metadataitems_size();
  for (int i = 0; i < this->metadataitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metadataitems(i));
  }

  // repeated .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem EncryptedMetadataItems = 4;
  total_size += 1 * this->encryptedmetadataitems_size();
  for (int i = 0; i < this->encryptedmetadataitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->encryptedmetadataitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentTitle::MergeFrom(const DocumentTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  metadataitems_.MergeFrom(from.metadataitems_);
  encryptedmetadataitems_.MergeFrom(from.encryptedmetadataitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isformal()) {
      set_isformal(from.isformal());
    }
    if (from.has_xsdurl()) {
      set_xsdurl(from.xsdurl());
    }
    if (from.has_userdataxsdurl()) {
      set_userdataxsdurl(from.userdataxsdurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentTitle::CopyFrom(const DocumentTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->metadataitems())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->encryptedmetadataitems())) return false;
  return true;
}

void DocumentTitle::Swap(DocumentTitle* other) {
  if (other != this) {
    std::swap(isformal_, other->isformal_);
    std::swap(xsdurl_, other->xsdurl_);
    std::swap(userdataxsdurl_, other->userdataxsdurl_);
    metadataitems_.Swap(&other->metadataitems_);
    encryptedmetadataitems_.Swap(&other->encryptedmetadataitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentTitle_descriptor_;
  metadata.reflection = DocumentTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentMetadataItem::kIdFieldNumber;
const int DocumentMetadataItem::kTypeFieldNumber;
const int DocumentMetadataItem::kIsRequiredFieldNumber;
const int DocumentMetadataItem::kSourceFieldNumber;
#endif  // !_MSC_VER

DocumentMetadataItem::DocumentMetadataItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem)
}

void DocumentMetadataItem::InitAsDefaultInstance() {
}

DocumentMetadataItem::DocumentMetadataItem(const DocumentMetadataItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem)
}

void DocumentMetadataItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  isrequired_ = false;
  source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentMetadataItem::~DocumentMetadataItem() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem)
  SharedDtor();
}

void DocumentMetadataItem::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void DocumentMetadataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentMetadataItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentMetadataItem_descriptor_;
}

const DocumentMetadataItem& DocumentMetadataItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto();
  return *default_instance_;
}

DocumentMetadataItem* DocumentMetadataItem::default_instance_ = NULL;

DocumentMetadataItem* DocumentMetadataItem::New() const {
  return new DocumentMetadataItem;
}

void DocumentMetadataItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DocumentMetadataItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, source_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentMetadataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemType_IsValid(value)) {
            set_type(static_cast< ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsRequired;
        break;
      }

      // required bool IsRequired = 3;
      case 3: {
        if (tag == 24) {
         parse_IsRequired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrequired_)));
          set_has_isrequired();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Source;
        break;
      }

      // required .Diadoc.Api.Proto.Documents.Types.DocumentMetadataSource Source = 4;
      case 4: {
        if (tag == 32) {
         parse_Source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Documents::Types::DocumentMetadataSource_IsValid(value)) {
            set_source(static_cast< ::Diadoc::Api::Proto::Documents::Types::DocumentMetadataSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem)
  return false;
#undef DO_
}

void DocumentMetadataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem)
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemType Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required bool IsRequired = 3;
  if (has_isrequired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isrequired(), output);
  }

  // required .Diadoc.Api.Proto.Documents.Types.DocumentMetadataSource Source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem)
}

::google::protobuf::uint8* DocumentMetadataItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem)
  // required string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemType Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required bool IsRequired = 3;
  if (has_isrequired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isrequired(), target);
  }

  // required .Diadoc.Api.Proto.Documents.Types.DocumentMetadataSource Source = 4;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem)
  return target;
}

int DocumentMetadataItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .Diadoc.Api.Proto.Documents.Types.DocumentMetadataItemType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bool IsRequired = 3;
    if (has_isrequired()) {
      total_size += 1 + 1;
    }

    // required .Diadoc.Api.Proto.Documents.Types.DocumentMetadataSource Source = 4;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentMetadataItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentMetadataItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentMetadataItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentMetadataItem::MergeFrom(const DocumentMetadataItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isrequired()) {
      set_isrequired(from.isrequired());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentMetadataItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentMetadataItem::CopyFrom(const DocumentMetadataItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentMetadataItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DocumentMetadataItem::Swap(DocumentMetadataItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(isrequired_, other->isrequired_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentMetadataItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentMetadataItem_descriptor_;
  metadata.reflection = DocumentMetadataItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectedDocumentType::kTypeNamedIdFieldNumber;
const int DetectedDocumentType::kFunctionFieldNumber;
const int DetectedDocumentType::kVersionFieldNumber;
#endif  // !_MSC_VER

DetectedDocumentType::DetectedDocumentType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DetectedDocumentType)
}

void DetectedDocumentType::InitAsDefaultInstance() {
}

DetectedDocumentType::DetectedDocumentType(const DetectedDocumentType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DetectedDocumentType)
}

void DetectedDocumentType::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectedDocumentType::~DetectedDocumentType() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DetectedDocumentType)
  SharedDtor();
}

void DetectedDocumentType::SharedDtor() {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typenamedid_;
  }
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void DetectedDocumentType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectedDocumentType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectedDocumentType_descriptor_;
}

const DetectedDocumentType& DetectedDocumentType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto();
  return *default_instance_;
}

DetectedDocumentType* DetectedDocumentType::default_instance_ = NULL;

DetectedDocumentType* DetectedDocumentType::New() const {
  return new DetectedDocumentType;
}

void DetectedDocumentType::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_typenamedid()) {
      if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        typenamedid_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectedDocumentType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DetectedDocumentType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string TypeNamedId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typenamedid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->typenamedid().data(), this->typenamedid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "typenamedid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Function;
        break;
      }

      // required string Function = 2;
      case 2: {
        if (tag == 18) {
         parse_Function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "function");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Version;
        break;
      }

      // required string Version = 3;
      case 3: {
        if (tag == 26) {
         parse_Version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DetectedDocumentType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DetectedDocumentType)
  return false;
#undef DO_
}

void DetectedDocumentType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DetectedDocumentType)
  // required string TypeNamedId = 1;
  if (has_typenamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typenamedid().data(), this->typenamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typenamedid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->typenamedid(), output);
  }

  // required string Function = 2;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->function(), output);
  }

  // required string Version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DetectedDocumentType)
}

::google::protobuf::uint8* DetectedDocumentType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DetectedDocumentType)
  // required string TypeNamedId = 1;
  if (has_typenamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typenamedid().data(), this->typenamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typenamedid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->typenamedid(), target);
  }

  // required string Function = 2;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->function(), target);
  }

  // required string Version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DetectedDocumentType)
  return target;
}

int DetectedDocumentType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string TypeNamedId = 1;
    if (has_typenamedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typenamedid());
    }

    // required string Function = 2;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }

    // required string Version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectedDocumentType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectedDocumentType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectedDocumentType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectedDocumentType::MergeFrom(const DetectedDocumentType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typenamedid()) {
      set_typenamedid(from.typenamedid());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectedDocumentType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedDocumentType::CopyFrom(const DetectedDocumentType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedDocumentType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DetectedDocumentType::Swap(DetectedDocumentType* other) {
  if (other != this) {
    std::swap(typenamedid_, other->typenamedid_);
    std::swap(function_, other->function_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectedDocumentType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectedDocumentType_descriptor_;
  metadata.reflection = DetectedDocumentType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectDocumentTypesResponse::kDocumentTypesFieldNumber;
#endif  // !_MSC_VER

DetectDocumentTypesResponse::DetectDocumentTypesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Documents.Types.DetectDocumentTypesResponse)
}

void DetectDocumentTypesResponse::InitAsDefaultInstance() {
}

DetectDocumentTypesResponse::DetectDocumentTypesResponse(const DetectDocumentTypesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Documents.Types.DetectDocumentTypesResponse)
}

void DetectDocumentTypesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectDocumentTypesResponse::~DetectDocumentTypesResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Documents.Types.DetectDocumentTypesResponse)
  SharedDtor();
}

void DetectDocumentTypesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DetectDocumentTypesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectDocumentTypesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectDocumentTypesResponse_descriptor_;
}

const DetectDocumentTypesResponse& DetectDocumentTypesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Documents_2fTypes_2fDocumentTypeDescription_2eproto();
  return *default_instance_;
}

DetectDocumentTypesResponse* DetectDocumentTypesResponse::default_instance_ = NULL;

DetectDocumentTypesResponse* DetectDocumentTypesResponse::New() const {
  return new DetectDocumentTypesResponse;
}

void DetectDocumentTypesResponse::Clear() {
  documenttypes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectDocumentTypesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Documents.Types.DetectDocumentTypesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Documents.Types.DetectedDocumentType DocumentTypes = 1;
      case 1: {
        if (tag == 10) {
         parse_DocumentTypes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documenttypes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DocumentTypes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Documents.Types.DetectDocumentTypesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Documents.Types.DetectDocumentTypesResponse)
  return false;
#undef DO_
}

void DetectDocumentTypesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Documents.Types.DetectDocumentTypesResponse)
  // repeated .Diadoc.Api.Proto.Documents.Types.DetectedDocumentType DocumentTypes = 1;
  for (int i = 0; i < this->documenttypes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documenttypes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Documents.Types.DetectDocumentTypesResponse)
}

::google::protobuf::uint8* DetectDocumentTypesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Documents.Types.DetectDocumentTypesResponse)
  // repeated .Diadoc.Api.Proto.Documents.Types.DetectedDocumentType DocumentTypes = 1;
  for (int i = 0; i < this->documenttypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documenttypes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Documents.Types.DetectDocumentTypesResponse)
  return target;
}

int DetectDocumentTypesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Documents.Types.DetectedDocumentType DocumentTypes = 1;
  total_size += 1 * this->documenttypes_size();
  for (int i = 0; i < this->documenttypes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documenttypes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectDocumentTypesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectDocumentTypesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectDocumentTypesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectDocumentTypesResponse::MergeFrom(const DetectDocumentTypesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  documenttypes_.MergeFrom(from.documenttypes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectDocumentTypesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectDocumentTypesResponse::CopyFrom(const DetectDocumentTypesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectDocumentTypesResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->documenttypes())) return false;
  return true;
}

void DetectDocumentTypesResponse::Swap(DetectDocumentTypesResponse* other) {
  if (other != this) {
    documenttypes_.Swap(&other->documenttypes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectDocumentTypesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectDocumentTypesResponse_descriptor_;
  metadata.reflection = DetectDocumentTypesResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Types
}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
