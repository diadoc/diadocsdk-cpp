// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Documents/Document.proto

#ifndef PROTOBUF_Documents_2fDocument_2eproto__INCLUDED
#define PROTOBUF_Documents_2fDocument_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Content.pb.h"
#include "DocumentId.pb.h"
#include "CustomDataItem.pb.h"
#include "DocumentType.pb.h"
#include "DocumentDirection.pb.h"
#include "Documents/AcceptanceCertificateDocument.pb.h"
#include "Documents/BilateralDocument.pb.h"
#include "Documents/InvoiceDocument.pb.h"
#include "Documents/NonformalizedDocument.pb.h"
#include "Documents/UnilateralDocument.pb.h"
#include "Documents/UniversalTransferDocument.pb.h"
#include "ResolutionTarget.pb.h"
#include "ForwardDocumentEvent.pb.h"
#include "Events/DiadocMessage-PostApi.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Documents {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Documents_2fDocument_2eproto();
void protobuf_AssignDesc_Documents_2fDocument_2eproto();
void protobuf_ShutdownFile_Documents_2fDocument_2eproto();

class Document;
class ResolutionStatus;
class RecipientReceiptMetadata;
class ConfirmationMetadata;
class AmendmentRequestMetadata;
class Origin;

enum ResolutionStatusType {
  UnknownResolutionStatus = -1,
  None = 0,
  Approved = 1,
  Disapproved = 2,
  ApprovementRequested = 3,
  SignatureRequested = 4,
  SignatureDenied = 5
};
bool ResolutionStatusType_IsValid(int value);
const ResolutionStatusType ResolutionStatusType_MIN = UnknownResolutionStatus;
const ResolutionStatusType ResolutionStatusType_MAX = SignatureDenied;
const int ResolutionStatusType_ARRAYSIZE = ResolutionStatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResolutionStatusType_descriptor();
inline const ::std::string& ResolutionStatusType_Name(ResolutionStatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResolutionStatusType_descriptor(), value);
}
inline bool ResolutionStatusType_Parse(
    const ::std::string& name, ResolutionStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResolutionStatusType>(
    ResolutionStatusType_descriptor(), name, value);
}
enum RevocationStatus {
  UnknownRevocationStatus = 0,
  RevocationStatusNone = 1,
  RevocationIsRequestedByMe = 2,
  RequestsMyRevocation = 3,
  RevocationAccepted = 4,
  RevocationRejected = 5
};
bool RevocationStatus_IsValid(int value);
const RevocationStatus RevocationStatus_MIN = UnknownRevocationStatus;
const RevocationStatus RevocationStatus_MAX = RevocationRejected;
const int RevocationStatus_ARRAYSIZE = RevocationStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RevocationStatus_descriptor();
inline const ::std::string& RevocationStatus_Name(RevocationStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RevocationStatus_descriptor(), value);
}
inline bool RevocationStatus_Parse(
    const ::std::string& name, RevocationStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RevocationStatus>(
    RevocationStatus_descriptor(), name, value);
}
enum RoamingNotificationStatus {
  UnknownRoamingNotificationStatus = 0,
  RoamingNotificationStatusNone = 1,
  RoamingNotificationStatusSuccess = 2,
  RoamingNotificationStatusError = 3
};
bool RoamingNotificationStatus_IsValid(int value);
const RoamingNotificationStatus RoamingNotificationStatus_MIN = UnknownRoamingNotificationStatus;
const RoamingNotificationStatus RoamingNotificationStatus_MAX = RoamingNotificationStatusError;
const int RoamingNotificationStatus_ARRAYSIZE = RoamingNotificationStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoamingNotificationStatus_descriptor();
inline const ::std::string& RoamingNotificationStatus_Name(RoamingNotificationStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoamingNotificationStatus_descriptor(), value);
}
inline bool RoamingNotificationStatus_Parse(
    const ::std::string& name, RoamingNotificationStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoamingNotificationStatus>(
    RoamingNotificationStatus_descriptor(), name, value);
}
enum SenderSignatureStatus {
  UnknownSenderSignatureStatus = 0,
  WaitingForSenderSignature = 1,
  SenderSignatureUnchecked = 2,
  SenderSignatureCheckedAndValid = 3,
  SenderSignatureCheckedAndInvalid = 4
};
bool SenderSignatureStatus_IsValid(int value);
const SenderSignatureStatus SenderSignatureStatus_MIN = UnknownSenderSignatureStatus;
const SenderSignatureStatus SenderSignatureStatus_MAX = SenderSignatureCheckedAndInvalid;
const int SenderSignatureStatus_ARRAYSIZE = SenderSignatureStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SenderSignatureStatus_descriptor();
inline const ::std::string& SenderSignatureStatus_Name(SenderSignatureStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SenderSignatureStatus_descriptor(), value);
}
inline bool SenderSignatureStatus_Parse(
    const ::std::string& name, SenderSignatureStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SenderSignatureStatus>(
    SenderSignatureStatus_descriptor(), name, value);
}
enum ProxySignatureStatus {
  UnknownProxySignatureStatus = 0,
  ProxySignatureStatusNone = 1,
  WaitingForProxySignature = 2,
  WithProxySignature = 3,
  ProxySignatureRejected = 4,
  InvalidProxySignature = 5
};
bool ProxySignatureStatus_IsValid(int value);
const ProxySignatureStatus ProxySignatureStatus_MIN = UnknownProxySignatureStatus;
const ProxySignatureStatus ProxySignatureStatus_MAX = InvalidProxySignature;
const int ProxySignatureStatus_ARRAYSIZE = ProxySignatureStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProxySignatureStatus_descriptor();
inline const ::std::string& ProxySignatureStatus_Name(ProxySignatureStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProxySignatureStatus_descriptor(), value);
}
inline bool ProxySignatureStatus_Parse(
    const ::std::string& name, ProxySignatureStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProxySignatureStatus>(
    ProxySignatureStatus_descriptor(), name, value);
}
enum GeneralReceiptStatus {
  GeneralReceiptStatusUnknown = 0,
  GeneralReceiptStatusNotAcceptable = 1,
  HaveToCreateReceipt = 2,
  WaitingForReceipt = 3,
  Finished = 4
};
bool GeneralReceiptStatus_IsValid(int value);
const GeneralReceiptStatus GeneralReceiptStatus_MIN = GeneralReceiptStatusUnknown;
const GeneralReceiptStatus GeneralReceiptStatus_MAX = Finished;
const int GeneralReceiptStatus_ARRAYSIZE = GeneralReceiptStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* GeneralReceiptStatus_descriptor();
inline const ::std::string& GeneralReceiptStatus_Name(GeneralReceiptStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    GeneralReceiptStatus_descriptor(), value);
}
inline bool GeneralReceiptStatus_Parse(
    const ::std::string& name, GeneralReceiptStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GeneralReceiptStatus>(
    GeneralReceiptStatus_descriptor(), name, value);
}
enum RecipientResponseStatus {
  RecipientResponseStatusUnknown = 0,
  RecipientResponseStatusNotAcceptable = 1,
  WaitingForRecipientSignature = 2,
  WithRecipientSignature = 3,
  RecipientSignatureRequestRejected = 4,
  InvalidRecipientSignature = 5
};
bool RecipientResponseStatus_IsValid(int value);
const RecipientResponseStatus RecipientResponseStatus_MIN = RecipientResponseStatusUnknown;
const RecipientResponseStatus RecipientResponseStatus_MAX = InvalidRecipientSignature;
const int RecipientResponseStatus_ARRAYSIZE = RecipientResponseStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecipientResponseStatus_descriptor();
inline const ::std::string& RecipientResponseStatus_Name(RecipientResponseStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecipientResponseStatus_descriptor(), value);
}
inline bool RecipientResponseStatus_Parse(
    const ::std::string& name, RecipientResponseStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecipientResponseStatus>(
    RecipientResponseStatus_descriptor(), name, value);
}
enum MessageType {
  Unknown = 0,
  MessageLetter = 1,
  DraftLetter = 2,
  TemplateLetter = 3
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = Unknown;
const MessageType MessageType_MAX = TemplateLetter;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Document : public ::google::protobuf::Message {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();

  void Swap(Document* other);

  // implements Message ----------------------------------------------

  Document* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string IndexKey = 1;
  inline bool has_indexkey() const;
  inline void clear_indexkey();
  static const int kIndexKeyFieldNumber = 1;
  inline const ::std::string& indexkey() const;
  inline void set_indexkey(const ::std::string& value);
  inline void set_indexkey(const char* value);
  inline void set_indexkey(const char* value, size_t size);
  inline ::std::string* mutable_indexkey();
  inline ::std::string* release_indexkey();
  inline void set_allocated_indexkey(::std::string* indexkey);

  // required string MessageId = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 2;
  inline const ::std::string& messageid() const;
  inline void set_messageid(const ::std::string& value);
  inline void set_messageid(const char* value);
  inline void set_messageid(const char* value, size_t size);
  inline ::std::string* mutable_messageid();
  inline ::std::string* release_messageid();
  inline void set_allocated_messageid(::std::string* messageid);

  // required string EntityId = 3;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 3;
  inline const ::std::string& entityid() const;
  inline void set_entityid(const ::std::string& value);
  inline void set_entityid(const char* value);
  inline void set_entityid(const char* value, size_t size);
  inline ::std::string* mutable_entityid();
  inline ::std::string* release_entityid();
  inline void set_allocated_entityid(::std::string* entityid);

  // required sfixed64 CreationTimestampTicks = 4;
  inline bool has_creationtimestampticks() const;
  inline void clear_creationtimestampticks();
  static const int kCreationTimestampTicksFieldNumber = 4;
  inline ::google::protobuf::int64 creationtimestampticks() const;
  inline void set_creationtimestampticks(::google::protobuf::int64 value);

  // optional string CounteragentBoxId = 5;
  inline bool has_counteragentboxid() const;
  inline void clear_counteragentboxid();
  static const int kCounteragentBoxIdFieldNumber = 5;
  inline const ::std::string& counteragentboxid() const;
  inline void set_counteragentboxid(const ::std::string& value);
  inline void set_counteragentboxid(const char* value);
  inline void set_counteragentboxid(const char* value, size_t size);
  inline ::std::string* mutable_counteragentboxid();
  inline ::std::string* release_counteragentboxid();
  inline void set_allocated_counteragentboxid(::std::string* counteragentboxid);

  // optional .Diadoc.Api.Proto.DocumentType DocumentType = 6 [default = UnknownDocumentType];
  inline bool has_documenttype() const;
  inline void clear_documenttype();
  static const int kDocumentTypeFieldNumber = 6;
  inline ::Diadoc::Api::Proto::DocumentType documenttype() const;
  inline void set_documenttype(::Diadoc::Api::Proto::DocumentType value);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 7;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 8;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // optional .Diadoc.Api.Proto.Content Content = 9;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 9;
  inline const ::Diadoc::Api::Proto::Content& content() const;
  inline ::Diadoc::Api::Proto::Content* mutable_content();
  inline ::Diadoc::Api::Proto::Content* release_content();
  inline void set_allocated_content(::Diadoc::Api::Proto::Content* content);

  // optional string FileName = 10;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 10;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string DocumentDate = 11;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 11;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  inline void set_allocated_documentdate(::std::string* documentdate);

  // optional string DocumentNumber = 12;
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 12;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  inline void set_allocated_documentnumber(::std::string* documentnumber);

  // optional .Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata NonformalizedDocumentMetadata = 13;
  inline bool has_nonformalizeddocumentmetadata() const;
  inline void clear_nonformalizeddocumentmetadata();
  static const int kNonformalizedDocumentMetadataFieldNumber = 13;
  inline const ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata& nonformalizeddocumentmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* mutable_nonformalizeddocumentmetadata();
  inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* release_nonformalizeddocumentmetadata();
  inline void set_allocated_nonformalizeddocumentmetadata(::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* nonformalizeddocumentmetadata);

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceMetadata InvoiceMetadata = 14;
  inline bool has_invoicemetadata() const;
  inline void clear_invoicemetadata();
  static const int kInvoiceMetadataFieldNumber = 14;
  inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata& invoicemetadata() const;
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* mutable_invoicemetadata();
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* release_invoicemetadata();
  inline void set_allocated_invoicemetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* invoicemetadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata TrustConnectionRequestMetadata = 15;
  inline bool has_trustconnectionrequestmetadata() const;
  inline void clear_trustconnectionrequestmetadata();
  static const int kTrustConnectionRequestMetadataFieldNumber = 15;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata& trustconnectionrequestmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* mutable_trustconnectionrequestmetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* release_trustconnectionrequestmetadata();
  inline void set_allocated_trustconnectionrequestmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* trustconnectionrequestmetadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg12Metadata = 16;
  inline bool has_torg12metadata() const;
  inline void clear_torg12metadata();
  static const int kTorg12MetadataFieldNumber = 16;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& torg12metadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* mutable_torg12metadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* release_torg12metadata();
  inline void set_allocated_torg12metadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* torg12metadata);

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceRevisionMetadata InvoiceRevisionMetadata = 17;
  inline bool has_invoicerevisionmetadata() const;
  inline void clear_invoicerevisionmetadata();
  static const int kInvoiceRevisionMetadataFieldNumber = 17;
  inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata& invoicerevisionmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* mutable_invoicerevisionmetadata();
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* release_invoicerevisionmetadata();
  inline void set_allocated_invoicerevisionmetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* invoicerevisionmetadata);

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionMetadata InvoiceCorrectionMetadata = 18;
  inline bool has_invoicecorrectionmetadata() const;
  inline void clear_invoicecorrectionmetadata();
  static const int kInvoiceCorrectionMetadataFieldNumber = 18;
  inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata& invoicecorrectionmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* mutable_invoicecorrectionmetadata();
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* release_invoicecorrectionmetadata();
  inline void set_allocated_invoicecorrectionmetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* invoicecorrectionmetadata);

  // optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionRevisionMetadata InvoiceCorrectionRevisionMetadata = 19;
  inline bool has_invoicecorrectionrevisionmetadata() const;
  inline void clear_invoicecorrectionrevisionmetadata();
  static const int kInvoiceCorrectionRevisionMetadataFieldNumber = 19;
  inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata& invoicecorrectionrevisionmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* mutable_invoicecorrectionrevisionmetadata();
  inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* release_invoicecorrectionrevisionmetadata();
  inline void set_allocated_invoicecorrectionrevisionmetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* invoicecorrectionrevisionmetadata);

  // optional .Diadoc.Api.Proto.Documents.AcceptanceCertificateDocument.AcceptanceCertificateMetadata AcceptanceCertificateMetadata = 20;
  inline bool has_acceptancecertificatemetadata() const;
  inline void clear_acceptancecertificatemetadata();
  static const int kAcceptanceCertificateMetadataFieldNumber = 20;
  inline const ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata& acceptancecertificatemetadata() const;
  inline ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* mutable_acceptancecertificatemetadata();
  inline ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* release_acceptancecertificatemetadata();
  inline void set_allocated_acceptancecertificatemetadata(::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* acceptancecertificatemetadata);

  // optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ProformaInvoiceMetadata ProformaInvoiceMetadata = 21;
  inline bool has_proformainvoicemetadata() const;
  inline void clear_proformainvoicemetadata();
  static const int kProformaInvoiceMetadataFieldNumber = 21;
  inline const ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata& proformainvoicemetadata() const;
  inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* mutable_proformainvoicemetadata();
  inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* release_proformainvoicemetadata();
  inline void set_allocated_proformainvoicemetadata(::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* proformainvoicemetadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlTorg12Metadata = 22;
  inline bool has_xmltorg12metadata() const;
  inline void clear_xmltorg12metadata();
  static const int kXmlTorg12MetadataFieldNumber = 22;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& xmltorg12metadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* mutable_xmltorg12metadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* release_xmltorg12metadata();
  inline void set_allocated_xmltorg12metadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* xmltorg12metadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlAcceptanceCertificateMetadata = 23;
  inline bool has_xmlacceptancecertificatemetadata() const;
  inline void clear_xmlacceptancecertificatemetadata();
  static const int kXmlAcceptanceCertificateMetadataFieldNumber = 23;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& xmlacceptancecertificatemetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* mutable_xmlacceptancecertificatemetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* release_xmlacceptancecertificatemetadata();
  inline void set_allocated_xmlacceptancecertificatemetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* xmlacceptancecertificatemetadata);

  // optional bool IsDeleted = 24 [default = false];
  inline bool has_isdeleted() const;
  inline void clear_isdeleted();
  static const int kIsDeletedFieldNumber = 24;
  inline bool isdeleted() const;
  inline void set_isdeleted(bool value);

  // optional string DepartmentId = 25;
  inline bool has_departmentid() const;
  inline void clear_departmentid();
  static const int kDepartmentIdFieldNumber = 25;
  inline const ::std::string& departmentid() const;
  inline void set_departmentid(const ::std::string& value);
  inline void set_departmentid(const char* value);
  inline void set_departmentid(const char* value, size_t size);
  inline ::std::string* mutable_departmentid();
  inline ::std::string* release_departmentid();
  inline void set_allocated_departmentid(::std::string* departmentid);

  // optional bool IsTest = 26 [default = false];
  inline bool has_istest() const;
  inline void clear_istest();
  static const int kIsTestFieldNumber = 26;
  inline bool istest() const;
  inline void set_istest(bool value);

  // optional string FromDepartmentId = 27;
  inline bool has_fromdepartmentid() const;
  inline void clear_fromdepartmentid();
  static const int kFromDepartmentIdFieldNumber = 27;
  inline const ::std::string& fromdepartmentid() const;
  inline void set_fromdepartmentid(const ::std::string& value);
  inline void set_fromdepartmentid(const char* value);
  inline void set_fromdepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_fromdepartmentid();
  inline ::std::string* release_fromdepartmentid();
  inline void set_allocated_fromdepartmentid(::std::string* fromdepartmentid);

  // optional string ToDepartmentId = 28;
  inline bool has_todepartmentid() const;
  inline void clear_todepartmentid();
  static const int kToDepartmentIdFieldNumber = 28;
  inline const ::std::string& todepartmentid() const;
  inline void set_todepartmentid(const ::std::string& value);
  inline void set_todepartmentid(const char* value);
  inline void set_todepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_todepartmentid();
  inline ::std::string* release_todepartmentid();
  inline void set_allocated_todepartmentid(::std::string* todepartmentid);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata PriceListMetadata = 29;
  inline bool has_pricelistmetadata() const;
  inline void clear_pricelistmetadata();
  static const int kPriceListMetadataFieldNumber = 29;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata& pricelistmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* mutable_pricelistmetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* release_pricelistmetadata();
  inline void set_allocated_pricelistmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* pricelistmetadata);

  // optional string CustomDocumentId = 30;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 30;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // optional .Diadoc.Api.Proto.Documents.ResolutionStatus ResolutionStatus = 31;
  inline bool has_resolutionstatus() const;
  inline void clear_resolutionstatus();
  static const int kResolutionStatusFieldNumber = 31;
  inline const ::Diadoc::Api::Proto::Documents::ResolutionStatus& resolutionstatus() const;
  inline ::Diadoc::Api::Proto::Documents::ResolutionStatus* mutable_resolutionstatus();
  inline ::Diadoc::Api::Proto::Documents::ResolutionStatus* release_resolutionstatus();
  inline void set_allocated_resolutionstatus(::Diadoc::Api::Proto::Documents::ResolutionStatus* resolutionstatus);

  // optional .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 32 [default = UnknownRevocationStatus];
  inline bool has_revocationstatus() const;
  inline void clear_revocationstatus();
  static const int kRevocationStatusFieldNumber = 32;
  inline ::Diadoc::Api::Proto::Documents::RevocationStatus revocationstatus() const;
  inline void set_revocationstatus(::Diadoc::Api::Proto::Documents::RevocationStatus value);

  // optional sfixed64 SendTimestampTicks = 33;
  inline bool has_sendtimestampticks() const;
  inline void clear_sendtimestampticks();
  static const int kSendTimestampTicksFieldNumber = 33;
  inline ::google::protobuf::int64 sendtimestampticks() const;
  inline void set_sendtimestampticks(::google::protobuf::int64 value);

  // optional sfixed64 DeliveryTimestampTicks = 34;
  inline bool has_deliverytimestampticks() const;
  inline void clear_deliverytimestampticks();
  static const int kDeliveryTimestampTicksFieldNumber = 34;
  inline ::google::protobuf::int64 deliverytimestampticks() const;
  inline void set_deliverytimestampticks(::google::protobuf::int64 value);

  // repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 35;
  inline int forwarddocumentevents_size() const;
  inline void clear_forwarddocumentevents();
  static const int kForwardDocumentEventsFieldNumber = 35;
  inline const ::Diadoc::Api::Proto::ForwardDocumentEvent& forwarddocumentevents(int index) const;
  inline ::Diadoc::Api::Proto::ForwardDocumentEvent* mutable_forwarddocumentevents(int index);
  inline ::Diadoc::Api::Proto::ForwardDocumentEvent* add_forwarddocumentevents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >&
      forwarddocumentevents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >*
      mutable_forwarddocumentevents();

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata ReconciliationActMetadata = 38;
  inline bool has_reconciliationactmetadata() const;
  inline void clear_reconciliationactmetadata();
  static const int kReconciliationActMetadataFieldNumber = 38;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata& reconciliationactmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* mutable_reconciliationactmetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* release_reconciliationactmetadata();
  inline void set_allocated_reconciliationactmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* reconciliationactmetadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata ContractMetadata = 39;
  inline bool has_contractmetadata() const;
  inline void clear_contractmetadata();
  static const int kContractMetadataFieldNumber = 39;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata& contractmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* mutable_contractmetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* release_contractmetadata();
  inline void set_allocated_contractmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* contractmetadata);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg13Metadata = 40;
  inline bool has_torg13metadata() const;
  inline void clear_torg13metadata();
  static const int kTorg13MetadataFieldNumber = 40;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& torg13metadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* mutable_torg13metadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* release_torg13metadata();
  inline void set_allocated_torg13metadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* torg13metadata);

  // optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ServiceDetailsMetadata ServiceDetailsMetadata = 41;
  inline bool has_servicedetailsmetadata() const;
  inline void clear_servicedetailsmetadata();
  static const int kServiceDetailsMetadataFieldNumber = 41;
  inline const ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata& servicedetailsmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* mutable_servicedetailsmetadata();
  inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* release_servicedetailsmetadata();
  inline void set_allocated_servicedetailsmetadata(::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* servicedetailsmetadata);

  // optional .Diadoc.Api.Proto.Documents.RoamingNotificationStatus RoamingNotificationStatus = 42 [default = UnknownRoamingNotificationStatus];
  inline bool has_roamingnotificationstatus() const;
  inline void clear_roamingnotificationstatus();
  static const int kRoamingNotificationStatusFieldNumber = 42;
  inline ::Diadoc::Api::Proto::Documents::RoamingNotificationStatus roamingnotificationstatus() const;
  inline void set_roamingnotificationstatus(::Diadoc::Api::Proto::Documents::RoamingNotificationStatus value);

  // optional bool HasCustomPrintForm = 43 [default = false];
  inline bool has_hascustomprintform() const;
  inline void clear_hascustomprintform();
  static const int kHasCustomPrintFormFieldNumber = 43;
  inline bool hascustomprintform() const;
  inline void set_hascustomprintform(bool value);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 44;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 44;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // optional string PacketId = 45;
  inline bool has_packetid() const;
  inline void clear_packetid();
  static const int kPacketIdFieldNumber = 45;
  inline const ::std::string& packetid() const;
  inline void set_packetid(const ::std::string& value);
  inline void set_packetid(const char* value);
  inline void set_packetid(const char* value, size_t size);
  inline ::std::string* mutable_packetid();
  inline ::std::string* release_packetid();
  inline void set_allocated_packetid(::std::string* packetid);

  // optional .Diadoc.Api.Proto.DocumentDirection DocumentDirection = 46 [default = UnknownDocumentDirection];
  inline bool has_documentdirection() const;
  inline void clear_documentdirection();
  static const int kDocumentDirectionFieldNumber = 46;
  inline ::Diadoc::Api::Proto::DocumentDirection documentdirection() const;
  inline void set_documentdirection(::Diadoc::Api::Proto::DocumentDirection value);

  // optional sfixed64 LastModificationTimestampTicks = 47;
  inline bool has_lastmodificationtimestampticks() const;
  inline void clear_lastmodificationtimestampticks();
  static const int kLastModificationTimestampTicksFieldNumber = 47;
  inline ::google::protobuf::int64 lastmodificationtimestampticks() const;
  inline void set_lastmodificationtimestampticks(::google::protobuf::int64 value);

  // optional bool IsEncryptedContent = 48;
  inline bool has_isencryptedcontent() const;
  inline void clear_isencryptedcontent();
  static const int kIsEncryptedContentFieldNumber = 48;
  inline bool isencryptedcontent() const;
  inline void set_isencryptedcontent(bool value);

  // optional .Diadoc.Api.Proto.Documents.SenderSignatureStatus SenderSignatureStatus = 49 [default = UnknownSenderSignatureStatus];
  inline bool has_sendersignaturestatus() const;
  inline void clear_sendersignaturestatus();
  static const int kSenderSignatureStatusFieldNumber = 49;
  inline ::Diadoc::Api::Proto::Documents::SenderSignatureStatus sendersignaturestatus() const;
  inline void set_sendersignaturestatus(::Diadoc::Api::Proto::Documents::SenderSignatureStatus value);

  // optional .Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata SupplementaryAgreementMetadata = 50;
  inline bool has_supplementaryagreementmetadata() const;
  inline void clear_supplementaryagreementmetadata();
  static const int kSupplementaryAgreementMetadataFieldNumber = 50;
  inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::SupplementaryAgreementMetadata& supplementaryagreementmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::SupplementaryAgreementMetadata* mutable_supplementaryagreementmetadata();
  inline ::Diadoc::Api::Proto::Documents::BilateralDocument::SupplementaryAgreementMetadata* release_supplementaryagreementmetadata();
  inline void set_allocated_supplementaryagreementmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::SupplementaryAgreementMetadata* supplementaryagreementmetadata);

  // optional bool IsRead = 51 [default = false];
  inline bool has_isread() const;
  inline void clear_isread();
  static const int kIsReadFieldNumber = 51;
  inline bool isread() const;
  inline void set_isread(bool value);

  // optional string RoamingNotificationStatusDescription = 52;
  inline bool has_roamingnotificationstatusdescription() const;
  inline void clear_roamingnotificationstatusdescription();
  static const int kRoamingNotificationStatusDescriptionFieldNumber = 52;
  inline const ::std::string& roamingnotificationstatusdescription() const;
  inline void set_roamingnotificationstatusdescription(const ::std::string& value);
  inline void set_roamingnotificationstatusdescription(const char* value);
  inline void set_roamingnotificationstatusdescription(const char* value, size_t size);
  inline ::std::string* mutable_roamingnotificationstatusdescription();
  inline ::std::string* release_roamingnotificationstatusdescription();
  inline void set_allocated_roamingnotificationstatusdescription(::std::string* roamingnotificationstatusdescription);

  // optional bool PacketIsLocked = 53 [default = false];
  inline bool has_packetislocked() const;
  inline void clear_packetislocked();
  static const int kPacketIsLockedFieldNumber = 53;
  inline bool packetislocked() const;
  inline void set_packetislocked(bool value);

  // optional .Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata PriceListAgreementMetadata = 54;
  inline bool has_pricelistagreementmetadata() const;
  inline void clear_pricelistagreementmetadata();
  static const int kPriceListAgreementMetadataFieldNumber = 54;
  inline const ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata& pricelistagreementmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* mutable_pricelistagreementmetadata();
  inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* release_pricelistagreementmetadata();
  inline void set_allocated_pricelistagreementmetadata(::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* pricelistagreementmetadata);

  // optional .Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata CertificateRegistryMetadata = 55;
  inline bool has_certificateregistrymetadata() const;
  inline void clear_certificateregistrymetadata();
  static const int kCertificateRegistryMetadataFieldNumber = 55;
  inline const ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata& certificateregistrymetadata() const;
  inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* mutable_certificateregistrymetadata();
  inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* release_certificateregistrymetadata();
  inline void set_allocated_certificateregistrymetadata(::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* certificateregistrymetadata);

  // optional .Diadoc.Api.Proto.Documents.UniversalTransferDocument.UniversalTransferDocumentMetadata UniversalTransferDocumentMetadata = 56;
  inline bool has_universaltransferdocumentmetadata() const;
  inline void clear_universaltransferdocumentmetadata();
  static const int kUniversalTransferDocumentMetadataFieldNumber = 56;
  inline const ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentMetadata& universaltransferdocumentmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentMetadata* mutable_universaltransferdocumentmetadata();
  inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentMetadata* release_universaltransferdocumentmetadata();
  inline void set_allocated_universaltransferdocumentmetadata(::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentMetadata* universaltransferdocumentmetadata);

  // optional .Diadoc.Api.Proto.Documents.UniversalTransferDocument.UniversalTransferDocumentRevisionMetadata UniversalTransferDocumentRevisionMetadata = 57;
  inline bool has_universaltransferdocumentrevisionmetadata() const;
  inline void clear_universaltransferdocumentrevisionmetadata();
  static const int kUniversalTransferDocumentRevisionMetadataFieldNumber = 57;
  inline const ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentRevisionMetadata& universaltransferdocumentrevisionmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentRevisionMetadata* mutable_universaltransferdocumentrevisionmetadata();
  inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentRevisionMetadata* release_universaltransferdocumentrevisionmetadata();
  inline void set_allocated_universaltransferdocumentrevisionmetadata(::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentRevisionMetadata* universaltransferdocumentrevisionmetadata);

  // optional .Diadoc.Api.Proto.Documents.UniversalTransferDocument.UniversalCorrectionDocumentMetadata UniversalCorrectionDocumentMetadata = 58;
  inline bool has_universalcorrectiondocumentmetadata() const;
  inline void clear_universalcorrectiondocumentmetadata();
  static const int kUniversalCorrectionDocumentMetadataFieldNumber = 58;
  inline const ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentMetadata& universalcorrectiondocumentmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentMetadata* mutable_universalcorrectiondocumentmetadata();
  inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentMetadata* release_universalcorrectiondocumentmetadata();
  inline void set_allocated_universalcorrectiondocumentmetadata(::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentMetadata* universalcorrectiondocumentmetadata);

  // optional .Diadoc.Api.Proto.Documents.UniversalTransferDocument.UniversalCorrectionDocumentRevisionMetadata UniversalCorrectionDocumentRevisionMetadata = 59;
  inline bool has_universalcorrectiondocumentrevisionmetadata() const;
  inline void clear_universalcorrectiondocumentrevisionmetadata();
  static const int kUniversalCorrectionDocumentRevisionMetadataFieldNumber = 59;
  inline const ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentRevisionMetadata& universalcorrectiondocumentrevisionmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentRevisionMetadata* mutable_universalcorrectiondocumentrevisionmetadata();
  inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentRevisionMetadata* release_universalcorrectiondocumentrevisionmetadata();
  inline void set_allocated_universalcorrectiondocumentrevisionmetadata(::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentRevisionMetadata* universalcorrectiondocumentrevisionmetadata);

  // optional string ResolutionRouteId = 60 [default = ""];
  inline bool has_resolutionrouteid() const;
  inline void clear_resolutionrouteid();
  static const int kResolutionRouteIdFieldNumber = 60;
  inline const ::std::string& resolutionrouteid() const;
  inline void set_resolutionrouteid(const ::std::string& value);
  inline void set_resolutionrouteid(const char* value);
  inline void set_resolutionrouteid(const char* value, size_t size);
  inline ::std::string* mutable_resolutionrouteid();
  inline ::std::string* release_resolutionrouteid();
  inline void set_allocated_resolutionrouteid(::std::string* resolutionrouteid);

  // optional string AttachmentVersion = 61;
  inline bool has_attachmentversion() const;
  inline void clear_attachmentversion();
  static const int kAttachmentVersionFieldNumber = 61;
  inline const ::std::string& attachmentversion() const;
  inline void set_attachmentversion(const ::std::string& value);
  inline void set_attachmentversion(const char* value);
  inline void set_attachmentversion(const char* value, size_t size);
  inline ::std::string* mutable_attachmentversion();
  inline ::std::string* release_attachmentversion();
  inline void set_allocated_attachmentversion(::std::string* attachmentversion);

  // optional .Diadoc.Api.Proto.Documents.ProxySignatureStatus ProxySignatureStatus = 62 [default = UnknownProxySignatureStatus];
  inline bool has_proxysignaturestatus() const;
  inline void clear_proxysignaturestatus();
  static const int kProxySignatureStatusFieldNumber = 62;
  inline ::Diadoc::Api::Proto::Documents::ProxySignatureStatus proxysignaturestatus() const;
  inline void set_proxysignaturestatus(::Diadoc::Api::Proto::Documents::ProxySignatureStatus value);

  // required string TypeNamedId = 63;
  inline bool has_typenamedid() const;
  inline void clear_typenamedid();
  static const int kTypeNamedIdFieldNumber = 63;
  inline const ::std::string& typenamedid() const;
  inline void set_typenamedid(const ::std::string& value);
  inline void set_typenamedid(const char* value);
  inline void set_typenamedid(const char* value, size_t size);
  inline ::std::string* mutable_typenamedid();
  inline ::std::string* release_typenamedid();
  inline void set_allocated_typenamedid(::std::string* typenamedid);

  // required string Function = 64;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 64;
  inline const ::std::string& function() const;
  inline void set_function(const ::std::string& value);
  inline void set_function(const char* value);
  inline void set_function(const char* value, size_t size);
  inline ::std::string* mutable_function();
  inline ::std::string* release_function();
  inline void set_allocated_function(::std::string* function);

  // required int32 WorkflowId = 65;
  inline bool has_workflowid() const;
  inline void clear_workflowid();
  static const int kWorkflowIdFieldNumber = 65;
  inline ::google::protobuf::int32 workflowid() const;
  inline void set_workflowid(::google::protobuf::int32 value);

  // required string Title = 66;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 66;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 67;
  inline int metadata_size() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 67;
  inline const ::Diadoc::Api::Proto::Events::MetadataItem& metadata(int index) const;
  inline ::Diadoc::Api::Proto::Events::MetadataItem* mutable_metadata(int index);
  inline ::Diadoc::Api::Proto::Events::MetadataItem* add_metadata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >&
      metadata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >*
      mutable_metadata();

  // required .Diadoc.Api.Proto.Documents.RecipientReceiptMetadata RecipientReceiptMetadata = 68;
  inline bool has_recipientreceiptmetadata() const;
  inline void clear_recipientreceiptmetadata();
  static const int kRecipientReceiptMetadataFieldNumber = 68;
  inline const ::Diadoc::Api::Proto::Documents::RecipientReceiptMetadata& recipientreceiptmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::RecipientReceiptMetadata* mutable_recipientreceiptmetadata();
  inline ::Diadoc::Api::Proto::Documents::RecipientReceiptMetadata* release_recipientreceiptmetadata();
  inline void set_allocated_recipientreceiptmetadata(::Diadoc::Api::Proto::Documents::RecipientReceiptMetadata* recipientreceiptmetadata);

  // required .Diadoc.Api.Proto.Documents.ConfirmationMetadata ConfirmationMetadata = 69;
  inline bool has_confirmationmetadata() const;
  inline void clear_confirmationmetadata();
  static const int kConfirmationMetadataFieldNumber = 69;
  inline const ::Diadoc::Api::Proto::Documents::ConfirmationMetadata& confirmationmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::ConfirmationMetadata* mutable_confirmationmetadata();
  inline ::Diadoc::Api::Proto::Documents::ConfirmationMetadata* release_confirmationmetadata();
  inline void set_allocated_confirmationmetadata(::Diadoc::Api::Proto::Documents::ConfirmationMetadata* confirmationmetadata);

  // required .Diadoc.Api.Proto.Documents.RecipientResponseStatus RecipientResponseStatus = 70 [default = RecipientResponseStatusUnknown];
  inline bool has_recipientresponsestatus() const;
  inline void clear_recipientresponsestatus();
  static const int kRecipientResponseStatusFieldNumber = 70;
  inline ::Diadoc::Api::Proto::Documents::RecipientResponseStatus recipientresponsestatus() const;
  inline void set_recipientresponsestatus(::Diadoc::Api::Proto::Documents::RecipientResponseStatus value);

  // required .Diadoc.Api.Proto.Documents.AmendmentRequestMetadata AmendmentRequestMetadata = 71;
  inline bool has_amendmentrequestmetadata() const;
  inline void clear_amendmentrequestmetadata();
  static const int kAmendmentRequestMetadataFieldNumber = 71;
  inline const ::Diadoc::Api::Proto::Documents::AmendmentRequestMetadata& amendmentrequestmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::AmendmentRequestMetadata* mutable_amendmentrequestmetadata();
  inline ::Diadoc::Api::Proto::Documents::AmendmentRequestMetadata* release_amendmentrequestmetadata();
  inline void set_allocated_amendmentrequestmetadata(::Diadoc::Api::Proto::Documents::AmendmentRequestMetadata* amendmentrequestmetadata);

  // optional .Diadoc.Api.Proto.Documents.Origin Origin = 72;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 72;
  inline const ::Diadoc::Api::Proto::Documents::Origin& origin() const;
  inline ::Diadoc::Api::Proto::Documents::Origin* mutable_origin();
  inline ::Diadoc::Api::Proto::Documents::Origin* release_origin();
  inline void set_allocated_origin(::Diadoc::Api::Proto::Documents::Origin* origin);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.Document)
 private:
  inline void set_has_indexkey();
  inline void clear_has_indexkey();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_creationtimestampticks();
  inline void clear_has_creationtimestampticks();
  inline void set_has_counteragentboxid();
  inline void clear_has_counteragentboxid();
  inline void set_has_documenttype();
  inline void clear_has_documenttype();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_nonformalizeddocumentmetadata();
  inline void clear_has_nonformalizeddocumentmetadata();
  inline void set_has_invoicemetadata();
  inline void clear_has_invoicemetadata();
  inline void set_has_trustconnectionrequestmetadata();
  inline void clear_has_trustconnectionrequestmetadata();
  inline void set_has_torg12metadata();
  inline void clear_has_torg12metadata();
  inline void set_has_invoicerevisionmetadata();
  inline void clear_has_invoicerevisionmetadata();
  inline void set_has_invoicecorrectionmetadata();
  inline void clear_has_invoicecorrectionmetadata();
  inline void set_has_invoicecorrectionrevisionmetadata();
  inline void clear_has_invoicecorrectionrevisionmetadata();
  inline void set_has_acceptancecertificatemetadata();
  inline void clear_has_acceptancecertificatemetadata();
  inline void set_has_proformainvoicemetadata();
  inline void clear_has_proformainvoicemetadata();
  inline void set_has_xmltorg12metadata();
  inline void clear_has_xmltorg12metadata();
  inline void set_has_xmlacceptancecertificatemetadata();
  inline void clear_has_xmlacceptancecertificatemetadata();
  inline void set_has_isdeleted();
  inline void clear_has_isdeleted();
  inline void set_has_departmentid();
  inline void clear_has_departmentid();
  inline void set_has_istest();
  inline void clear_has_istest();
  inline void set_has_fromdepartmentid();
  inline void clear_has_fromdepartmentid();
  inline void set_has_todepartmentid();
  inline void clear_has_todepartmentid();
  inline void set_has_pricelistmetadata();
  inline void clear_has_pricelistmetadata();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_resolutionstatus();
  inline void clear_has_resolutionstatus();
  inline void set_has_revocationstatus();
  inline void clear_has_revocationstatus();
  inline void set_has_sendtimestampticks();
  inline void clear_has_sendtimestampticks();
  inline void set_has_deliverytimestampticks();
  inline void clear_has_deliverytimestampticks();
  inline void set_has_reconciliationactmetadata();
  inline void clear_has_reconciliationactmetadata();
  inline void set_has_contractmetadata();
  inline void clear_has_contractmetadata();
  inline void set_has_torg13metadata();
  inline void clear_has_torg13metadata();
  inline void set_has_servicedetailsmetadata();
  inline void clear_has_servicedetailsmetadata();
  inline void set_has_roamingnotificationstatus();
  inline void clear_has_roamingnotificationstatus();
  inline void set_has_hascustomprintform();
  inline void clear_has_hascustomprintform();
  inline void set_has_packetid();
  inline void clear_has_packetid();
  inline void set_has_documentdirection();
  inline void clear_has_documentdirection();
  inline void set_has_lastmodificationtimestampticks();
  inline void clear_has_lastmodificationtimestampticks();
  inline void set_has_isencryptedcontent();
  inline void clear_has_isencryptedcontent();
  inline void set_has_sendersignaturestatus();
  inline void clear_has_sendersignaturestatus();
  inline void set_has_supplementaryagreementmetadata();
  inline void clear_has_supplementaryagreementmetadata();
  inline void set_has_isread();
  inline void clear_has_isread();
  inline void set_has_roamingnotificationstatusdescription();
  inline void clear_has_roamingnotificationstatusdescription();
  inline void set_has_packetislocked();
  inline void clear_has_packetislocked();
  inline void set_has_pricelistagreementmetadata();
  inline void clear_has_pricelistagreementmetadata();
  inline void set_has_certificateregistrymetadata();
  inline void clear_has_certificateregistrymetadata();
  inline void set_has_universaltransferdocumentmetadata();
  inline void clear_has_universaltransferdocumentmetadata();
  inline void set_has_universaltransferdocumentrevisionmetadata();
  inline void clear_has_universaltransferdocumentrevisionmetadata();
  inline void set_has_universalcorrectiondocumentmetadata();
  inline void clear_has_universalcorrectiondocumentmetadata();
  inline void set_has_universalcorrectiondocumentrevisionmetadata();
  inline void clear_has_universalcorrectiondocumentrevisionmetadata();
  inline void set_has_resolutionrouteid();
  inline void clear_has_resolutionrouteid();
  inline void set_has_attachmentversion();
  inline void clear_has_attachmentversion();
  inline void set_has_proxysignaturestatus();
  inline void clear_has_proxysignaturestatus();
  inline void set_has_typenamedid();
  inline void clear_has_typenamedid();
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_workflowid();
  inline void clear_has_workflowid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_recipientreceiptmetadata();
  inline void clear_has_recipientreceiptmetadata();
  inline void set_has_confirmationmetadata();
  inline void clear_has_confirmationmetadata();
  inline void set_has_recipientresponsestatus();
  inline void clear_has_recipientresponsestatus();
  inline void set_has_amendmentrequestmetadata();
  inline void clear_has_amendmentrequestmetadata();
  inline void set_has_origin();
  inline void clear_has_origin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::std::string* indexkey_;
  ::std::string* messageid_;
  ::std::string* entityid_;
  ::google::protobuf::int64 creationtimestampticks_;
  ::std::string* counteragentboxid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::Diadoc::Api::Proto::Content* content_;
  ::std::string* filename_;
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* nonformalizeddocumentmetadata_;
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* invoicemetadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* trustconnectionrequestmetadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* torg12metadata_;
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* invoicerevisionmetadata_;
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* invoicecorrectionmetadata_;
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* invoicecorrectionrevisionmetadata_;
  int documenttype_;
  int revocationstatus_;
  ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* acceptancecertificatemetadata_;
  ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* proformainvoicemetadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* xmltorg12metadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* xmlacceptancecertificatemetadata_;
  ::std::string* departmentid_;
  ::std::string* fromdepartmentid_;
  ::std::string* todepartmentid_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* pricelistmetadata_;
  ::std::string* customdocumentid_;
  ::Diadoc::Api::Proto::Documents::ResolutionStatus* resolutionstatus_;
  ::google::protobuf::int64 sendtimestampticks_;
  ::google::protobuf::int64 deliverytimestampticks_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent > forwarddocumentevents_;
  bool isdeleted_;
  bool istest_;
  bool hascustomprintform_;
  bool isencryptedcontent_;
  int roamingnotificationstatus_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* reconciliationactmetadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* contractmetadata_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* torg13metadata_;
  ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* servicedetailsmetadata_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  ::std::string* packetid_;
  ::google::protobuf::int64 lastmodificationtimestampticks_;
  int documentdirection_;
  int sendersignaturestatus_;
  ::Diadoc::Api::Proto::Documents::BilateralDocument::SupplementaryAgreementMetadata* supplementaryagreementmetadata_;
  ::std::string* roamingnotificationstatusdescription_;
  ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* pricelistagreementmetadata_;
  ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* certificateregistrymetadata_;
  bool isread_;
  bool packetislocked_;
  int proxysignaturestatus_;
  ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentMetadata* universaltransferdocumentmetadata_;
  ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentRevisionMetadata* universaltransferdocumentrevisionmetadata_;
  ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentMetadata* universalcorrectiondocumentmetadata_;
  ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentRevisionMetadata* universalcorrectiondocumentrevisionmetadata_;
  ::std::string* resolutionrouteid_;
  ::std::string* attachmentversion_;
  ::std::string* typenamedid_;
  ::std::string* function_;
  ::std::string* title_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem > metadata_;
  ::google::protobuf::int32 workflowid_;
  int recipientresponsestatus_;
  ::Diadoc::Api::Proto::Documents::RecipientReceiptMetadata* recipientreceiptmetadata_;
  ::Diadoc::Api::Proto::Documents::ConfirmationMetadata* confirmationmetadata_;
  ::Diadoc::Api::Proto::Documents::AmendmentRequestMetadata* amendmentrequestmetadata_;
  ::Diadoc::Api::Proto::Documents::Origin* origin_;
  friend void  protobuf_AddDesc_Documents_2fDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fDocument_2eproto();

  void InitAsDefaultInstance();
  static Document* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionStatus : public ::google::protobuf::Message {
 public:
  ResolutionStatus();
  virtual ~ResolutionStatus();

  ResolutionStatus(const ResolutionStatus& from);

  inline ResolutionStatus& operator=(const ResolutionStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionStatus& default_instance();

  void Swap(ResolutionStatus* other);

  // implements Message ----------------------------------------------

  ResolutionStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionStatus& from);
  void MergeFrom(const ResolutionStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Documents.ResolutionStatusType Type = 1 [default = UnknownResolutionStatus];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::ResolutionStatusType type() const;
  inline void set_type(::Diadoc::Api::Proto::Documents::ResolutionStatusType value);

  // optional .Diadoc.Api.Proto.ResolutionTarget Target = 2;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::ResolutionTarget& target() const;
  inline ::Diadoc::Api::Proto::ResolutionTarget* mutable_target();
  inline ::Diadoc::Api::Proto::ResolutionTarget* release_target();
  inline void set_allocated_target(::Diadoc::Api::Proto::ResolutionTarget* target);

  // required string AuthorUserId = 3;
  inline bool has_authoruserid() const;
  inline void clear_authoruserid();
  static const int kAuthorUserIdFieldNumber = 3;
  inline const ::std::string& authoruserid() const;
  inline void set_authoruserid(const ::std::string& value);
  inline void set_authoruserid(const char* value);
  inline void set_authoruserid(const char* value, size_t size);
  inline ::std::string* mutable_authoruserid();
  inline ::std::string* release_authoruserid();
  inline void set_allocated_authoruserid(::std::string* authoruserid);

  // required string AuthorFIO = 4;
  inline bool has_authorfio() const;
  inline void clear_authorfio();
  static const int kAuthorFIOFieldNumber = 4;
  inline const ::std::string& authorfio() const;
  inline void set_authorfio(const ::std::string& value);
  inline void set_authorfio(const char* value);
  inline void set_authorfio(const char* value, size_t size);
  inline ::std::string* mutable_authorfio();
  inline ::std::string* release_authorfio();
  inline void set_allocated_authorfio(::std::string* authorfio);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.ResolutionStatus)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_authoruserid();
  inline void clear_has_authoruserid();
  inline void set_has_authorfio();
  inline void clear_has_authorfio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::ResolutionTarget* target_;
  ::std::string* authoruserid_;
  ::std::string* authorfio_;
  int type_;
  friend void  protobuf_AddDesc_Documents_2fDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fDocument_2eproto();

  void InitAsDefaultInstance();
  static ResolutionStatus* default_instance_;
};
// -------------------------------------------------------------------

class RecipientReceiptMetadata : public ::google::protobuf::Message {
 public:
  RecipientReceiptMetadata();
  virtual ~RecipientReceiptMetadata();

  RecipientReceiptMetadata(const RecipientReceiptMetadata& from);

  inline RecipientReceiptMetadata& operator=(const RecipientReceiptMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecipientReceiptMetadata& default_instance();

  void Swap(RecipientReceiptMetadata* other);

  // implements Message ----------------------------------------------

  RecipientReceiptMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecipientReceiptMetadata& from);
  void MergeFrom(const RecipientReceiptMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Documents.GeneralReceiptStatus ReceiptStatus = 1 [default = GeneralReceiptStatusUnknown];
  inline bool has_receiptstatus() const;
  inline void clear_receiptstatus();
  static const int kReceiptStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus receiptstatus() const;
  inline void set_receiptstatus(::Diadoc::Api::Proto::Documents::GeneralReceiptStatus value);

  // optional .Diadoc.Api.Proto.Documents.ConfirmationMetadata ConfirmationMetadata = 2;
  inline bool has_confirmationmetadata() const;
  inline void clear_confirmationmetadata();
  static const int kConfirmationMetadataFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Documents::ConfirmationMetadata& confirmationmetadata() const;
  inline ::Diadoc::Api::Proto::Documents::ConfirmationMetadata* mutable_confirmationmetadata();
  inline ::Diadoc::Api::Proto::Documents::ConfirmationMetadata* release_confirmationmetadata();
  inline void set_allocated_confirmationmetadata(::Diadoc::Api::Proto::Documents::ConfirmationMetadata* confirmationmetadata);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.RecipientReceiptMetadata)
 private:
  inline void set_has_receiptstatus();
  inline void clear_has_receiptstatus();
  inline void set_has_confirmationmetadata();
  inline void clear_has_confirmationmetadata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Documents::ConfirmationMetadata* confirmationmetadata_;
  int receiptstatus_;
  friend void  protobuf_AddDesc_Documents_2fDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fDocument_2eproto();

  void InitAsDefaultInstance();
  static RecipientReceiptMetadata* default_instance_;
};
// -------------------------------------------------------------------

class ConfirmationMetadata : public ::google::protobuf::Message {
 public:
  ConfirmationMetadata();
  virtual ~ConfirmationMetadata();

  ConfirmationMetadata(const ConfirmationMetadata& from);

  inline ConfirmationMetadata& operator=(const ConfirmationMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfirmationMetadata& default_instance();

  void Swap(ConfirmationMetadata* other);

  // implements Message ----------------------------------------------

  ConfirmationMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfirmationMetadata& from);
  void MergeFrom(const ConfirmationMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Documents.GeneralReceiptStatus ReceiptStatus = 1 [default = GeneralReceiptStatusUnknown];
  inline bool has_receiptstatus() const;
  inline void clear_receiptstatus();
  static const int kReceiptStatusFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus receiptstatus() const;
  inline void set_receiptstatus(::Diadoc::Api::Proto::Documents::GeneralReceiptStatus value);

  // required sfixed64 DateTimeTicks = 2;
  inline bool has_datetimeticks() const;
  inline void clear_datetimeticks();
  static const int kDateTimeTicksFieldNumber = 2;
  inline ::google::protobuf::int64 datetimeticks() const;
  inline void set_datetimeticks(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.ConfirmationMetadata)
 private:
  inline void set_has_receiptstatus();
  inline void clear_has_receiptstatus();
  inline void set_has_datetimeticks();
  inline void clear_has_datetimeticks();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 datetimeticks_;
  int receiptstatus_;
  friend void  protobuf_AddDesc_Documents_2fDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fDocument_2eproto();

  void InitAsDefaultInstance();
  static ConfirmationMetadata* default_instance_;
};
// -------------------------------------------------------------------

class AmendmentRequestMetadata : public ::google::protobuf::Message {
 public:
  AmendmentRequestMetadata();
  virtual ~AmendmentRequestMetadata();

  AmendmentRequestMetadata(const AmendmentRequestMetadata& from);

  inline AmendmentRequestMetadata& operator=(const AmendmentRequestMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AmendmentRequestMetadata& default_instance();

  void Swap(AmendmentRequestMetadata* other);

  // implements Message ----------------------------------------------

  AmendmentRequestMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AmendmentRequestMetadata& from);
  void MergeFrom(const AmendmentRequestMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 AmendmentFlags = 1;
  inline bool has_amendmentflags() const;
  inline void clear_amendmentflags();
  static const int kAmendmentFlagsFieldNumber = 1;
  inline ::google::protobuf::int32 amendmentflags() const;
  inline void set_amendmentflags(::google::protobuf::int32 value);

  // required .Diadoc.Api.Proto.Documents.GeneralReceiptStatus ReceiptStatus = 2 [default = GeneralReceiptStatusUnknown];
  inline bool has_receiptstatus() const;
  inline void clear_receiptstatus();
  static const int kReceiptStatusFieldNumber = 2;
  inline ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus receiptstatus() const;
  inline void set_receiptstatus(::Diadoc::Api::Proto::Documents::GeneralReceiptStatus value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.AmendmentRequestMetadata)
 private:
  inline void set_has_amendmentflags();
  inline void clear_has_amendmentflags();
  inline void set_has_receiptstatus();
  inline void clear_has_receiptstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 amendmentflags_;
  int receiptstatus_;
  friend void  protobuf_AddDesc_Documents_2fDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fDocument_2eproto();

  void InitAsDefaultInstance();
  static AmendmentRequestMetadata* default_instance_;
};
// -------------------------------------------------------------------

class Origin : public ::google::protobuf::Message {
 public:
  Origin();
  virtual ~Origin();

  Origin(const Origin& from);

  inline Origin& operator=(const Origin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Origin& default_instance();

  void Swap(Origin* other);

  // implements Message ----------------------------------------------

  Origin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Origin& from);
  void MergeFrom(const Origin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Documents.MessageType MessageType = 1;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 1;
  inline ::Diadoc::Api::Proto::Documents::MessageType messagetype() const;
  inline void set_messagetype(::Diadoc::Api::Proto::Documents::MessageType value);

  // required string MessageId = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 2;
  inline const ::std::string& messageid() const;
  inline void set_messageid(const ::std::string& value);
  inline void set_messageid(const char* value);
  inline void set_messageid(const char* value, size_t size);
  inline ::std::string* mutable_messageid();
  inline ::std::string* release_messageid();
  inline void set_allocated_messageid(::std::string* messageid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Documents.Origin)
 private:
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_messageid();
  inline void clear_has_messageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* messageid_;
  int messagetype_;
  friend void  protobuf_AddDesc_Documents_2fDocument_2eproto();
  friend void protobuf_AssignDesc_Documents_2fDocument_2eproto();
  friend void protobuf_ShutdownFile_Documents_2fDocument_2eproto();

  void InitAsDefaultInstance();
  static Origin* default_instance_;
};
// ===================================================================


// ===================================================================

// Document

// optional string IndexKey = 1;
inline bool Document::has_indexkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document::set_has_indexkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document::clear_has_indexkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document::clear_indexkey() {
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_->clear();
  }
  clear_has_indexkey();
}
inline const ::std::string& Document::indexkey() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.IndexKey)
  return *indexkey_;
}
inline void Document::set_indexkey(const ::std::string& value) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.IndexKey)
}
inline void Document::set_indexkey(const char* value) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.IndexKey)
}
inline void Document::set_indexkey(const char* value, size_t size) {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  indexkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.IndexKey)
}
inline ::std::string* Document::mutable_indexkey() {
  set_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    indexkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.IndexKey)
  return indexkey_;
}
inline ::std::string* Document::release_indexkey() {
  clear_has_indexkey();
  if (indexkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = indexkey_;
    indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_indexkey(::std::string* indexkey) {
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete indexkey_;
  }
  if (indexkey) {
    set_has_indexkey();
    indexkey_ = indexkey;
  } else {
    clear_has_indexkey();
    indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.IndexKey)
}

// required string MessageId = 2;
inline bool Document::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document::clear_messageid() {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_->clear();
  }
  clear_has_messageid();
}
inline const ::std::string& Document::messageid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.MessageId)
  return *messageid_;
}
inline void Document::set_messageid(const ::std::string& value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.MessageId)
}
inline void Document::set_messageid(const char* value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.MessageId)
}
inline void Document::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.MessageId)
}
inline ::std::string* Document::mutable_messageid() {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.MessageId)
  return messageid_;
}
inline ::std::string* Document::release_messageid() {
  clear_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = messageid_;
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_messageid(::std::string* messageid) {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messageid_;
  }
  if (messageid) {
    set_has_messageid();
    messageid_ = messageid;
  } else {
    clear_has_messageid();
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.MessageId)
}

// required string EntityId = 3;
inline bool Document::has_entityid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Document::set_has_entityid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Document::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Document::clear_entityid() {
  if (entityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityid_->clear();
  }
  clear_has_entityid();
}
inline const ::std::string& Document::entityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.EntityId)
  return *entityid_;
}
inline void Document::set_entityid(const ::std::string& value) {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityid_ = new ::std::string;
  }
  entityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.EntityId)
}
inline void Document::set_entityid(const char* value) {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityid_ = new ::std::string;
  }
  entityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.EntityId)
}
inline void Document::set_entityid(const char* value, size_t size) {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityid_ = new ::std::string;
  }
  entityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.EntityId)
}
inline ::std::string* Document::mutable_entityid() {
  set_has_entityid();
  if (entityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    entityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.EntityId)
  return entityid_;
}
inline ::std::string* Document::release_entityid() {
  clear_has_entityid();
  if (entityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = entityid_;
    entityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_entityid(::std::string* entityid) {
  if (entityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entityid_;
  }
  if (entityid) {
    set_has_entityid();
    entityid_ = entityid;
  } else {
    clear_has_entityid();
    entityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.EntityId)
}

// required sfixed64 CreationTimestampTicks = 4;
inline bool Document::has_creationtimestampticks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Document::set_has_creationtimestampticks() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Document::clear_has_creationtimestampticks() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Document::clear_creationtimestampticks() {
  creationtimestampticks_ = GOOGLE_LONGLONG(0);
  clear_has_creationtimestampticks();
}
inline ::google::protobuf::int64 Document::creationtimestampticks() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.CreationTimestampTicks)
  return creationtimestampticks_;
}
inline void Document::set_creationtimestampticks(::google::protobuf::int64 value) {
  set_has_creationtimestampticks();
  creationtimestampticks_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.CreationTimestampTicks)
}

// optional string CounteragentBoxId = 5;
inline bool Document::has_counteragentboxid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Document::set_has_counteragentboxid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Document::clear_has_counteragentboxid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Document::clear_counteragentboxid() {
  if (counteragentboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    counteragentboxid_->clear();
  }
  clear_has_counteragentboxid();
}
inline const ::std::string& Document::counteragentboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.CounteragentBoxId)
  return *counteragentboxid_;
}
inline void Document::set_counteragentboxid(const ::std::string& value) {
  set_has_counteragentboxid();
  if (counteragentboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    counteragentboxid_ = new ::std::string;
  }
  counteragentboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.CounteragentBoxId)
}
inline void Document::set_counteragentboxid(const char* value) {
  set_has_counteragentboxid();
  if (counteragentboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    counteragentboxid_ = new ::std::string;
  }
  counteragentboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.CounteragentBoxId)
}
inline void Document::set_counteragentboxid(const char* value, size_t size) {
  set_has_counteragentboxid();
  if (counteragentboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    counteragentboxid_ = new ::std::string;
  }
  counteragentboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.CounteragentBoxId)
}
inline ::std::string* Document::mutable_counteragentboxid() {
  set_has_counteragentboxid();
  if (counteragentboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    counteragentboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.CounteragentBoxId)
  return counteragentboxid_;
}
inline ::std::string* Document::release_counteragentboxid() {
  clear_has_counteragentboxid();
  if (counteragentboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = counteragentboxid_;
    counteragentboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_counteragentboxid(::std::string* counteragentboxid) {
  if (counteragentboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete counteragentboxid_;
  }
  if (counteragentboxid) {
    set_has_counteragentboxid();
    counteragentboxid_ = counteragentboxid;
  } else {
    clear_has_counteragentboxid();
    counteragentboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.CounteragentBoxId)
}

// optional .Diadoc.Api.Proto.DocumentType DocumentType = 6 [default = UnknownDocumentType];
inline bool Document::has_documenttype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Document::set_has_documenttype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Document::clear_has_documenttype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Document::clear_documenttype() {
  documenttype_ = -1;
  clear_has_documenttype();
}
inline ::Diadoc::Api::Proto::DocumentType Document::documenttype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.DocumentType)
  return static_cast< ::Diadoc::Api::Proto::DocumentType >(documenttype_);
}
inline void Document::set_documenttype(::Diadoc::Api::Proto::DocumentType value) {
  assert(::Diadoc::Api::Proto::DocumentType_IsValid(value));
  set_has_documenttype();
  documenttype_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.DocumentType)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 7;
inline int Document::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void Document::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& Document::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* Document::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* Document::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Document.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
Document::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Document.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
Document::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Document.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 8;
inline int Document::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void Document::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& Document::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* Document::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* Document::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Document.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
Document::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Document.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
Document::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Document.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// optional .Diadoc.Api.Proto.Content Content = 9;
inline bool Document::has_content() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Document::set_has_content() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Document::clear_has_content() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Document::clear_content() {
  if (content_ != NULL) content_->::Diadoc::Api::Proto::Content::Clear();
  clear_has_content();
}
inline const ::Diadoc::Api::Proto::Content& Document::content() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.Content)
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::Diadoc::Api::Proto::Content* Document::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::Diadoc::Api::Proto::Content;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.Content)
  return content_;
}
inline ::Diadoc::Api::Proto::Content* Document::release_content() {
  clear_has_content();
  ::Diadoc::Api::Proto::Content* temp = content_;
  content_ = NULL;
  return temp;
}
inline void Document::set_allocated_content(::Diadoc::Api::Proto::Content* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.Content)
}

// optional string FileName = 10;
inline bool Document::has_filename() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Document::set_has_filename() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Document::clear_has_filename() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Document::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& Document::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.FileName)
  return *filename_;
}
inline void Document::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.FileName)
}
inline void Document::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.FileName)
}
inline void Document::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.FileName)
}
inline ::std::string* Document::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.FileName)
  return filename_;
}
inline ::std::string* Document::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.FileName)
}

// optional string DocumentDate = 11;
inline bool Document::has_documentdate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Document::set_has_documentdate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Document::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Document::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& Document::documentdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.DocumentDate)
  return *documentdate_;
}
inline void Document::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.DocumentDate)
}
inline void Document::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.DocumentDate)
}
inline void Document::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.DocumentDate)
}
inline ::std::string* Document::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.DocumentDate)
  return documentdate_;
}
inline ::std::string* Document::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_documentdate(::std::string* documentdate) {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentdate) {
    set_has_documentdate();
    documentdate_ = documentdate;
  } else {
    clear_has_documentdate();
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.DocumentDate)
}

// optional string DocumentNumber = 12;
inline bool Document::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Document::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Document::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Document::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& Document::documentnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.DocumentNumber)
  return *documentnumber_;
}
inline void Document::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.DocumentNumber)
}
inline void Document::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.DocumentNumber)
}
inline void Document::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.DocumentNumber)
}
inline ::std::string* Document::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.DocumentNumber)
  return documentnumber_;
}
inline ::std::string* Document::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_documentnumber(::std::string* documentnumber) {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documentnumber) {
    set_has_documentnumber();
    documentnumber_ = documentnumber;
  } else {
    clear_has_documentnumber();
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.DocumentNumber)
}

// optional .Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata NonformalizedDocumentMetadata = 13;
inline bool Document::has_nonformalizeddocumentmetadata() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Document::set_has_nonformalizeddocumentmetadata() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Document::clear_has_nonformalizeddocumentmetadata() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Document::clear_nonformalizeddocumentmetadata() {
  if (nonformalizeddocumentmetadata_ != NULL) nonformalizeddocumentmetadata_->::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata::Clear();
  clear_has_nonformalizeddocumentmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata& Document::nonformalizeddocumentmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.NonformalizedDocumentMetadata)
  return nonformalizeddocumentmetadata_ != NULL ? *nonformalizeddocumentmetadata_ : *default_instance_->nonformalizeddocumentmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* Document::mutable_nonformalizeddocumentmetadata() {
  set_has_nonformalizeddocumentmetadata();
  if (nonformalizeddocumentmetadata_ == NULL) nonformalizeddocumentmetadata_ = new ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.NonformalizedDocumentMetadata)
  return nonformalizeddocumentmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* Document::release_nonformalizeddocumentmetadata() {
  clear_has_nonformalizeddocumentmetadata();
  ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* temp = nonformalizeddocumentmetadata_;
  nonformalizeddocumentmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_nonformalizeddocumentmetadata(::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* nonformalizeddocumentmetadata) {
  delete nonformalizeddocumentmetadata_;
  nonformalizeddocumentmetadata_ = nonformalizeddocumentmetadata;
  if (nonformalizeddocumentmetadata) {
    set_has_nonformalizeddocumentmetadata();
  } else {
    clear_has_nonformalizeddocumentmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.NonformalizedDocumentMetadata)
}

// optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceMetadata InvoiceMetadata = 14;
inline bool Document::has_invoicemetadata() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Document::set_has_invoicemetadata() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Document::clear_has_invoicemetadata() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Document::clear_invoicemetadata() {
  if (invoicemetadata_ != NULL) invoicemetadata_->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata::Clear();
  clear_has_invoicemetadata();
}
inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata& Document::invoicemetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.InvoiceMetadata)
  return invoicemetadata_ != NULL ? *invoicemetadata_ : *default_instance_->invoicemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* Document::mutable_invoicemetadata() {
  set_has_invoicemetadata();
  if (invoicemetadata_ == NULL) invoicemetadata_ = new ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.InvoiceMetadata)
  return invoicemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* Document::release_invoicemetadata() {
  clear_has_invoicemetadata();
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* temp = invoicemetadata_;
  invoicemetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_invoicemetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceMetadata* invoicemetadata) {
  delete invoicemetadata_;
  invoicemetadata_ = invoicemetadata;
  if (invoicemetadata) {
    set_has_invoicemetadata();
  } else {
    clear_has_invoicemetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.InvoiceMetadata)
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.TrustConnectionRequestMetadata TrustConnectionRequestMetadata = 15;
inline bool Document::has_trustconnectionrequestmetadata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Document::set_has_trustconnectionrequestmetadata() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Document::clear_has_trustconnectionrequestmetadata() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Document::clear_trustconnectionrequestmetadata() {
  if (trustconnectionrequestmetadata_ != NULL) trustconnectionrequestmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata::Clear();
  clear_has_trustconnectionrequestmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata& Document::trustconnectionrequestmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.TrustConnectionRequestMetadata)
  return trustconnectionrequestmetadata_ != NULL ? *trustconnectionrequestmetadata_ : *default_instance_->trustconnectionrequestmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* Document::mutable_trustconnectionrequestmetadata() {
  set_has_trustconnectionrequestmetadata();
  if (trustconnectionrequestmetadata_ == NULL) trustconnectionrequestmetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.TrustConnectionRequestMetadata)
  return trustconnectionrequestmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* Document::release_trustconnectionrequestmetadata() {
  clear_has_trustconnectionrequestmetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* temp = trustconnectionrequestmetadata_;
  trustconnectionrequestmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_trustconnectionrequestmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::TrustConnectionRequestMetadata* trustconnectionrequestmetadata) {
  delete trustconnectionrequestmetadata_;
  trustconnectionrequestmetadata_ = trustconnectionrequestmetadata;
  if (trustconnectionrequestmetadata) {
    set_has_trustconnectionrequestmetadata();
  } else {
    clear_has_trustconnectionrequestmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.TrustConnectionRequestMetadata)
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg12Metadata = 16;
inline bool Document::has_torg12metadata() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Document::set_has_torg12metadata() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Document::clear_has_torg12metadata() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Document::clear_torg12metadata() {
  if (torg12metadata_ != NULL) torg12metadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::Clear();
  clear_has_torg12metadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& Document::torg12metadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.Torg12Metadata)
  return torg12metadata_ != NULL ? *torg12metadata_ : *default_instance_->torg12metadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::mutable_torg12metadata() {
  set_has_torg12metadata();
  if (torg12metadata_ == NULL) torg12metadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.Torg12Metadata)
  return torg12metadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::release_torg12metadata() {
  clear_has_torg12metadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* temp = torg12metadata_;
  torg12metadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_torg12metadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* torg12metadata) {
  delete torg12metadata_;
  torg12metadata_ = torg12metadata;
  if (torg12metadata) {
    set_has_torg12metadata();
  } else {
    clear_has_torg12metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.Torg12Metadata)
}

// optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceRevisionMetadata InvoiceRevisionMetadata = 17;
inline bool Document::has_invoicerevisionmetadata() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Document::set_has_invoicerevisionmetadata() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Document::clear_has_invoicerevisionmetadata() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Document::clear_invoicerevisionmetadata() {
  if (invoicerevisionmetadata_ != NULL) invoicerevisionmetadata_->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata::Clear();
  clear_has_invoicerevisionmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata& Document::invoicerevisionmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.InvoiceRevisionMetadata)
  return invoicerevisionmetadata_ != NULL ? *invoicerevisionmetadata_ : *default_instance_->invoicerevisionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* Document::mutable_invoicerevisionmetadata() {
  set_has_invoicerevisionmetadata();
  if (invoicerevisionmetadata_ == NULL) invoicerevisionmetadata_ = new ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.InvoiceRevisionMetadata)
  return invoicerevisionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* Document::release_invoicerevisionmetadata() {
  clear_has_invoicerevisionmetadata();
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* temp = invoicerevisionmetadata_;
  invoicerevisionmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_invoicerevisionmetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceRevisionMetadata* invoicerevisionmetadata) {
  delete invoicerevisionmetadata_;
  invoicerevisionmetadata_ = invoicerevisionmetadata;
  if (invoicerevisionmetadata) {
    set_has_invoicerevisionmetadata();
  } else {
    clear_has_invoicerevisionmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.InvoiceRevisionMetadata)
}

// optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionMetadata InvoiceCorrectionMetadata = 18;
inline bool Document::has_invoicecorrectionmetadata() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Document::set_has_invoicecorrectionmetadata() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Document::clear_has_invoicecorrectionmetadata() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Document::clear_invoicecorrectionmetadata() {
  if (invoicecorrectionmetadata_ != NULL) invoicecorrectionmetadata_->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata::Clear();
  clear_has_invoicecorrectionmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata& Document::invoicecorrectionmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.InvoiceCorrectionMetadata)
  return invoicecorrectionmetadata_ != NULL ? *invoicecorrectionmetadata_ : *default_instance_->invoicecorrectionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* Document::mutable_invoicecorrectionmetadata() {
  set_has_invoicecorrectionmetadata();
  if (invoicecorrectionmetadata_ == NULL) invoicecorrectionmetadata_ = new ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.InvoiceCorrectionMetadata)
  return invoicecorrectionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* Document::release_invoicecorrectionmetadata() {
  clear_has_invoicecorrectionmetadata();
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* temp = invoicecorrectionmetadata_;
  invoicecorrectionmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_invoicecorrectionmetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionMetadata* invoicecorrectionmetadata) {
  delete invoicecorrectionmetadata_;
  invoicecorrectionmetadata_ = invoicecorrectionmetadata;
  if (invoicecorrectionmetadata) {
    set_has_invoicecorrectionmetadata();
  } else {
    clear_has_invoicecorrectionmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.InvoiceCorrectionMetadata)
}

// optional .Diadoc.Api.Proto.Documents.InvoiceDocument.InvoiceCorrectionRevisionMetadata InvoiceCorrectionRevisionMetadata = 19;
inline bool Document::has_invoicecorrectionrevisionmetadata() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Document::set_has_invoicecorrectionrevisionmetadata() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Document::clear_has_invoicecorrectionrevisionmetadata() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Document::clear_invoicecorrectionrevisionmetadata() {
  if (invoicecorrectionrevisionmetadata_ != NULL) invoicecorrectionrevisionmetadata_->::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata::Clear();
  clear_has_invoicecorrectionrevisionmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata& Document::invoicecorrectionrevisionmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.InvoiceCorrectionRevisionMetadata)
  return invoicecorrectionrevisionmetadata_ != NULL ? *invoicecorrectionrevisionmetadata_ : *default_instance_->invoicecorrectionrevisionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* Document::mutable_invoicecorrectionrevisionmetadata() {
  set_has_invoicecorrectionrevisionmetadata();
  if (invoicecorrectionrevisionmetadata_ == NULL) invoicecorrectionrevisionmetadata_ = new ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.InvoiceCorrectionRevisionMetadata)
  return invoicecorrectionrevisionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* Document::release_invoicecorrectionrevisionmetadata() {
  clear_has_invoicecorrectionrevisionmetadata();
  ::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* temp = invoicecorrectionrevisionmetadata_;
  invoicecorrectionrevisionmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_invoicecorrectionrevisionmetadata(::Diadoc::Api::Proto::Documents::InvoiceDocument::InvoiceCorrectionRevisionMetadata* invoicecorrectionrevisionmetadata) {
  delete invoicecorrectionrevisionmetadata_;
  invoicecorrectionrevisionmetadata_ = invoicecorrectionrevisionmetadata;
  if (invoicecorrectionrevisionmetadata) {
    set_has_invoicecorrectionrevisionmetadata();
  } else {
    clear_has_invoicecorrectionrevisionmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.InvoiceCorrectionRevisionMetadata)
}

// optional .Diadoc.Api.Proto.Documents.AcceptanceCertificateDocument.AcceptanceCertificateMetadata AcceptanceCertificateMetadata = 20;
inline bool Document::has_acceptancecertificatemetadata() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Document::set_has_acceptancecertificatemetadata() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Document::clear_has_acceptancecertificatemetadata() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Document::clear_acceptancecertificatemetadata() {
  if (acceptancecertificatemetadata_ != NULL) acceptancecertificatemetadata_->::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata::Clear();
  clear_has_acceptancecertificatemetadata();
}
inline const ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata& Document::acceptancecertificatemetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.AcceptanceCertificateMetadata)
  return acceptancecertificatemetadata_ != NULL ? *acceptancecertificatemetadata_ : *default_instance_->acceptancecertificatemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* Document::mutable_acceptancecertificatemetadata() {
  set_has_acceptancecertificatemetadata();
  if (acceptancecertificatemetadata_ == NULL) acceptancecertificatemetadata_ = new ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.AcceptanceCertificateMetadata)
  return acceptancecertificatemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* Document::release_acceptancecertificatemetadata() {
  clear_has_acceptancecertificatemetadata();
  ::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* temp = acceptancecertificatemetadata_;
  acceptancecertificatemetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_acceptancecertificatemetadata(::Diadoc::Api::Proto::Documents::AcceptanceCertificateDocument::AcceptanceCertificateMetadata* acceptancecertificatemetadata) {
  delete acceptancecertificatemetadata_;
  acceptancecertificatemetadata_ = acceptancecertificatemetadata;
  if (acceptancecertificatemetadata) {
    set_has_acceptancecertificatemetadata();
  } else {
    clear_has_acceptancecertificatemetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.AcceptanceCertificateMetadata)
}

// optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ProformaInvoiceMetadata ProformaInvoiceMetadata = 21;
inline bool Document::has_proformainvoicemetadata() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Document::set_has_proformainvoicemetadata() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Document::clear_has_proformainvoicemetadata() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Document::clear_proformainvoicemetadata() {
  if (proformainvoicemetadata_ != NULL) proformainvoicemetadata_->::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata::Clear();
  clear_has_proformainvoicemetadata();
}
inline const ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata& Document::proformainvoicemetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.ProformaInvoiceMetadata)
  return proformainvoicemetadata_ != NULL ? *proformainvoicemetadata_ : *default_instance_->proformainvoicemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* Document::mutable_proformainvoicemetadata() {
  set_has_proformainvoicemetadata();
  if (proformainvoicemetadata_ == NULL) proformainvoicemetadata_ = new ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.ProformaInvoiceMetadata)
  return proformainvoicemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* Document::release_proformainvoicemetadata() {
  clear_has_proformainvoicemetadata();
  ::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* temp = proformainvoicemetadata_;
  proformainvoicemetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_proformainvoicemetadata(::Diadoc::Api::Proto::Documents::UnilateralDocument::ProformaInvoiceMetadata* proformainvoicemetadata) {
  delete proformainvoicemetadata_;
  proformainvoicemetadata_ = proformainvoicemetadata;
  if (proformainvoicemetadata) {
    set_has_proformainvoicemetadata();
  } else {
    clear_has_proformainvoicemetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.ProformaInvoiceMetadata)
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlTorg12Metadata = 22;
inline bool Document::has_xmltorg12metadata() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Document::set_has_xmltorg12metadata() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Document::clear_has_xmltorg12metadata() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Document::clear_xmltorg12metadata() {
  if (xmltorg12metadata_ != NULL) xmltorg12metadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::Clear();
  clear_has_xmltorg12metadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& Document::xmltorg12metadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.XmlTorg12Metadata)
  return xmltorg12metadata_ != NULL ? *xmltorg12metadata_ : *default_instance_->xmltorg12metadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::mutable_xmltorg12metadata() {
  set_has_xmltorg12metadata();
  if (xmltorg12metadata_ == NULL) xmltorg12metadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.XmlTorg12Metadata)
  return xmltorg12metadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::release_xmltorg12metadata() {
  clear_has_xmltorg12metadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* temp = xmltorg12metadata_;
  xmltorg12metadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_xmltorg12metadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* xmltorg12metadata) {
  delete xmltorg12metadata_;
  xmltorg12metadata_ = xmltorg12metadata;
  if (xmltorg12metadata) {
    set_has_xmltorg12metadata();
  } else {
    clear_has_xmltorg12metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.XmlTorg12Metadata)
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata XmlAcceptanceCertificateMetadata = 23;
inline bool Document::has_xmlacceptancecertificatemetadata() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Document::set_has_xmlacceptancecertificatemetadata() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Document::clear_has_xmlacceptancecertificatemetadata() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Document::clear_xmlacceptancecertificatemetadata() {
  if (xmlacceptancecertificatemetadata_ != NULL) xmlacceptancecertificatemetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::Clear();
  clear_has_xmlacceptancecertificatemetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& Document::xmlacceptancecertificatemetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.XmlAcceptanceCertificateMetadata)
  return xmlacceptancecertificatemetadata_ != NULL ? *xmlacceptancecertificatemetadata_ : *default_instance_->xmlacceptancecertificatemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::mutable_xmlacceptancecertificatemetadata() {
  set_has_xmlacceptancecertificatemetadata();
  if (xmlacceptancecertificatemetadata_ == NULL) xmlacceptancecertificatemetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.XmlAcceptanceCertificateMetadata)
  return xmlacceptancecertificatemetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::release_xmlacceptancecertificatemetadata() {
  clear_has_xmlacceptancecertificatemetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* temp = xmlacceptancecertificatemetadata_;
  xmlacceptancecertificatemetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_xmlacceptancecertificatemetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* xmlacceptancecertificatemetadata) {
  delete xmlacceptancecertificatemetadata_;
  xmlacceptancecertificatemetadata_ = xmlacceptancecertificatemetadata;
  if (xmlacceptancecertificatemetadata) {
    set_has_xmlacceptancecertificatemetadata();
  } else {
    clear_has_xmlacceptancecertificatemetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.XmlAcceptanceCertificateMetadata)
}

// optional bool IsDeleted = 24 [default = false];
inline bool Document::has_isdeleted() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Document::set_has_isdeleted() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Document::clear_has_isdeleted() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Document::clear_isdeleted() {
  isdeleted_ = false;
  clear_has_isdeleted();
}
inline bool Document::isdeleted() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.IsDeleted)
  return isdeleted_;
}
inline void Document::set_isdeleted(bool value) {
  set_has_isdeleted();
  isdeleted_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.IsDeleted)
}

// optional string DepartmentId = 25;
inline bool Document::has_departmentid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Document::set_has_departmentid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Document::clear_has_departmentid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Document::clear_departmentid() {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_->clear();
  }
  clear_has_departmentid();
}
inline const ::std::string& Document::departmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.DepartmentId)
  return *departmentid_;
}
inline void Document::set_departmentid(const ::std::string& value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.DepartmentId)
}
inline void Document::set_departmentid(const char* value) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.DepartmentId)
}
inline void Document::set_departmentid(const char* value, size_t size) {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  departmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.DepartmentId)
}
inline ::std::string* Document::mutable_departmentid() {
  set_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    departmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.DepartmentId)
  return departmentid_;
}
inline ::std::string* Document::release_departmentid() {
  clear_has_departmentid();
  if (departmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = departmentid_;
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_departmentid(::std::string* departmentid) {
  if (departmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete departmentid_;
  }
  if (departmentid) {
    set_has_departmentid();
    departmentid_ = departmentid;
  } else {
    clear_has_departmentid();
    departmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.DepartmentId)
}

// optional bool IsTest = 26 [default = false];
inline bool Document::has_istest() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Document::set_has_istest() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Document::clear_has_istest() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Document::clear_istest() {
  istest_ = false;
  clear_has_istest();
}
inline bool Document::istest() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.IsTest)
  return istest_;
}
inline void Document::set_istest(bool value) {
  set_has_istest();
  istest_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.IsTest)
}

// optional string FromDepartmentId = 27;
inline bool Document::has_fromdepartmentid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Document::set_has_fromdepartmentid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Document::clear_has_fromdepartmentid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Document::clear_fromdepartmentid() {
  if (fromdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromdepartmentid_->clear();
  }
  clear_has_fromdepartmentid();
}
inline const ::std::string& Document::fromdepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.FromDepartmentId)
  return *fromdepartmentid_;
}
inline void Document::set_fromdepartmentid(const ::std::string& value) {
  set_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromdepartmentid_ = new ::std::string;
  }
  fromdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.FromDepartmentId)
}
inline void Document::set_fromdepartmentid(const char* value) {
  set_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromdepartmentid_ = new ::std::string;
  }
  fromdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.FromDepartmentId)
}
inline void Document::set_fromdepartmentid(const char* value, size_t size) {
  set_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromdepartmentid_ = new ::std::string;
  }
  fromdepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.FromDepartmentId)
}
inline ::std::string* Document::mutable_fromdepartmentid() {
  set_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromdepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.FromDepartmentId)
  return fromdepartmentid_;
}
inline ::std::string* Document::release_fromdepartmentid() {
  clear_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fromdepartmentid_;
    fromdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_fromdepartmentid(::std::string* fromdepartmentid) {
  if (fromdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromdepartmentid_;
  }
  if (fromdepartmentid) {
    set_has_fromdepartmentid();
    fromdepartmentid_ = fromdepartmentid;
  } else {
    clear_has_fromdepartmentid();
    fromdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.FromDepartmentId)
}

// optional string ToDepartmentId = 28;
inline bool Document::has_todepartmentid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Document::set_has_todepartmentid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Document::clear_has_todepartmentid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Document::clear_todepartmentid() {
  if (todepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_->clear();
  }
  clear_has_todepartmentid();
}
inline const ::std::string& Document::todepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.ToDepartmentId)
  return *todepartmentid_;
}
inline void Document::set_todepartmentid(const ::std::string& value) {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_ = new ::std::string;
  }
  todepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.ToDepartmentId)
}
inline void Document::set_todepartmentid(const char* value) {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_ = new ::std::string;
  }
  todepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.ToDepartmentId)
}
inline void Document::set_todepartmentid(const char* value, size_t size) {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_ = new ::std::string;
  }
  todepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.ToDepartmentId)
}
inline ::std::string* Document::mutable_todepartmentid() {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.ToDepartmentId)
  return todepartmentid_;
}
inline ::std::string* Document::release_todepartmentid() {
  clear_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = todepartmentid_;
    todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_todepartmentid(::std::string* todepartmentid) {
  if (todepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete todepartmentid_;
  }
  if (todepartmentid) {
    set_has_todepartmentid();
    todepartmentid_ = todepartmentid;
  } else {
    clear_has_todepartmentid();
    todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.ToDepartmentId)
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.PriceListMetadata PriceListMetadata = 29;
inline bool Document::has_pricelistmetadata() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Document::set_has_pricelistmetadata() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Document::clear_has_pricelistmetadata() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Document::clear_pricelistmetadata() {
  if (pricelistmetadata_ != NULL) pricelistmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata::Clear();
  clear_has_pricelistmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata& Document::pricelistmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.PriceListMetadata)
  return pricelistmetadata_ != NULL ? *pricelistmetadata_ : *default_instance_->pricelistmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* Document::mutable_pricelistmetadata() {
  set_has_pricelistmetadata();
  if (pricelistmetadata_ == NULL) pricelistmetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.PriceListMetadata)
  return pricelistmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* Document::release_pricelistmetadata() {
  clear_has_pricelistmetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* temp = pricelistmetadata_;
  pricelistmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_pricelistmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::PriceListMetadata* pricelistmetadata) {
  delete pricelistmetadata_;
  pricelistmetadata_ = pricelistmetadata;
  if (pricelistmetadata) {
    set_has_pricelistmetadata();
  } else {
    clear_has_pricelistmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.PriceListMetadata)
}

// optional string CustomDocumentId = 30;
inline bool Document::has_customdocumentid() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Document::set_has_customdocumentid() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Document::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Document::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& Document::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.CustomDocumentId)
  return *customdocumentid_;
}
inline void Document::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.CustomDocumentId)
}
inline void Document::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.CustomDocumentId)
}
inline void Document::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.CustomDocumentId)
}
inline ::std::string* Document::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* Document::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.CustomDocumentId)
}

// optional .Diadoc.Api.Proto.Documents.ResolutionStatus ResolutionStatus = 31;
inline bool Document::has_resolutionstatus() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Document::set_has_resolutionstatus() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Document::clear_has_resolutionstatus() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Document::clear_resolutionstatus() {
  if (resolutionstatus_ != NULL) resolutionstatus_->::Diadoc::Api::Proto::Documents::ResolutionStatus::Clear();
  clear_has_resolutionstatus();
}
inline const ::Diadoc::Api::Proto::Documents::ResolutionStatus& Document::resolutionstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.ResolutionStatus)
  return resolutionstatus_ != NULL ? *resolutionstatus_ : *default_instance_->resolutionstatus_;
}
inline ::Diadoc::Api::Proto::Documents::ResolutionStatus* Document::mutable_resolutionstatus() {
  set_has_resolutionstatus();
  if (resolutionstatus_ == NULL) resolutionstatus_ = new ::Diadoc::Api::Proto::Documents::ResolutionStatus;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.ResolutionStatus)
  return resolutionstatus_;
}
inline ::Diadoc::Api::Proto::Documents::ResolutionStatus* Document::release_resolutionstatus() {
  clear_has_resolutionstatus();
  ::Diadoc::Api::Proto::Documents::ResolutionStatus* temp = resolutionstatus_;
  resolutionstatus_ = NULL;
  return temp;
}
inline void Document::set_allocated_resolutionstatus(::Diadoc::Api::Proto::Documents::ResolutionStatus* resolutionstatus) {
  delete resolutionstatus_;
  resolutionstatus_ = resolutionstatus;
  if (resolutionstatus) {
    set_has_resolutionstatus();
  } else {
    clear_has_resolutionstatus();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.ResolutionStatus)
}

// optional .Diadoc.Api.Proto.Documents.RevocationStatus RevocationStatus = 32 [default = UnknownRevocationStatus];
inline bool Document::has_revocationstatus() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Document::set_has_revocationstatus() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Document::clear_has_revocationstatus() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Document::clear_revocationstatus() {
  revocationstatus_ = 0;
  clear_has_revocationstatus();
}
inline ::Diadoc::Api::Proto::Documents::RevocationStatus Document::revocationstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.RevocationStatus)
  return static_cast< ::Diadoc::Api::Proto::Documents::RevocationStatus >(revocationstatus_);
}
inline void Document::set_revocationstatus(::Diadoc::Api::Proto::Documents::RevocationStatus value) {
  assert(::Diadoc::Api::Proto::Documents::RevocationStatus_IsValid(value));
  set_has_revocationstatus();
  revocationstatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.RevocationStatus)
}

// optional sfixed64 SendTimestampTicks = 33;
inline bool Document::has_sendtimestampticks() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Document::set_has_sendtimestampticks() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Document::clear_has_sendtimestampticks() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Document::clear_sendtimestampticks() {
  sendtimestampticks_ = GOOGLE_LONGLONG(0);
  clear_has_sendtimestampticks();
}
inline ::google::protobuf::int64 Document::sendtimestampticks() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.SendTimestampTicks)
  return sendtimestampticks_;
}
inline void Document::set_sendtimestampticks(::google::protobuf::int64 value) {
  set_has_sendtimestampticks();
  sendtimestampticks_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.SendTimestampTicks)
}

// optional sfixed64 DeliveryTimestampTicks = 34;
inline bool Document::has_deliverytimestampticks() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Document::set_has_deliverytimestampticks() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Document::clear_has_deliverytimestampticks() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Document::clear_deliverytimestampticks() {
  deliverytimestampticks_ = GOOGLE_LONGLONG(0);
  clear_has_deliverytimestampticks();
}
inline ::google::protobuf::int64 Document::deliverytimestampticks() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.DeliveryTimestampTicks)
  return deliverytimestampticks_;
}
inline void Document::set_deliverytimestampticks(::google::protobuf::int64 value) {
  set_has_deliverytimestampticks();
  deliverytimestampticks_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.DeliveryTimestampTicks)
}

// repeated .Diadoc.Api.Proto.ForwardDocumentEvent ForwardDocumentEvents = 35;
inline int Document::forwarddocumentevents_size() const {
  return forwarddocumentevents_.size();
}
inline void Document::clear_forwarddocumentevents() {
  forwarddocumentevents_.Clear();
}
inline const ::Diadoc::Api::Proto::ForwardDocumentEvent& Document::forwarddocumentevents(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.ForwardDocumentEvents)
  return forwarddocumentevents_.Get(index);
}
inline ::Diadoc::Api::Proto::ForwardDocumentEvent* Document::mutable_forwarddocumentevents(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.ForwardDocumentEvents)
  return forwarddocumentevents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::ForwardDocumentEvent* Document::add_forwarddocumentevents() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Document.ForwardDocumentEvents)
  return forwarddocumentevents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >&
Document::forwarddocumentevents() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Document.ForwardDocumentEvents)
  return forwarddocumentevents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::ForwardDocumentEvent >*
Document::mutable_forwarddocumentevents() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Document.ForwardDocumentEvents)
  return &forwarddocumentevents_;
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BilateralDocumentMetadata ReconciliationActMetadata = 38;
inline bool Document::has_reconciliationactmetadata() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Document::set_has_reconciliationactmetadata() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Document::clear_has_reconciliationactmetadata() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Document::clear_reconciliationactmetadata() {
  if (reconciliationactmetadata_ != NULL) reconciliationactmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata::Clear();
  clear_has_reconciliationactmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata& Document::reconciliationactmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.ReconciliationActMetadata)
  return reconciliationactmetadata_ != NULL ? *reconciliationactmetadata_ : *default_instance_->reconciliationactmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* Document::mutable_reconciliationactmetadata() {
  set_has_reconciliationactmetadata();
  if (reconciliationactmetadata_ == NULL) reconciliationactmetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.ReconciliationActMetadata)
  return reconciliationactmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* Document::release_reconciliationactmetadata() {
  clear_has_reconciliationactmetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* temp = reconciliationactmetadata_;
  reconciliationactmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_reconciliationactmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BilateralDocumentMetadata* reconciliationactmetadata) {
  delete reconciliationactmetadata_;
  reconciliationactmetadata_ = reconciliationactmetadata;
  if (reconciliationactmetadata) {
    set_has_reconciliationactmetadata();
  } else {
    clear_has_reconciliationactmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.ReconciliationActMetadata)
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.ContractMetadata ContractMetadata = 39;
inline bool Document::has_contractmetadata() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Document::set_has_contractmetadata() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Document::clear_has_contractmetadata() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Document::clear_contractmetadata() {
  if (contractmetadata_ != NULL) contractmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata::Clear();
  clear_has_contractmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata& Document::contractmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.ContractMetadata)
  return contractmetadata_ != NULL ? *contractmetadata_ : *default_instance_->contractmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* Document::mutable_contractmetadata() {
  set_has_contractmetadata();
  if (contractmetadata_ == NULL) contractmetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.ContractMetadata)
  return contractmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* Document::release_contractmetadata() {
  clear_has_contractmetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* temp = contractmetadata_;
  contractmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_contractmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::ContractMetadata* contractmetadata) {
  delete contractmetadata_;
  contractmetadata_ = contractmetadata;
  if (contractmetadata) {
    set_has_contractmetadata();
  } else {
    clear_has_contractmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.ContractMetadata)
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.BasicDocumentMetadata Torg13Metadata = 40;
inline bool Document::has_torg13metadata() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Document::set_has_torg13metadata() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Document::clear_has_torg13metadata() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Document::clear_torg13metadata() {
  if (torg13metadata_ != NULL) torg13metadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata::Clear();
  clear_has_torg13metadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata& Document::torg13metadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.Torg13Metadata)
  return torg13metadata_ != NULL ? *torg13metadata_ : *default_instance_->torg13metadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::mutable_torg13metadata() {
  set_has_torg13metadata();
  if (torg13metadata_ == NULL) torg13metadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.Torg13Metadata)
  return torg13metadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* Document::release_torg13metadata() {
  clear_has_torg13metadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* temp = torg13metadata_;
  torg13metadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_torg13metadata(::Diadoc::Api::Proto::Documents::BilateralDocument::BasicDocumentMetadata* torg13metadata) {
  delete torg13metadata_;
  torg13metadata_ = torg13metadata;
  if (torg13metadata) {
    set_has_torg13metadata();
  } else {
    clear_has_torg13metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.Torg13Metadata)
}

// optional .Diadoc.Api.Proto.Documents.UnilateralDocument.ServiceDetailsMetadata ServiceDetailsMetadata = 41;
inline bool Document::has_servicedetailsmetadata() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Document::set_has_servicedetailsmetadata() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Document::clear_has_servicedetailsmetadata() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Document::clear_servicedetailsmetadata() {
  if (servicedetailsmetadata_ != NULL) servicedetailsmetadata_->::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata::Clear();
  clear_has_servicedetailsmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata& Document::servicedetailsmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.ServiceDetailsMetadata)
  return servicedetailsmetadata_ != NULL ? *servicedetailsmetadata_ : *default_instance_->servicedetailsmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* Document::mutable_servicedetailsmetadata() {
  set_has_servicedetailsmetadata();
  if (servicedetailsmetadata_ == NULL) servicedetailsmetadata_ = new ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.ServiceDetailsMetadata)
  return servicedetailsmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* Document::release_servicedetailsmetadata() {
  clear_has_servicedetailsmetadata();
  ::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* temp = servicedetailsmetadata_;
  servicedetailsmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_servicedetailsmetadata(::Diadoc::Api::Proto::Documents::UnilateralDocument::ServiceDetailsMetadata* servicedetailsmetadata) {
  delete servicedetailsmetadata_;
  servicedetailsmetadata_ = servicedetailsmetadata;
  if (servicedetailsmetadata) {
    set_has_servicedetailsmetadata();
  } else {
    clear_has_servicedetailsmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.ServiceDetailsMetadata)
}

// optional .Diadoc.Api.Proto.Documents.RoamingNotificationStatus RoamingNotificationStatus = 42 [default = UnknownRoamingNotificationStatus];
inline bool Document::has_roamingnotificationstatus() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Document::set_has_roamingnotificationstatus() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Document::clear_has_roamingnotificationstatus() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Document::clear_roamingnotificationstatus() {
  roamingnotificationstatus_ = 0;
  clear_has_roamingnotificationstatus();
}
inline ::Diadoc::Api::Proto::Documents::RoamingNotificationStatus Document::roamingnotificationstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.RoamingNotificationStatus)
  return static_cast< ::Diadoc::Api::Proto::Documents::RoamingNotificationStatus >(roamingnotificationstatus_);
}
inline void Document::set_roamingnotificationstatus(::Diadoc::Api::Proto::Documents::RoamingNotificationStatus value) {
  assert(::Diadoc::Api::Proto::Documents::RoamingNotificationStatus_IsValid(value));
  set_has_roamingnotificationstatus();
  roamingnotificationstatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.RoamingNotificationStatus)
}

// optional bool HasCustomPrintForm = 43 [default = false];
inline bool Document::has_hascustomprintform() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Document::set_has_hascustomprintform() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Document::clear_has_hascustomprintform() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Document::clear_hascustomprintform() {
  hascustomprintform_ = false;
  clear_has_hascustomprintform();
}
inline bool Document::hascustomprintform() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.HasCustomPrintForm)
  return hascustomprintform_;
}
inline void Document::set_hascustomprintform(bool value) {
  set_has_hascustomprintform();
  hascustomprintform_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.HasCustomPrintForm)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 44;
inline int Document::customdata_size() const {
  return customdata_.size();
}
inline void Document::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& Document::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* Document::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* Document::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Document.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
Document::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Document.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
Document::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Document.CustomData)
  return &customdata_;
}

// optional string PacketId = 45;
inline bool Document::has_packetid() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Document::set_has_packetid() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Document::clear_has_packetid() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Document::clear_packetid() {
  if (packetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_->clear();
  }
  clear_has_packetid();
}
inline const ::std::string& Document::packetid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.PacketId)
  return *packetid_;
}
inline void Document::set_packetid(const ::std::string& value) {
  set_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_ = new ::std::string;
  }
  packetid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.PacketId)
}
inline void Document::set_packetid(const char* value) {
  set_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_ = new ::std::string;
  }
  packetid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.PacketId)
}
inline void Document::set_packetid(const char* value, size_t size) {
  set_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_ = new ::std::string;
  }
  packetid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.PacketId)
}
inline ::std::string* Document::mutable_packetid() {
  set_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packetid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.PacketId)
  return packetid_;
}
inline ::std::string* Document::release_packetid() {
  clear_has_packetid();
  if (packetid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = packetid_;
    packetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_packetid(::std::string* packetid) {
  if (packetid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packetid_;
  }
  if (packetid) {
    set_has_packetid();
    packetid_ = packetid;
  } else {
    clear_has_packetid();
    packetid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.PacketId)
}

// optional .Diadoc.Api.Proto.DocumentDirection DocumentDirection = 46 [default = UnknownDocumentDirection];
inline bool Document::has_documentdirection() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Document::set_has_documentdirection() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Document::clear_has_documentdirection() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Document::clear_documentdirection() {
  documentdirection_ = 0;
  clear_has_documentdirection();
}
inline ::Diadoc::Api::Proto::DocumentDirection Document::documentdirection() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.DocumentDirection)
  return static_cast< ::Diadoc::Api::Proto::DocumentDirection >(documentdirection_);
}
inline void Document::set_documentdirection(::Diadoc::Api::Proto::DocumentDirection value) {
  assert(::Diadoc::Api::Proto::DocumentDirection_IsValid(value));
  set_has_documentdirection();
  documentdirection_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.DocumentDirection)
}

// optional sfixed64 LastModificationTimestampTicks = 47;
inline bool Document::has_lastmodificationtimestampticks() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Document::set_has_lastmodificationtimestampticks() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Document::clear_has_lastmodificationtimestampticks() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Document::clear_lastmodificationtimestampticks() {
  lastmodificationtimestampticks_ = GOOGLE_LONGLONG(0);
  clear_has_lastmodificationtimestampticks();
}
inline ::google::protobuf::int64 Document::lastmodificationtimestampticks() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.LastModificationTimestampTicks)
  return lastmodificationtimestampticks_;
}
inline void Document::set_lastmodificationtimestampticks(::google::protobuf::int64 value) {
  set_has_lastmodificationtimestampticks();
  lastmodificationtimestampticks_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.LastModificationTimestampTicks)
}

// optional bool IsEncryptedContent = 48;
inline bool Document::has_isencryptedcontent() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Document::set_has_isencryptedcontent() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Document::clear_has_isencryptedcontent() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Document::clear_isencryptedcontent() {
  isencryptedcontent_ = false;
  clear_has_isencryptedcontent();
}
inline bool Document::isencryptedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.IsEncryptedContent)
  return isencryptedcontent_;
}
inline void Document::set_isencryptedcontent(bool value) {
  set_has_isencryptedcontent();
  isencryptedcontent_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.IsEncryptedContent)
}

// optional .Diadoc.Api.Proto.Documents.SenderSignatureStatus SenderSignatureStatus = 49 [default = UnknownSenderSignatureStatus];
inline bool Document::has_sendersignaturestatus() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Document::set_has_sendersignaturestatus() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Document::clear_has_sendersignaturestatus() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Document::clear_sendersignaturestatus() {
  sendersignaturestatus_ = 0;
  clear_has_sendersignaturestatus();
}
inline ::Diadoc::Api::Proto::Documents::SenderSignatureStatus Document::sendersignaturestatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.SenderSignatureStatus)
  return static_cast< ::Diadoc::Api::Proto::Documents::SenderSignatureStatus >(sendersignaturestatus_);
}
inline void Document::set_sendersignaturestatus(::Diadoc::Api::Proto::Documents::SenderSignatureStatus value) {
  assert(::Diadoc::Api::Proto::Documents::SenderSignatureStatus_IsValid(value));
  set_has_sendersignaturestatus();
  sendersignaturestatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.SenderSignatureStatus)
}

// optional .Diadoc.Api.Proto.Documents.BilateralDocument.SupplementaryAgreementMetadata SupplementaryAgreementMetadata = 50;
inline bool Document::has_supplementaryagreementmetadata() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Document::set_has_supplementaryagreementmetadata() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Document::clear_has_supplementaryagreementmetadata() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Document::clear_supplementaryagreementmetadata() {
  if (supplementaryagreementmetadata_ != NULL) supplementaryagreementmetadata_->::Diadoc::Api::Proto::Documents::BilateralDocument::SupplementaryAgreementMetadata::Clear();
  clear_has_supplementaryagreementmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::BilateralDocument::SupplementaryAgreementMetadata& Document::supplementaryagreementmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.SupplementaryAgreementMetadata)
  return supplementaryagreementmetadata_ != NULL ? *supplementaryagreementmetadata_ : *default_instance_->supplementaryagreementmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::SupplementaryAgreementMetadata* Document::mutable_supplementaryagreementmetadata() {
  set_has_supplementaryagreementmetadata();
  if (supplementaryagreementmetadata_ == NULL) supplementaryagreementmetadata_ = new ::Diadoc::Api::Proto::Documents::BilateralDocument::SupplementaryAgreementMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.SupplementaryAgreementMetadata)
  return supplementaryagreementmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::BilateralDocument::SupplementaryAgreementMetadata* Document::release_supplementaryagreementmetadata() {
  clear_has_supplementaryagreementmetadata();
  ::Diadoc::Api::Proto::Documents::BilateralDocument::SupplementaryAgreementMetadata* temp = supplementaryagreementmetadata_;
  supplementaryagreementmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_supplementaryagreementmetadata(::Diadoc::Api::Proto::Documents::BilateralDocument::SupplementaryAgreementMetadata* supplementaryagreementmetadata) {
  delete supplementaryagreementmetadata_;
  supplementaryagreementmetadata_ = supplementaryagreementmetadata;
  if (supplementaryagreementmetadata) {
    set_has_supplementaryagreementmetadata();
  } else {
    clear_has_supplementaryagreementmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.SupplementaryAgreementMetadata)
}

// optional bool IsRead = 51 [default = false];
inline bool Document::has_isread() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Document::set_has_isread() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Document::clear_has_isread() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Document::clear_isread() {
  isread_ = false;
  clear_has_isread();
}
inline bool Document::isread() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.IsRead)
  return isread_;
}
inline void Document::set_isread(bool value) {
  set_has_isread();
  isread_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.IsRead)
}

// optional string RoamingNotificationStatusDescription = 52;
inline bool Document::has_roamingnotificationstatusdescription() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Document::set_has_roamingnotificationstatusdescription() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Document::clear_has_roamingnotificationstatusdescription() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Document::clear_roamingnotificationstatusdescription() {
  if (roamingnotificationstatusdescription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roamingnotificationstatusdescription_->clear();
  }
  clear_has_roamingnotificationstatusdescription();
}
inline const ::std::string& Document::roamingnotificationstatusdescription() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.RoamingNotificationStatusDescription)
  return *roamingnotificationstatusdescription_;
}
inline void Document::set_roamingnotificationstatusdescription(const ::std::string& value) {
  set_has_roamingnotificationstatusdescription();
  if (roamingnotificationstatusdescription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roamingnotificationstatusdescription_ = new ::std::string;
  }
  roamingnotificationstatusdescription_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.RoamingNotificationStatusDescription)
}
inline void Document::set_roamingnotificationstatusdescription(const char* value) {
  set_has_roamingnotificationstatusdescription();
  if (roamingnotificationstatusdescription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roamingnotificationstatusdescription_ = new ::std::string;
  }
  roamingnotificationstatusdescription_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.RoamingNotificationStatusDescription)
}
inline void Document::set_roamingnotificationstatusdescription(const char* value, size_t size) {
  set_has_roamingnotificationstatusdescription();
  if (roamingnotificationstatusdescription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roamingnotificationstatusdescription_ = new ::std::string;
  }
  roamingnotificationstatusdescription_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.RoamingNotificationStatusDescription)
}
inline ::std::string* Document::mutable_roamingnotificationstatusdescription() {
  set_has_roamingnotificationstatusdescription();
  if (roamingnotificationstatusdescription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roamingnotificationstatusdescription_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.RoamingNotificationStatusDescription)
  return roamingnotificationstatusdescription_;
}
inline ::std::string* Document::release_roamingnotificationstatusdescription() {
  clear_has_roamingnotificationstatusdescription();
  if (roamingnotificationstatusdescription_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roamingnotificationstatusdescription_;
    roamingnotificationstatusdescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_roamingnotificationstatusdescription(::std::string* roamingnotificationstatusdescription) {
  if (roamingnotificationstatusdescription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roamingnotificationstatusdescription_;
  }
  if (roamingnotificationstatusdescription) {
    set_has_roamingnotificationstatusdescription();
    roamingnotificationstatusdescription_ = roamingnotificationstatusdescription;
  } else {
    clear_has_roamingnotificationstatusdescription();
    roamingnotificationstatusdescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.RoamingNotificationStatusDescription)
}

// optional bool PacketIsLocked = 53 [default = false];
inline bool Document::has_packetislocked() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Document::set_has_packetislocked() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Document::clear_has_packetislocked() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Document::clear_packetislocked() {
  packetislocked_ = false;
  clear_has_packetislocked();
}
inline bool Document::packetislocked() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.PacketIsLocked)
  return packetislocked_;
}
inline void Document::set_packetislocked(bool value) {
  set_has_packetislocked();
  packetislocked_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.PacketIsLocked)
}

// optional .Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata PriceListAgreementMetadata = 54;
inline bool Document::has_pricelistagreementmetadata() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Document::set_has_pricelistagreementmetadata() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Document::clear_has_pricelistagreementmetadata() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Document::clear_pricelistagreementmetadata() {
  if (pricelistagreementmetadata_ != NULL) pricelistagreementmetadata_->::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata::Clear();
  clear_has_pricelistagreementmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata& Document::pricelistagreementmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.PriceListAgreementMetadata)
  return pricelistagreementmetadata_ != NULL ? *pricelistagreementmetadata_ : *default_instance_->pricelistagreementmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* Document::mutable_pricelistagreementmetadata() {
  set_has_pricelistagreementmetadata();
  if (pricelistagreementmetadata_ == NULL) pricelistagreementmetadata_ = new ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.PriceListAgreementMetadata)
  return pricelistagreementmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* Document::release_pricelistagreementmetadata() {
  clear_has_pricelistagreementmetadata();
  ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* temp = pricelistagreementmetadata_;
  pricelistagreementmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_pricelistagreementmetadata(::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* pricelistagreementmetadata) {
  delete pricelistagreementmetadata_;
  pricelistagreementmetadata_ = pricelistagreementmetadata;
  if (pricelistagreementmetadata) {
    set_has_pricelistagreementmetadata();
  } else {
    clear_has_pricelistagreementmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.PriceListAgreementMetadata)
}

// optional .Diadoc.Api.Proto.Documents.NonformalizedDocument.NonformalizedDocumentMetadata CertificateRegistryMetadata = 55;
inline bool Document::has_certificateregistrymetadata() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Document::set_has_certificateregistrymetadata() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Document::clear_has_certificateregistrymetadata() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Document::clear_certificateregistrymetadata() {
  if (certificateregistrymetadata_ != NULL) certificateregistrymetadata_->::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata::Clear();
  clear_has_certificateregistrymetadata();
}
inline const ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata& Document::certificateregistrymetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.CertificateRegistryMetadata)
  return certificateregistrymetadata_ != NULL ? *certificateregistrymetadata_ : *default_instance_->certificateregistrymetadata_;
}
inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* Document::mutable_certificateregistrymetadata() {
  set_has_certificateregistrymetadata();
  if (certificateregistrymetadata_ == NULL) certificateregistrymetadata_ = new ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.CertificateRegistryMetadata)
  return certificateregistrymetadata_;
}
inline ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* Document::release_certificateregistrymetadata() {
  clear_has_certificateregistrymetadata();
  ::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* temp = certificateregistrymetadata_;
  certificateregistrymetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_certificateregistrymetadata(::Diadoc::Api::Proto::Documents::NonformalizedDocument::NonformalizedDocumentMetadata* certificateregistrymetadata) {
  delete certificateregistrymetadata_;
  certificateregistrymetadata_ = certificateregistrymetadata;
  if (certificateregistrymetadata) {
    set_has_certificateregistrymetadata();
  } else {
    clear_has_certificateregistrymetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.CertificateRegistryMetadata)
}

// optional .Diadoc.Api.Proto.Documents.UniversalTransferDocument.UniversalTransferDocumentMetadata UniversalTransferDocumentMetadata = 56;
inline bool Document::has_universaltransferdocumentmetadata() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Document::set_has_universaltransferdocumentmetadata() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Document::clear_has_universaltransferdocumentmetadata() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Document::clear_universaltransferdocumentmetadata() {
  if (universaltransferdocumentmetadata_ != NULL) universaltransferdocumentmetadata_->::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentMetadata::Clear();
  clear_has_universaltransferdocumentmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentMetadata& Document::universaltransferdocumentmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.UniversalTransferDocumentMetadata)
  return universaltransferdocumentmetadata_ != NULL ? *universaltransferdocumentmetadata_ : *default_instance_->universaltransferdocumentmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentMetadata* Document::mutable_universaltransferdocumentmetadata() {
  set_has_universaltransferdocumentmetadata();
  if (universaltransferdocumentmetadata_ == NULL) universaltransferdocumentmetadata_ = new ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.UniversalTransferDocumentMetadata)
  return universaltransferdocumentmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentMetadata* Document::release_universaltransferdocumentmetadata() {
  clear_has_universaltransferdocumentmetadata();
  ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentMetadata* temp = universaltransferdocumentmetadata_;
  universaltransferdocumentmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_universaltransferdocumentmetadata(::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentMetadata* universaltransferdocumentmetadata) {
  delete universaltransferdocumentmetadata_;
  universaltransferdocumentmetadata_ = universaltransferdocumentmetadata;
  if (universaltransferdocumentmetadata) {
    set_has_universaltransferdocumentmetadata();
  } else {
    clear_has_universaltransferdocumentmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.UniversalTransferDocumentMetadata)
}

// optional .Diadoc.Api.Proto.Documents.UniversalTransferDocument.UniversalTransferDocumentRevisionMetadata UniversalTransferDocumentRevisionMetadata = 57;
inline bool Document::has_universaltransferdocumentrevisionmetadata() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Document::set_has_universaltransferdocumentrevisionmetadata() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Document::clear_has_universaltransferdocumentrevisionmetadata() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Document::clear_universaltransferdocumentrevisionmetadata() {
  if (universaltransferdocumentrevisionmetadata_ != NULL) universaltransferdocumentrevisionmetadata_->::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentRevisionMetadata::Clear();
  clear_has_universaltransferdocumentrevisionmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentRevisionMetadata& Document::universaltransferdocumentrevisionmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.UniversalTransferDocumentRevisionMetadata)
  return universaltransferdocumentrevisionmetadata_ != NULL ? *universaltransferdocumentrevisionmetadata_ : *default_instance_->universaltransferdocumentrevisionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentRevisionMetadata* Document::mutable_universaltransferdocumentrevisionmetadata() {
  set_has_universaltransferdocumentrevisionmetadata();
  if (universaltransferdocumentrevisionmetadata_ == NULL) universaltransferdocumentrevisionmetadata_ = new ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentRevisionMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.UniversalTransferDocumentRevisionMetadata)
  return universaltransferdocumentrevisionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentRevisionMetadata* Document::release_universaltransferdocumentrevisionmetadata() {
  clear_has_universaltransferdocumentrevisionmetadata();
  ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentRevisionMetadata* temp = universaltransferdocumentrevisionmetadata_;
  universaltransferdocumentrevisionmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_universaltransferdocumentrevisionmetadata(::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalTransferDocumentRevisionMetadata* universaltransferdocumentrevisionmetadata) {
  delete universaltransferdocumentrevisionmetadata_;
  universaltransferdocumentrevisionmetadata_ = universaltransferdocumentrevisionmetadata;
  if (universaltransferdocumentrevisionmetadata) {
    set_has_universaltransferdocumentrevisionmetadata();
  } else {
    clear_has_universaltransferdocumentrevisionmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.UniversalTransferDocumentRevisionMetadata)
}

// optional .Diadoc.Api.Proto.Documents.UniversalTransferDocument.UniversalCorrectionDocumentMetadata UniversalCorrectionDocumentMetadata = 58;
inline bool Document::has_universalcorrectiondocumentmetadata() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Document::set_has_universalcorrectiondocumentmetadata() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Document::clear_has_universalcorrectiondocumentmetadata() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Document::clear_universalcorrectiondocumentmetadata() {
  if (universalcorrectiondocumentmetadata_ != NULL) universalcorrectiondocumentmetadata_->::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentMetadata::Clear();
  clear_has_universalcorrectiondocumentmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentMetadata& Document::universalcorrectiondocumentmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.UniversalCorrectionDocumentMetadata)
  return universalcorrectiondocumentmetadata_ != NULL ? *universalcorrectiondocumentmetadata_ : *default_instance_->universalcorrectiondocumentmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentMetadata* Document::mutable_universalcorrectiondocumentmetadata() {
  set_has_universalcorrectiondocumentmetadata();
  if (universalcorrectiondocumentmetadata_ == NULL) universalcorrectiondocumentmetadata_ = new ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.UniversalCorrectionDocumentMetadata)
  return universalcorrectiondocumentmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentMetadata* Document::release_universalcorrectiondocumentmetadata() {
  clear_has_universalcorrectiondocumentmetadata();
  ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentMetadata* temp = universalcorrectiondocumentmetadata_;
  universalcorrectiondocumentmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_universalcorrectiondocumentmetadata(::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentMetadata* universalcorrectiondocumentmetadata) {
  delete universalcorrectiondocumentmetadata_;
  universalcorrectiondocumentmetadata_ = universalcorrectiondocumentmetadata;
  if (universalcorrectiondocumentmetadata) {
    set_has_universalcorrectiondocumentmetadata();
  } else {
    clear_has_universalcorrectiondocumentmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.UniversalCorrectionDocumentMetadata)
}

// optional .Diadoc.Api.Proto.Documents.UniversalTransferDocument.UniversalCorrectionDocumentRevisionMetadata UniversalCorrectionDocumentRevisionMetadata = 59;
inline bool Document::has_universalcorrectiondocumentrevisionmetadata() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Document::set_has_universalcorrectiondocumentrevisionmetadata() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Document::clear_has_universalcorrectiondocumentrevisionmetadata() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Document::clear_universalcorrectiondocumentrevisionmetadata() {
  if (universalcorrectiondocumentrevisionmetadata_ != NULL) universalcorrectiondocumentrevisionmetadata_->::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentRevisionMetadata::Clear();
  clear_has_universalcorrectiondocumentrevisionmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentRevisionMetadata& Document::universalcorrectiondocumentrevisionmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.UniversalCorrectionDocumentRevisionMetadata)
  return universalcorrectiondocumentrevisionmetadata_ != NULL ? *universalcorrectiondocumentrevisionmetadata_ : *default_instance_->universalcorrectiondocumentrevisionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentRevisionMetadata* Document::mutable_universalcorrectiondocumentrevisionmetadata() {
  set_has_universalcorrectiondocumentrevisionmetadata();
  if (universalcorrectiondocumentrevisionmetadata_ == NULL) universalcorrectiondocumentrevisionmetadata_ = new ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentRevisionMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.UniversalCorrectionDocumentRevisionMetadata)
  return universalcorrectiondocumentrevisionmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentRevisionMetadata* Document::release_universalcorrectiondocumentrevisionmetadata() {
  clear_has_universalcorrectiondocumentrevisionmetadata();
  ::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentRevisionMetadata* temp = universalcorrectiondocumentrevisionmetadata_;
  universalcorrectiondocumentrevisionmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_universalcorrectiondocumentrevisionmetadata(::Diadoc::Api::Proto::Documents::UniversalTransferDocument::UniversalCorrectionDocumentRevisionMetadata* universalcorrectiondocumentrevisionmetadata) {
  delete universalcorrectiondocumentrevisionmetadata_;
  universalcorrectiondocumentrevisionmetadata_ = universalcorrectiondocumentrevisionmetadata;
  if (universalcorrectiondocumentrevisionmetadata) {
    set_has_universalcorrectiondocumentrevisionmetadata();
  } else {
    clear_has_universalcorrectiondocumentrevisionmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.UniversalCorrectionDocumentRevisionMetadata)
}

// optional string ResolutionRouteId = 60 [default = ""];
inline bool Document::has_resolutionrouteid() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Document::set_has_resolutionrouteid() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Document::clear_has_resolutionrouteid() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Document::clear_resolutionrouteid() {
  if (resolutionrouteid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrouteid_->clear();
  }
  clear_has_resolutionrouteid();
}
inline const ::std::string& Document::resolutionrouteid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.ResolutionRouteId)
  return *resolutionrouteid_;
}
inline void Document::set_resolutionrouteid(const ::std::string& value) {
  set_has_resolutionrouteid();
  if (resolutionrouteid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrouteid_ = new ::std::string;
  }
  resolutionrouteid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.ResolutionRouteId)
}
inline void Document::set_resolutionrouteid(const char* value) {
  set_has_resolutionrouteid();
  if (resolutionrouteid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrouteid_ = new ::std::string;
  }
  resolutionrouteid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.ResolutionRouteId)
}
inline void Document::set_resolutionrouteid(const char* value, size_t size) {
  set_has_resolutionrouteid();
  if (resolutionrouteid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrouteid_ = new ::std::string;
  }
  resolutionrouteid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.ResolutionRouteId)
}
inline ::std::string* Document::mutable_resolutionrouteid() {
  set_has_resolutionrouteid();
  if (resolutionrouteid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resolutionrouteid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.ResolutionRouteId)
  return resolutionrouteid_;
}
inline ::std::string* Document::release_resolutionrouteid() {
  clear_has_resolutionrouteid();
  if (resolutionrouteid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resolutionrouteid_;
    resolutionrouteid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_resolutionrouteid(::std::string* resolutionrouteid) {
  if (resolutionrouteid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resolutionrouteid_;
  }
  if (resolutionrouteid) {
    set_has_resolutionrouteid();
    resolutionrouteid_ = resolutionrouteid;
  } else {
    clear_has_resolutionrouteid();
    resolutionrouteid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.ResolutionRouteId)
}

// optional string AttachmentVersion = 61;
inline bool Document::has_attachmentversion() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Document::set_has_attachmentversion() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Document::clear_has_attachmentversion() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Document::clear_attachmentversion() {
  if (attachmentversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attachmentversion_->clear();
  }
  clear_has_attachmentversion();
}
inline const ::std::string& Document::attachmentversion() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.AttachmentVersion)
  return *attachmentversion_;
}
inline void Document::set_attachmentversion(const ::std::string& value) {
  set_has_attachmentversion();
  if (attachmentversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attachmentversion_ = new ::std::string;
  }
  attachmentversion_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.AttachmentVersion)
}
inline void Document::set_attachmentversion(const char* value) {
  set_has_attachmentversion();
  if (attachmentversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attachmentversion_ = new ::std::string;
  }
  attachmentversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.AttachmentVersion)
}
inline void Document::set_attachmentversion(const char* value, size_t size) {
  set_has_attachmentversion();
  if (attachmentversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attachmentversion_ = new ::std::string;
  }
  attachmentversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.AttachmentVersion)
}
inline ::std::string* Document::mutable_attachmentversion() {
  set_has_attachmentversion();
  if (attachmentversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attachmentversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.AttachmentVersion)
  return attachmentversion_;
}
inline ::std::string* Document::release_attachmentversion() {
  clear_has_attachmentversion();
  if (attachmentversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attachmentversion_;
    attachmentversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_attachmentversion(::std::string* attachmentversion) {
  if (attachmentversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attachmentversion_;
  }
  if (attachmentversion) {
    set_has_attachmentversion();
    attachmentversion_ = attachmentversion;
  } else {
    clear_has_attachmentversion();
    attachmentversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.AttachmentVersion)
}

// optional .Diadoc.Api.Proto.Documents.ProxySignatureStatus ProxySignatureStatus = 62 [default = UnknownProxySignatureStatus];
inline bool Document::has_proxysignaturestatus() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Document::set_has_proxysignaturestatus() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Document::clear_has_proxysignaturestatus() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Document::clear_proxysignaturestatus() {
  proxysignaturestatus_ = 0;
  clear_has_proxysignaturestatus();
}
inline ::Diadoc::Api::Proto::Documents::ProxySignatureStatus Document::proxysignaturestatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.ProxySignatureStatus)
  return static_cast< ::Diadoc::Api::Proto::Documents::ProxySignatureStatus >(proxysignaturestatus_);
}
inline void Document::set_proxysignaturestatus(::Diadoc::Api::Proto::Documents::ProxySignatureStatus value) {
  assert(::Diadoc::Api::Proto::Documents::ProxySignatureStatus_IsValid(value));
  set_has_proxysignaturestatus();
  proxysignaturestatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.ProxySignatureStatus)
}

// required string TypeNamedId = 63;
inline bool Document::has_typenamedid() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Document::set_has_typenamedid() {
  _has_bits_[1] |= 0x10000000u;
}
inline void Document::clear_has_typenamedid() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void Document::clear_typenamedid() {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_->clear();
  }
  clear_has_typenamedid();
}
inline const ::std::string& Document::typenamedid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.TypeNamedId)
  return *typenamedid_;
}
inline void Document::set_typenamedid(const ::std::string& value) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.TypeNamedId)
}
inline void Document::set_typenamedid(const char* value) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.TypeNamedId)
}
inline void Document::set_typenamedid(const char* value, size_t size) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.TypeNamedId)
}
inline ::std::string* Document::mutable_typenamedid() {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.TypeNamedId)
  return typenamedid_;
}
inline ::std::string* Document::release_typenamedid() {
  clear_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = typenamedid_;
    typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_typenamedid(::std::string* typenamedid) {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typenamedid_;
  }
  if (typenamedid) {
    set_has_typenamedid();
    typenamedid_ = typenamedid;
  } else {
    clear_has_typenamedid();
    typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.TypeNamedId)
}

// required string Function = 64;
inline bool Document::has_function() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Document::set_has_function() {
  _has_bits_[1] |= 0x20000000u;
}
inline void Document::clear_has_function() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void Document::clear_function() {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_->clear();
  }
  clear_has_function();
}
inline const ::std::string& Document::function() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.Function)
  return *function_;
}
inline void Document::set_function(const ::std::string& value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.Function)
}
inline void Document::set_function(const char* value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.Function)
}
inline void Document::set_function(const char* value, size_t size) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.Function)
}
inline ::std::string* Document::mutable_function() {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.Function)
  return function_;
}
inline ::std::string* Document::release_function() {
  clear_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = function_;
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_function(::std::string* function) {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (function) {
    set_has_function();
    function_ = function;
  } else {
    clear_has_function();
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.Function)
}

// required int32 WorkflowId = 65;
inline bool Document::has_workflowid() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void Document::set_has_workflowid() {
  _has_bits_[1] |= 0x40000000u;
}
inline void Document::clear_has_workflowid() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void Document::clear_workflowid() {
  workflowid_ = 0;
  clear_has_workflowid();
}
inline ::google::protobuf::int32 Document::workflowid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.WorkflowId)
  return workflowid_;
}
inline void Document::set_workflowid(::google::protobuf::int32 value) {
  set_has_workflowid();
  workflowid_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.WorkflowId)
}

// required string Title = 66;
inline bool Document::has_title() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void Document::set_has_title() {
  _has_bits_[1] |= 0x80000000u;
}
inline void Document::clear_has_title() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void Document::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Document::title() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.Title)
  return *title_;
}
inline void Document::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.Title)
}
inline void Document::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Document.Title)
}
inline void Document::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Document.Title)
}
inline ::std::string* Document::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.Title)
  return title_;
}
inline ::std::string* Document::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.Title)
}

// repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 67;
inline int Document::metadata_size() const {
  return metadata_.size();
}
inline void Document::clear_metadata() {
  metadata_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::MetadataItem& Document::metadata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.Metadata)
  return metadata_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::MetadataItem* Document::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.Metadata)
  return metadata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::MetadataItem* Document::add_metadata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Documents.Document.Metadata)
  return metadata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >&
Document::metadata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Documents.Document.Metadata)
  return metadata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >*
Document::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Documents.Document.Metadata)
  return &metadata_;
}

// required .Diadoc.Api.Proto.Documents.RecipientReceiptMetadata RecipientReceiptMetadata = 68;
inline bool Document::has_recipientreceiptmetadata() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void Document::set_has_recipientreceiptmetadata() {
  _has_bits_[2] |= 0x00000002u;
}
inline void Document::clear_has_recipientreceiptmetadata() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void Document::clear_recipientreceiptmetadata() {
  if (recipientreceiptmetadata_ != NULL) recipientreceiptmetadata_->::Diadoc::Api::Proto::Documents::RecipientReceiptMetadata::Clear();
  clear_has_recipientreceiptmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::RecipientReceiptMetadata& Document::recipientreceiptmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.RecipientReceiptMetadata)
  return recipientreceiptmetadata_ != NULL ? *recipientreceiptmetadata_ : *default_instance_->recipientreceiptmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::RecipientReceiptMetadata* Document::mutable_recipientreceiptmetadata() {
  set_has_recipientreceiptmetadata();
  if (recipientreceiptmetadata_ == NULL) recipientreceiptmetadata_ = new ::Diadoc::Api::Proto::Documents::RecipientReceiptMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.RecipientReceiptMetadata)
  return recipientreceiptmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::RecipientReceiptMetadata* Document::release_recipientreceiptmetadata() {
  clear_has_recipientreceiptmetadata();
  ::Diadoc::Api::Proto::Documents::RecipientReceiptMetadata* temp = recipientreceiptmetadata_;
  recipientreceiptmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_recipientreceiptmetadata(::Diadoc::Api::Proto::Documents::RecipientReceiptMetadata* recipientreceiptmetadata) {
  delete recipientreceiptmetadata_;
  recipientreceiptmetadata_ = recipientreceiptmetadata;
  if (recipientreceiptmetadata) {
    set_has_recipientreceiptmetadata();
  } else {
    clear_has_recipientreceiptmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.RecipientReceiptMetadata)
}

// required .Diadoc.Api.Proto.Documents.ConfirmationMetadata ConfirmationMetadata = 69;
inline bool Document::has_confirmationmetadata() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void Document::set_has_confirmationmetadata() {
  _has_bits_[2] |= 0x00000004u;
}
inline void Document::clear_has_confirmationmetadata() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void Document::clear_confirmationmetadata() {
  if (confirmationmetadata_ != NULL) confirmationmetadata_->::Diadoc::Api::Proto::Documents::ConfirmationMetadata::Clear();
  clear_has_confirmationmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::ConfirmationMetadata& Document::confirmationmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.ConfirmationMetadata)
  return confirmationmetadata_ != NULL ? *confirmationmetadata_ : *default_instance_->confirmationmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::ConfirmationMetadata* Document::mutable_confirmationmetadata() {
  set_has_confirmationmetadata();
  if (confirmationmetadata_ == NULL) confirmationmetadata_ = new ::Diadoc::Api::Proto::Documents::ConfirmationMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.ConfirmationMetadata)
  return confirmationmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::ConfirmationMetadata* Document::release_confirmationmetadata() {
  clear_has_confirmationmetadata();
  ::Diadoc::Api::Proto::Documents::ConfirmationMetadata* temp = confirmationmetadata_;
  confirmationmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_confirmationmetadata(::Diadoc::Api::Proto::Documents::ConfirmationMetadata* confirmationmetadata) {
  delete confirmationmetadata_;
  confirmationmetadata_ = confirmationmetadata;
  if (confirmationmetadata) {
    set_has_confirmationmetadata();
  } else {
    clear_has_confirmationmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.ConfirmationMetadata)
}

// required .Diadoc.Api.Proto.Documents.RecipientResponseStatus RecipientResponseStatus = 70 [default = RecipientResponseStatusUnknown];
inline bool Document::has_recipientresponsestatus() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void Document::set_has_recipientresponsestatus() {
  _has_bits_[2] |= 0x00000008u;
}
inline void Document::clear_has_recipientresponsestatus() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void Document::clear_recipientresponsestatus() {
  recipientresponsestatus_ = 0;
  clear_has_recipientresponsestatus();
}
inline ::Diadoc::Api::Proto::Documents::RecipientResponseStatus Document::recipientresponsestatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.RecipientResponseStatus)
  return static_cast< ::Diadoc::Api::Proto::Documents::RecipientResponseStatus >(recipientresponsestatus_);
}
inline void Document::set_recipientresponsestatus(::Diadoc::Api::Proto::Documents::RecipientResponseStatus value) {
  assert(::Diadoc::Api::Proto::Documents::RecipientResponseStatus_IsValid(value));
  set_has_recipientresponsestatus();
  recipientresponsestatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Document.RecipientResponseStatus)
}

// required .Diadoc.Api.Proto.Documents.AmendmentRequestMetadata AmendmentRequestMetadata = 71;
inline bool Document::has_amendmentrequestmetadata() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void Document::set_has_amendmentrequestmetadata() {
  _has_bits_[2] |= 0x00000010u;
}
inline void Document::clear_has_amendmentrequestmetadata() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void Document::clear_amendmentrequestmetadata() {
  if (amendmentrequestmetadata_ != NULL) amendmentrequestmetadata_->::Diadoc::Api::Proto::Documents::AmendmentRequestMetadata::Clear();
  clear_has_amendmentrequestmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::AmendmentRequestMetadata& Document::amendmentrequestmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.AmendmentRequestMetadata)
  return amendmentrequestmetadata_ != NULL ? *amendmentrequestmetadata_ : *default_instance_->amendmentrequestmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::AmendmentRequestMetadata* Document::mutable_amendmentrequestmetadata() {
  set_has_amendmentrequestmetadata();
  if (amendmentrequestmetadata_ == NULL) amendmentrequestmetadata_ = new ::Diadoc::Api::Proto::Documents::AmendmentRequestMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.AmendmentRequestMetadata)
  return amendmentrequestmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::AmendmentRequestMetadata* Document::release_amendmentrequestmetadata() {
  clear_has_amendmentrequestmetadata();
  ::Diadoc::Api::Proto::Documents::AmendmentRequestMetadata* temp = amendmentrequestmetadata_;
  amendmentrequestmetadata_ = NULL;
  return temp;
}
inline void Document::set_allocated_amendmentrequestmetadata(::Diadoc::Api::Proto::Documents::AmendmentRequestMetadata* amendmentrequestmetadata) {
  delete amendmentrequestmetadata_;
  amendmentrequestmetadata_ = amendmentrequestmetadata;
  if (amendmentrequestmetadata) {
    set_has_amendmentrequestmetadata();
  } else {
    clear_has_amendmentrequestmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.AmendmentRequestMetadata)
}

// optional .Diadoc.Api.Proto.Documents.Origin Origin = 72;
inline bool Document::has_origin() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void Document::set_has_origin() {
  _has_bits_[2] |= 0x00000020u;
}
inline void Document::clear_has_origin() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void Document::clear_origin() {
  if (origin_ != NULL) origin_->::Diadoc::Api::Proto::Documents::Origin::Clear();
  clear_has_origin();
}
inline const ::Diadoc::Api::Proto::Documents::Origin& Document::origin() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Document.Origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::Diadoc::Api::Proto::Documents::Origin* Document::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::Diadoc::Api::Proto::Documents::Origin;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Document.Origin)
  return origin_;
}
inline ::Diadoc::Api::Proto::Documents::Origin* Document::release_origin() {
  clear_has_origin();
  ::Diadoc::Api::Proto::Documents::Origin* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void Document::set_allocated_origin(::Diadoc::Api::Proto::Documents::Origin* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Document.Origin)
}

// -------------------------------------------------------------------

// ResolutionStatus

// optional .Diadoc.Api.Proto.Documents.ResolutionStatusType Type = 1 [default = UnknownResolutionStatus];
inline bool ResolutionStatus::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionStatus::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionStatus::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionStatus::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::Diadoc::Api::Proto::Documents::ResolutionStatusType ResolutionStatus::type() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.ResolutionStatus.Type)
  return static_cast< ::Diadoc::Api::Proto::Documents::ResolutionStatusType >(type_);
}
inline void ResolutionStatus::set_type(::Diadoc::Api::Proto::Documents::ResolutionStatusType value) {
  assert(::Diadoc::Api::Proto::Documents::ResolutionStatusType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.ResolutionStatus.Type)
}

// optional .Diadoc.Api.Proto.ResolutionTarget Target = 2;
inline bool ResolutionStatus::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionStatus::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionStatus::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionStatus::clear_target() {
  if (target_ != NULL) target_->::Diadoc::Api::Proto::ResolutionTarget::Clear();
  clear_has_target();
}
inline const ::Diadoc::Api::Proto::ResolutionTarget& ResolutionStatus::target() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.ResolutionStatus.Target)
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::Diadoc::Api::Proto::ResolutionTarget* ResolutionStatus::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::Diadoc::Api::Proto::ResolutionTarget;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.ResolutionStatus.Target)
  return target_;
}
inline ::Diadoc::Api::Proto::ResolutionTarget* ResolutionStatus::release_target() {
  clear_has_target();
  ::Diadoc::Api::Proto::ResolutionTarget* temp = target_;
  target_ = NULL;
  return temp;
}
inline void ResolutionStatus::set_allocated_target(::Diadoc::Api::Proto::ResolutionTarget* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.ResolutionStatus.Target)
}

// required string AuthorUserId = 3;
inline bool ResolutionStatus::has_authoruserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolutionStatus::set_has_authoruserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolutionStatus::clear_has_authoruserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolutionStatus::clear_authoruserid() {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_->clear();
  }
  clear_has_authoruserid();
}
inline const ::std::string& ResolutionStatus::authoruserid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.ResolutionStatus.AuthorUserId)
  return *authoruserid_;
}
inline void ResolutionStatus::set_authoruserid(const ::std::string& value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.ResolutionStatus.AuthorUserId)
}
inline void ResolutionStatus::set_authoruserid(const char* value) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.ResolutionStatus.AuthorUserId)
}
inline void ResolutionStatus::set_authoruserid(const char* value, size_t size) {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  authoruserid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.ResolutionStatus.AuthorUserId)
}
inline ::std::string* ResolutionStatus::mutable_authoruserid() {
  set_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authoruserid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.ResolutionStatus.AuthorUserId)
  return authoruserid_;
}
inline ::std::string* ResolutionStatus::release_authoruserid() {
  clear_has_authoruserid();
  if (authoruserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authoruserid_;
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionStatus::set_allocated_authoruserid(::std::string* authoruserid) {
  if (authoruserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authoruserid_;
  }
  if (authoruserid) {
    set_has_authoruserid();
    authoruserid_ = authoruserid;
  } else {
    clear_has_authoruserid();
    authoruserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.ResolutionStatus.AuthorUserId)
}

// required string AuthorFIO = 4;
inline bool ResolutionStatus::has_authorfio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolutionStatus::set_has_authorfio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolutionStatus::clear_has_authorfio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolutionStatus::clear_authorfio() {
  if (authorfio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorfio_->clear();
  }
  clear_has_authorfio();
}
inline const ::std::string& ResolutionStatus::authorfio() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.ResolutionStatus.AuthorFIO)
  return *authorfio_;
}
inline void ResolutionStatus::set_authorfio(const ::std::string& value) {
  set_has_authorfio();
  if (authorfio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorfio_ = new ::std::string;
  }
  authorfio_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.ResolutionStatus.AuthorFIO)
}
inline void ResolutionStatus::set_authorfio(const char* value) {
  set_has_authorfio();
  if (authorfio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorfio_ = new ::std::string;
  }
  authorfio_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.ResolutionStatus.AuthorFIO)
}
inline void ResolutionStatus::set_authorfio(const char* value, size_t size) {
  set_has_authorfio();
  if (authorfio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorfio_ = new ::std::string;
  }
  authorfio_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.ResolutionStatus.AuthorFIO)
}
inline ::std::string* ResolutionStatus::mutable_authorfio() {
  set_has_authorfio();
  if (authorfio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authorfio_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.ResolutionStatus.AuthorFIO)
  return authorfio_;
}
inline ::std::string* ResolutionStatus::release_authorfio() {
  clear_has_authorfio();
  if (authorfio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authorfio_;
    authorfio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionStatus::set_allocated_authorfio(::std::string* authorfio) {
  if (authorfio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authorfio_;
  }
  if (authorfio) {
    set_has_authorfio();
    authorfio_ = authorfio;
  } else {
    clear_has_authorfio();
    authorfio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.ResolutionStatus.AuthorFIO)
}

// -------------------------------------------------------------------

// RecipientReceiptMetadata

// required .Diadoc.Api.Proto.Documents.GeneralReceiptStatus ReceiptStatus = 1 [default = GeneralReceiptStatusUnknown];
inline bool RecipientReceiptMetadata::has_receiptstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecipientReceiptMetadata::set_has_receiptstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecipientReceiptMetadata::clear_has_receiptstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecipientReceiptMetadata::clear_receiptstatus() {
  receiptstatus_ = 0;
  clear_has_receiptstatus();
}
inline ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus RecipientReceiptMetadata::receiptstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.RecipientReceiptMetadata.ReceiptStatus)
  return static_cast< ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus >(receiptstatus_);
}
inline void RecipientReceiptMetadata::set_receiptstatus(::Diadoc::Api::Proto::Documents::GeneralReceiptStatus value) {
  assert(::Diadoc::Api::Proto::Documents::GeneralReceiptStatus_IsValid(value));
  set_has_receiptstatus();
  receiptstatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.RecipientReceiptMetadata.ReceiptStatus)
}

// optional .Diadoc.Api.Proto.Documents.ConfirmationMetadata ConfirmationMetadata = 2;
inline bool RecipientReceiptMetadata::has_confirmationmetadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecipientReceiptMetadata::set_has_confirmationmetadata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecipientReceiptMetadata::clear_has_confirmationmetadata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecipientReceiptMetadata::clear_confirmationmetadata() {
  if (confirmationmetadata_ != NULL) confirmationmetadata_->::Diadoc::Api::Proto::Documents::ConfirmationMetadata::Clear();
  clear_has_confirmationmetadata();
}
inline const ::Diadoc::Api::Proto::Documents::ConfirmationMetadata& RecipientReceiptMetadata::confirmationmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.RecipientReceiptMetadata.ConfirmationMetadata)
  return confirmationmetadata_ != NULL ? *confirmationmetadata_ : *default_instance_->confirmationmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::ConfirmationMetadata* RecipientReceiptMetadata::mutable_confirmationmetadata() {
  set_has_confirmationmetadata();
  if (confirmationmetadata_ == NULL) confirmationmetadata_ = new ::Diadoc::Api::Proto::Documents::ConfirmationMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.RecipientReceiptMetadata.ConfirmationMetadata)
  return confirmationmetadata_;
}
inline ::Diadoc::Api::Proto::Documents::ConfirmationMetadata* RecipientReceiptMetadata::release_confirmationmetadata() {
  clear_has_confirmationmetadata();
  ::Diadoc::Api::Proto::Documents::ConfirmationMetadata* temp = confirmationmetadata_;
  confirmationmetadata_ = NULL;
  return temp;
}
inline void RecipientReceiptMetadata::set_allocated_confirmationmetadata(::Diadoc::Api::Proto::Documents::ConfirmationMetadata* confirmationmetadata) {
  delete confirmationmetadata_;
  confirmationmetadata_ = confirmationmetadata;
  if (confirmationmetadata) {
    set_has_confirmationmetadata();
  } else {
    clear_has_confirmationmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.RecipientReceiptMetadata.ConfirmationMetadata)
}

// -------------------------------------------------------------------

// ConfirmationMetadata

// required .Diadoc.Api.Proto.Documents.GeneralReceiptStatus ReceiptStatus = 1 [default = GeneralReceiptStatusUnknown];
inline bool ConfirmationMetadata::has_receiptstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfirmationMetadata::set_has_receiptstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfirmationMetadata::clear_has_receiptstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfirmationMetadata::clear_receiptstatus() {
  receiptstatus_ = 0;
  clear_has_receiptstatus();
}
inline ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus ConfirmationMetadata::receiptstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.ConfirmationMetadata.ReceiptStatus)
  return static_cast< ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus >(receiptstatus_);
}
inline void ConfirmationMetadata::set_receiptstatus(::Diadoc::Api::Proto::Documents::GeneralReceiptStatus value) {
  assert(::Diadoc::Api::Proto::Documents::GeneralReceiptStatus_IsValid(value));
  set_has_receiptstatus();
  receiptstatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.ConfirmationMetadata.ReceiptStatus)
}

// required sfixed64 DateTimeTicks = 2;
inline bool ConfirmationMetadata::has_datetimeticks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfirmationMetadata::set_has_datetimeticks() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfirmationMetadata::clear_has_datetimeticks() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfirmationMetadata::clear_datetimeticks() {
  datetimeticks_ = GOOGLE_LONGLONG(0);
  clear_has_datetimeticks();
}
inline ::google::protobuf::int64 ConfirmationMetadata::datetimeticks() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.ConfirmationMetadata.DateTimeTicks)
  return datetimeticks_;
}
inline void ConfirmationMetadata::set_datetimeticks(::google::protobuf::int64 value) {
  set_has_datetimeticks();
  datetimeticks_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.ConfirmationMetadata.DateTimeTicks)
}

// -------------------------------------------------------------------

// AmendmentRequestMetadata

// required int32 AmendmentFlags = 1;
inline bool AmendmentRequestMetadata::has_amendmentflags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AmendmentRequestMetadata::set_has_amendmentflags() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AmendmentRequestMetadata::clear_has_amendmentflags() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AmendmentRequestMetadata::clear_amendmentflags() {
  amendmentflags_ = 0;
  clear_has_amendmentflags();
}
inline ::google::protobuf::int32 AmendmentRequestMetadata::amendmentflags() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.AmendmentRequestMetadata.AmendmentFlags)
  return amendmentflags_;
}
inline void AmendmentRequestMetadata::set_amendmentflags(::google::protobuf::int32 value) {
  set_has_amendmentflags();
  amendmentflags_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.AmendmentRequestMetadata.AmendmentFlags)
}

// required .Diadoc.Api.Proto.Documents.GeneralReceiptStatus ReceiptStatus = 2 [default = GeneralReceiptStatusUnknown];
inline bool AmendmentRequestMetadata::has_receiptstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AmendmentRequestMetadata::set_has_receiptstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AmendmentRequestMetadata::clear_has_receiptstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AmendmentRequestMetadata::clear_receiptstatus() {
  receiptstatus_ = 0;
  clear_has_receiptstatus();
}
inline ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus AmendmentRequestMetadata::receiptstatus() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.AmendmentRequestMetadata.ReceiptStatus)
  return static_cast< ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus >(receiptstatus_);
}
inline void AmendmentRequestMetadata::set_receiptstatus(::Diadoc::Api::Proto::Documents::GeneralReceiptStatus value) {
  assert(::Diadoc::Api::Proto::Documents::GeneralReceiptStatus_IsValid(value));
  set_has_receiptstatus();
  receiptstatus_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.AmendmentRequestMetadata.ReceiptStatus)
}

// -------------------------------------------------------------------

// Origin

// required .Diadoc.Api.Proto.Documents.MessageType MessageType = 1;
inline bool Origin::has_messagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Origin::set_has_messagetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Origin::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Origin::clear_messagetype() {
  messagetype_ = 0;
  clear_has_messagetype();
}
inline ::Diadoc::Api::Proto::Documents::MessageType Origin::messagetype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Origin.MessageType)
  return static_cast< ::Diadoc::Api::Proto::Documents::MessageType >(messagetype_);
}
inline void Origin::set_messagetype(::Diadoc::Api::Proto::Documents::MessageType value) {
  assert(::Diadoc::Api::Proto::Documents::MessageType_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Origin.MessageType)
}

// required string MessageId = 2;
inline bool Origin::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Origin::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Origin::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Origin::clear_messageid() {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_->clear();
  }
  clear_has_messageid();
}
inline const ::std::string& Origin::messageid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Documents.Origin.MessageId)
  return *messageid_;
}
inline void Origin::set_messageid(const ::std::string& value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Documents.Origin.MessageId)
}
inline void Origin::set_messageid(const char* value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Documents.Origin.MessageId)
}
inline void Origin::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Documents.Origin.MessageId)
}
inline ::std::string* Origin::mutable_messageid() {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Documents.Origin.MessageId)
  return messageid_;
}
inline ::std::string* Origin::release_messageid() {
  clear_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = messageid_;
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Origin::set_allocated_messageid(::std::string* messageid) {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messageid_;
  }
  if (messageid) {
    set_has_messageid();
    messageid_ = messageid;
  } else {
    clear_has_messageid();
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Documents.Origin.MessageId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Documents
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Diadoc::Api::Proto::Documents::ResolutionStatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::ResolutionStatusType>() {
  return ::Diadoc::Api::Proto::Documents::ResolutionStatusType_descriptor();
}
template <> struct is_proto_enum< ::Diadoc::Api::Proto::Documents::RevocationStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::RevocationStatus>() {
  return ::Diadoc::Api::Proto::Documents::RevocationStatus_descriptor();
}
template <> struct is_proto_enum< ::Diadoc::Api::Proto::Documents::RoamingNotificationStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::RoamingNotificationStatus>() {
  return ::Diadoc::Api::Proto::Documents::RoamingNotificationStatus_descriptor();
}
template <> struct is_proto_enum< ::Diadoc::Api::Proto::Documents::SenderSignatureStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::SenderSignatureStatus>() {
  return ::Diadoc::Api::Proto::Documents::SenderSignatureStatus_descriptor();
}
template <> struct is_proto_enum< ::Diadoc::Api::Proto::Documents::ProxySignatureStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::ProxySignatureStatus>() {
  return ::Diadoc::Api::Proto::Documents::ProxySignatureStatus_descriptor();
}
template <> struct is_proto_enum< ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus>() {
  return ::Diadoc::Api::Proto::Documents::GeneralReceiptStatus_descriptor();
}
template <> struct is_proto_enum< ::Diadoc::Api::Proto::Documents::RecipientResponseStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::RecipientResponseStatus>() {
  return ::Diadoc::Api::Proto::Documents::RecipientResponseStatus_descriptor();
}
template <> struct is_proto_enum< ::Diadoc::Api::Proto::Documents::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Documents::MessageType>() {
  return ::Diadoc::Api::Proto::Documents::MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Documents_2fDocument_2eproto__INCLUDED
