// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Auth/AuthenticateByCertificateInfo.proto

#ifndef PROTOBUF_Auth_2fAuthenticateByCertificateInfo_2eproto__INCLUDED
#define PROTOBUF_Auth_2fAuthenticateByCertificateInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Auth/AuthenticateByTrustedServiceKeyInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Auth {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Auth_2fAuthenticateByCertificateInfo_2eproto();
void protobuf_AssignDesc_Auth_2fAuthenticateByCertificateInfo_2eproto();
void protobuf_ShutdownFile_Auth_2fAuthenticateByCertificateInfo_2eproto();

class AuthenticateByCertificateInfo;

// ===================================================================

class AuthenticateByCertificateInfo : public ::google::protobuf::Message {
 public:
  AuthenticateByCertificateInfo();
  virtual ~AuthenticateByCertificateInfo();

  AuthenticateByCertificateInfo(const AuthenticateByCertificateInfo& from);

  inline AuthenticateByCertificateInfo& operator=(const AuthenticateByCertificateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthenticateByCertificateInfo& default_instance();

  void Swap(AuthenticateByCertificateInfo* other);

  // implements Message ----------------------------------------------

  AuthenticateByCertificateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthenticateByCertificateInfo& from);
  void MergeFrom(const AuthenticateByCertificateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Certificate = 1;
  inline bool has_certificate() const;
  inline void clear_certificate();
  static const int kCertificateFieldNumber = 1;
  inline const ::std::string& certificate() const;
  inline void set_certificate(const ::std::string& value);
  inline void set_certificate(const char* value);
  inline void set_certificate(const void* value, size_t size);
  inline ::std::string* mutable_certificate();
  inline ::std::string* release_certificate();
  inline void set_allocated_certificate(::std::string* certificate);

  // optional .Diadoc.Api.Proto.Auth.AuthenticateByTrustedServiceKeyInfo TrustedServiceKeyInfo = 2;
  inline bool has_trustedservicekeyinfo() const;
  inline void clear_trustedservicekeyinfo();
  static const int kTrustedServiceKeyInfoFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo& trustedservicekeyinfo() const;
  inline ::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo* mutable_trustedservicekeyinfo();
  inline ::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo* release_trustedservicekeyinfo();
  inline void set_allocated_trustedservicekeyinfo(::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo* trustedservicekeyinfo);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Auth.AuthenticateByCertificateInfo)
 private:
  inline void set_has_certificate();
  inline void clear_has_certificate();
  inline void set_has_trustedservicekeyinfo();
  inline void clear_has_trustedservicekeyinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* certificate_;
  ::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo* trustedservicekeyinfo_;
  friend void  protobuf_AddDesc_Auth_2fAuthenticateByCertificateInfo_2eproto();
  friend void protobuf_AssignDesc_Auth_2fAuthenticateByCertificateInfo_2eproto();
  friend void protobuf_ShutdownFile_Auth_2fAuthenticateByCertificateInfo_2eproto();

  void InitAsDefaultInstance();
  static AuthenticateByCertificateInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// AuthenticateByCertificateInfo

// required bytes Certificate = 1;
inline bool AuthenticateByCertificateInfo::has_certificate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthenticateByCertificateInfo::set_has_certificate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthenticateByCertificateInfo::clear_has_certificate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthenticateByCertificateInfo::clear_certificate() {
  if (certificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificate_->clear();
  }
  clear_has_certificate();
}
inline const ::std::string& AuthenticateByCertificateInfo::certificate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Auth.AuthenticateByCertificateInfo.Certificate)
  return *certificate_;
}
inline void AuthenticateByCertificateInfo::set_certificate(const ::std::string& value) {
  set_has_certificate();
  if (certificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificate_ = new ::std::string;
  }
  certificate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Auth.AuthenticateByCertificateInfo.Certificate)
}
inline void AuthenticateByCertificateInfo::set_certificate(const char* value) {
  set_has_certificate();
  if (certificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificate_ = new ::std::string;
  }
  certificate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Auth.AuthenticateByCertificateInfo.Certificate)
}
inline void AuthenticateByCertificateInfo::set_certificate(const void* value, size_t size) {
  set_has_certificate();
  if (certificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificate_ = new ::std::string;
  }
  certificate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Auth.AuthenticateByCertificateInfo.Certificate)
}
inline ::std::string* AuthenticateByCertificateInfo::mutable_certificate() {
  set_has_certificate();
  if (certificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    certificate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Auth.AuthenticateByCertificateInfo.Certificate)
  return certificate_;
}
inline ::std::string* AuthenticateByCertificateInfo::release_certificate() {
  clear_has_certificate();
  if (certificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = certificate_;
    certificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthenticateByCertificateInfo::set_allocated_certificate(::std::string* certificate) {
  if (certificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete certificate_;
  }
  if (certificate) {
    set_has_certificate();
    certificate_ = certificate;
  } else {
    clear_has_certificate();
    certificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Auth.AuthenticateByCertificateInfo.Certificate)
}

// optional .Diadoc.Api.Proto.Auth.AuthenticateByTrustedServiceKeyInfo TrustedServiceKeyInfo = 2;
inline bool AuthenticateByCertificateInfo::has_trustedservicekeyinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthenticateByCertificateInfo::set_has_trustedservicekeyinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthenticateByCertificateInfo::clear_has_trustedservicekeyinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthenticateByCertificateInfo::clear_trustedservicekeyinfo() {
  if (trustedservicekeyinfo_ != NULL) trustedservicekeyinfo_->::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo::Clear();
  clear_has_trustedservicekeyinfo();
}
inline const ::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo& AuthenticateByCertificateInfo::trustedservicekeyinfo() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Auth.AuthenticateByCertificateInfo.TrustedServiceKeyInfo)
  return trustedservicekeyinfo_ != NULL ? *trustedservicekeyinfo_ : *default_instance_->trustedservicekeyinfo_;
}
inline ::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo* AuthenticateByCertificateInfo::mutable_trustedservicekeyinfo() {
  set_has_trustedservicekeyinfo();
  if (trustedservicekeyinfo_ == NULL) trustedservicekeyinfo_ = new ::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Auth.AuthenticateByCertificateInfo.TrustedServiceKeyInfo)
  return trustedservicekeyinfo_;
}
inline ::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo* AuthenticateByCertificateInfo::release_trustedservicekeyinfo() {
  clear_has_trustedservicekeyinfo();
  ::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo* temp = trustedservicekeyinfo_;
  trustedservicekeyinfo_ = NULL;
  return temp;
}
inline void AuthenticateByCertificateInfo::set_allocated_trustedservicekeyinfo(::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo* trustedservicekeyinfo) {
  delete trustedservicekeyinfo_;
  trustedservicekeyinfo_ = trustedservicekeyinfo;
  if (trustedservicekeyinfo) {
    set_has_trustedservicekeyinfo();
  } else {
    clear_has_trustedservicekeyinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Auth.AuthenticateByCertificateInfo.TrustedServiceKeyInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Auth
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Auth_2fAuthenticateByCertificateInfo_2eproto__INCLUDED
