// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Auth/AuthenticateByLoginInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Auth/AuthenticateByLoginInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Auth {

namespace {

const ::google::protobuf::Descriptor* AuthenticateByLoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateByLoginInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Auth_2fAuthenticateByLoginInfo_2eproto() {
  protobuf_AddDesc_Auth_2fAuthenticateByLoginInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Auth/AuthenticateByLoginInfo.proto");
  GOOGLE_CHECK(file != NULL);
  AuthenticateByLoginInfo_descriptor_ = file->message_type(0);
  static const int AuthenticateByLoginInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateByLoginInfo, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateByLoginInfo, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateByLoginInfo, trustedservicekeyinfo_),
  };
  AuthenticateByLoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthenticateByLoginInfo_descriptor_,
      AuthenticateByLoginInfo::default_instance_,
      AuthenticateByLoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateByLoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateByLoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthenticateByLoginInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Auth_2fAuthenticateByLoginInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthenticateByLoginInfo_descriptor_, &AuthenticateByLoginInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Auth_2fAuthenticateByLoginInfo_2eproto() {
  delete AuthenticateByLoginInfo::default_instance_;
  delete AuthenticateByLoginInfo_reflection_;
}

void protobuf_AddDesc_Auth_2fAuthenticateByLoginInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::Auth::protobuf_AddDesc_Auth_2fAuthenticateByTrustedServiceKeyInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"Auth/AuthenticateByLoginInfo.proto\022\025Di"
    "adoc.Api.Proto.Auth\032.Auth/AuthenticateBy"
    "TrustedServiceKeyInfo.proto\"\225\001\n\027Authenti"
    "cateByLoginInfo\022\r\n\005Login\030\001 \002(\t\022\020\n\010Passwo"
    "rd\030\002 \002(\t\022Y\n\025TrustedServiceKeyInfo\030\003 \001(\0132"
    ":.Diadoc.Api.Proto.Auth.AuthenticateByTr"
    "ustedServiceKeyInfo", 259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Auth/AuthenticateByLoginInfo.proto", &protobuf_RegisterTypes);
  AuthenticateByLoginInfo::default_instance_ = new AuthenticateByLoginInfo();
  AuthenticateByLoginInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Auth_2fAuthenticateByLoginInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Auth_2fAuthenticateByLoginInfo_2eproto {
  StaticDescriptorInitializer_Auth_2fAuthenticateByLoginInfo_2eproto() {
    protobuf_AddDesc_Auth_2fAuthenticateByLoginInfo_2eproto();
  }
} static_descriptor_initializer_Auth_2fAuthenticateByLoginInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AuthenticateByLoginInfo::kLoginFieldNumber;
const int AuthenticateByLoginInfo::kPasswordFieldNumber;
const int AuthenticateByLoginInfo::kTrustedServiceKeyInfoFieldNumber;
#endif  // !_MSC_VER

AuthenticateByLoginInfo::AuthenticateByLoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Auth.AuthenticateByLoginInfo)
}

void AuthenticateByLoginInfo::InitAsDefaultInstance() {
  trustedservicekeyinfo_ = const_cast< ::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo*>(&::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo::default_instance());
}

AuthenticateByLoginInfo::AuthenticateByLoginInfo(const AuthenticateByLoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Auth.AuthenticateByLoginInfo)
}

void AuthenticateByLoginInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trustedservicekeyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateByLoginInfo::~AuthenticateByLoginInfo() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Auth.AuthenticateByLoginInfo)
  SharedDtor();
}

void AuthenticateByLoginInfo::SharedDtor() {
  if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
    delete trustedservicekeyinfo_;
  }
}

void AuthenticateByLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateByLoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateByLoginInfo_descriptor_;
}

const AuthenticateByLoginInfo& AuthenticateByLoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Auth_2fAuthenticateByLoginInfo_2eproto();
  return *default_instance_;
}

AuthenticateByLoginInfo* AuthenticateByLoginInfo::default_instance_ = NULL;

AuthenticateByLoginInfo* AuthenticateByLoginInfo::New() const {
  return new AuthenticateByLoginInfo;
}

void AuthenticateByLoginInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_login()) {
      if (login_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_trustedservicekeyinfo()) {
      if (trustedservicekeyinfo_ != NULL) trustedservicekeyinfo_->::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthenticateByLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Auth.AuthenticateByLoginInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login().data(), this->login().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Password;
        break;
      }

      // required string Password = 2;
      case 2: {
        if (tag == 18) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TrustedServiceKeyInfo;
        break;
      }

      // optional .Diadoc.Api.Proto.Auth.AuthenticateByTrustedServiceKeyInfo TrustedServiceKeyInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_TrustedServiceKeyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trustedservicekeyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Auth.AuthenticateByLoginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Auth.AuthenticateByLoginInfo)
  return false;
#undef DO_
}

void AuthenticateByLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Auth.AuthenticateByLoginInfo)
  // required string Login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->login(), output);
  }

  // required string Password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional .Diadoc.Api.Proto.Auth.AuthenticateByTrustedServiceKeyInfo TrustedServiceKeyInfo = 3;
  if (has_trustedservicekeyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trustedservicekeyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Auth.AuthenticateByLoginInfo)
}

::google::protobuf::uint8* AuthenticateByLoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Auth.AuthenticateByLoginInfo)
  // required string Login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login().data(), this->login().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->login(), target);
  }

  // required string Password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional .Diadoc.Api.Proto.Auth.AuthenticateByTrustedServiceKeyInfo TrustedServiceKeyInfo = 3;
  if (has_trustedservicekeyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->trustedservicekeyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Auth.AuthenticateByLoginInfo)
  return target;
}

int AuthenticateByLoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login());
    }

    // required string Password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .Diadoc.Api.Proto.Auth.AuthenticateByTrustedServiceKeyInfo TrustedServiceKeyInfo = 3;
    if (has_trustedservicekeyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trustedservicekeyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateByLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthenticateByLoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthenticateByLoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthenticateByLoginInfo::MergeFrom(const AuthenticateByLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_trustedservicekeyinfo()) {
      mutable_trustedservicekeyinfo()->::Diadoc::Api::Proto::Auth::AuthenticateByTrustedServiceKeyInfo::MergeFrom(from.trustedservicekeyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthenticateByLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateByLoginInfo::CopyFrom(const AuthenticateByLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateByLoginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_trustedservicekeyinfo()) {
    if (!this->trustedservicekeyinfo().IsInitialized()) return false;
  }
  return true;
}

void AuthenticateByLoginInfo::Swap(AuthenticateByLoginInfo* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(password_, other->password_);
    std::swap(trustedservicekeyinfo_, other->trustedservicekeyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthenticateByLoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateByLoginInfo_descriptor_;
  metadata.reflection = AuthenticateByLoginInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Auth
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
