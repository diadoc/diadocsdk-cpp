// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Counteragent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Counteragent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {

namespace {

const ::google::protobuf::Descriptor* CounteragentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounteragentList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Counteragent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Counteragent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CounteragentCertificateList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounteragentCertificateList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Certificate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Certificate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CounteragentStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Counteragent_2eproto() {
  protobuf_AddDesc_Counteragent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Counteragent.proto");
  GOOGLE_CHECK(file != NULL);
  CounteragentList_descriptor_ = file->message_type(0);
  static const int CounteragentList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounteragentList, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounteragentList, counteragents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounteragentList, totalcounttype_),
  };
  CounteragentList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CounteragentList_descriptor_,
      CounteragentList::default_instance_,
      CounteragentList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounteragentList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounteragentList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CounteragentList));
  Counteragent_descriptor_ = file->message_type(1);
  static const int Counteragent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counteragent, indexkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counteragent, organization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counteragent, currentstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counteragent, lasteventtimestampticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counteragent, messagefromcounteragent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counteragent, messagetocounteragent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counteragent, invitationdocumentid_),
  };
  Counteragent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Counteragent_descriptor_,
      Counteragent::default_instance_,
      Counteragent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counteragent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counteragent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Counteragent));
  CounteragentCertificateList_descriptor_ = file->message_type(2);
  static const int CounteragentCertificateList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounteragentCertificateList, certificates_),
  };
  CounteragentCertificateList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CounteragentCertificateList_descriptor_,
      CounteragentCertificateList::default_instance_,
      CounteragentCertificateList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounteragentCertificateList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounteragentCertificateList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CounteragentCertificateList));
  Certificate_descriptor_ = file->message_type(3);
  static const int Certificate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, rawcertificatedata_),
  };
  Certificate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Certificate_descriptor_,
      Certificate::default_instance_,
      Certificate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Certificate));
  CounteragentStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Counteragent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CounteragentList_descriptor_, &CounteragentList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Counteragent_descriptor_, &Counteragent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CounteragentCertificateList_descriptor_, &CounteragentCertificateList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Certificate_descriptor_, &Certificate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Counteragent_2eproto() {
  delete CounteragentList::default_instance_;
  delete CounteragentList_reflection_;
  delete Counteragent::default_instance_;
  delete Counteragent_reflection_;
  delete CounteragentCertificateList::default_instance_;
  delete CounteragentCertificateList_reflection_;
  delete Certificate::default_instance_;
  delete Certificate_reflection_;
}

void protobuf_AddDesc_Counteragent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_Organization_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentId_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_TotalCountType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022Counteragent.proto\022\020Diadoc.Api.Proto\032\022"
    "Organization.proto\032\020DocumentId.proto\032\024To"
    "talCountType.proto\"\227\001\n\020CounteragentList\022"
    "\022\n\nTotalCount\030\001 \002(\005\0225\n\rCounteragents\030\002 \003"
    "(\0132\036.Diadoc.Api.Proto.Counteragent\0228\n\016To"
    "talCountType\030\003 \002(\0162 .Diadoc.Api.Proto.To"
    "talCountType\"\313\002\n\014Counteragent\022\020\n\010IndexKe"
    "y\030\001 \001(\t\0224\n\014Organization\030\002 \002(\0132\036.Diadoc.A"
    "pi.Proto.Organization\022V\n\rCurrentStatus\030\003"
    " \001(\0162$.Diadoc.Api.Proto.CounteragentStat"
    "us:\031UnknownCounteragentStatus\022\037\n\027LastEve"
    "ntTimestampTicks\030\004 \002(\020\022\037\n\027MessageFromCou"
    "nteragent\030\006 \001(\t\022\035\n\025MessageToCounteragent"
    "\030\007 \001(\t\022:\n\024InvitationDocumentId\030\010 \001(\0132\034.D"
    "iadoc.Api.Proto.DocumentId\"R\n\033Counterage"
    "ntCertificateList\0223\n\014Certificates\030\001 \003(\0132"
    "\035.Diadoc.Api.Proto.Certificate\")\n\013Certif"
    "icate\022\032\n\022RawCertificateData\030\001 \002(\014*\251\001\n\022Co"
    "unteragentStatus\022\035\n\031UnknownCounteragentS"
    "tatus\020\000\022\024\n\020IsMyCounteragent\020\001\022\r\n\tInvites"
    "Me\020\002\022\021\n\rIsInvitedByMe\020\003\022\r\n\tRejectsMe\020\005\022\022"
    "\n\016IsRejectedByMe\020\006\022\031\n\025NotInCounteragentL"
    "ist\020\007", 885);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Counteragent.proto", &protobuf_RegisterTypes);
  CounteragentList::default_instance_ = new CounteragentList();
  Counteragent::default_instance_ = new Counteragent();
  CounteragentCertificateList::default_instance_ = new CounteragentCertificateList();
  Certificate::default_instance_ = new Certificate();
  CounteragentList::default_instance_->InitAsDefaultInstance();
  Counteragent::default_instance_->InitAsDefaultInstance();
  CounteragentCertificateList::default_instance_->InitAsDefaultInstance();
  Certificate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Counteragent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Counteragent_2eproto {
  StaticDescriptorInitializer_Counteragent_2eproto() {
    protobuf_AddDesc_Counteragent_2eproto();
  }
} static_descriptor_initializer_Counteragent_2eproto_;
const ::google::protobuf::EnumDescriptor* CounteragentStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounteragentStatus_descriptor_;
}
bool CounteragentStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CounteragentList::kTotalCountFieldNumber;
const int CounteragentList::kCounteragentsFieldNumber;
const int CounteragentList::kTotalCountTypeFieldNumber;
#endif  // !_MSC_VER

CounteragentList::CounteragentList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.CounteragentList)
}

void CounteragentList::InitAsDefaultInstance() {
}

CounteragentList::CounteragentList(const CounteragentList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.CounteragentList)
}

void CounteragentList::SharedCtor() {
  _cached_size_ = 0;
  totalcount_ = 0;
  totalcounttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounteragentList::~CounteragentList() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.CounteragentList)
  SharedDtor();
}

void CounteragentList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CounteragentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounteragentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounteragentList_descriptor_;
}

const CounteragentList& CounteragentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Counteragent_2eproto();
  return *default_instance_;
}

CounteragentList* CounteragentList::default_instance_ = NULL;

CounteragentList* CounteragentList::New() const {
  return new CounteragentList;
}

void CounteragentList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CounteragentList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(totalcount_, totalcounttype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  counteragents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CounteragentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.CounteragentList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TotalCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Counteragents;
        break;
      }

      // repeated .Diadoc.Api.Proto.Counteragent Counteragents = 2;
      case 2: {
        if (tag == 18) {
         parse_Counteragents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_counteragents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Counteragents;
        if (input->ExpectTag(24)) goto parse_TotalCountType;
        break;
      }

      // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalCountType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::TotalCountType_IsValid(value)) {
            set_totalcounttype(static_cast< ::Diadoc::Api::Proto::TotalCountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.CounteragentList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.CounteragentList)
  return false;
#undef DO_
}

void CounteragentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.CounteragentList)
  // required int32 TotalCount = 1;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalcount(), output);
  }

  // repeated .Diadoc.Api.Proto.Counteragent Counteragents = 2;
  for (int i = 0; i < this->counteragents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->counteragents(i), output);
  }

  // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
  if (has_totalcounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->totalcounttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.CounteragentList)
}

::google::protobuf::uint8* CounteragentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.CounteragentList)
  // required int32 TotalCount = 1;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalcount(), target);
  }

  // repeated .Diadoc.Api.Proto.Counteragent Counteragents = 2;
  for (int i = 0; i < this->counteragents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->counteragents(i), target);
  }

  // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
  if (has_totalcounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->totalcounttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.CounteragentList)
  return target;
}

int CounteragentList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 TotalCount = 1;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // required .Diadoc.Api.Proto.TotalCountType TotalCountType = 3;
    if (has_totalcounttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->totalcounttype());
    }

  }
  // repeated .Diadoc.Api.Proto.Counteragent Counteragents = 2;
  total_size += 1 * this->counteragents_size();
  for (int i = 0; i < this->counteragents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counteragents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounteragentList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CounteragentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CounteragentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CounteragentList::MergeFrom(const CounteragentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  counteragents_.MergeFrom(from.counteragents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_totalcounttype()) {
      set_totalcounttype(from.totalcounttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CounteragentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounteragentList::CopyFrom(const CounteragentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounteragentList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->counteragents())) return false;
  return true;
}

void CounteragentList::Swap(CounteragentList* other) {
  if (other != this) {
    std::swap(totalcount_, other->totalcount_);
    counteragents_.Swap(&other->counteragents_);
    std::swap(totalcounttype_, other->totalcounttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CounteragentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounteragentList_descriptor_;
  metadata.reflection = CounteragentList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Counteragent::kIndexKeyFieldNumber;
const int Counteragent::kOrganizationFieldNumber;
const int Counteragent::kCurrentStatusFieldNumber;
const int Counteragent::kLastEventTimestampTicksFieldNumber;
const int Counteragent::kMessageFromCounteragentFieldNumber;
const int Counteragent::kMessageToCounteragentFieldNumber;
const int Counteragent::kInvitationDocumentIdFieldNumber;
#endif  // !_MSC_VER

Counteragent::Counteragent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Counteragent)
}

void Counteragent::InitAsDefaultInstance() {
  organization_ = const_cast< ::Diadoc::Api::Proto::Organization*>(&::Diadoc::Api::Proto::Organization::default_instance());
  invitationdocumentid_ = const_cast< ::Diadoc::Api::Proto::DocumentId*>(&::Diadoc::Api::Proto::DocumentId::default_instance());
}

Counteragent::Counteragent(const Counteragent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Counteragent)
}

void Counteragent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  indexkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_ = NULL;
  currentstatus_ = 0;
  lasteventtimestampticks_ = GOOGLE_LONGLONG(0);
  messagefromcounteragent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetocounteragent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitationdocumentid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Counteragent::~Counteragent() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Counteragent)
  SharedDtor();
}

void Counteragent::SharedDtor() {
  if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete indexkey_;
  }
  if (messagefromcounteragent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagefromcounteragent_;
  }
  if (messagetocounteragent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetocounteragent_;
  }
  if (this != default_instance_) {
    delete organization_;
    delete invitationdocumentid_;
  }
}

void Counteragent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Counteragent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Counteragent_descriptor_;
}

const Counteragent& Counteragent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Counteragent_2eproto();
  return *default_instance_;
}

Counteragent* Counteragent::default_instance_ = NULL;

Counteragent* Counteragent::New() const {
  return new Counteragent;
}

void Counteragent::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_indexkey()) {
      if (indexkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        indexkey_->clear();
      }
    }
    if (has_organization()) {
      if (organization_ != NULL) organization_->::Diadoc::Api::Proto::Organization::Clear();
    }
    currentstatus_ = 0;
    lasteventtimestampticks_ = GOOGLE_LONGLONG(0);
    if (has_messagefromcounteragent()) {
      if (messagefromcounteragent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagefromcounteragent_->clear();
      }
    }
    if (has_messagetocounteragent()) {
      if (messagetocounteragent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagetocounteragent_->clear();
      }
    }
    if (has_invitationdocumentid()) {
      if (invitationdocumentid_ != NULL) invitationdocumentid_->::Diadoc::Api::Proto::DocumentId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Counteragent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Counteragent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string IndexKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_indexkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->indexkey().data(), this->indexkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "indexkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Organization;
        break;
      }

      // required .Diadoc.Api.Proto.Organization Organization = 2;
      case 2: {
        if (tag == 18) {
         parse_Organization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_organization()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurrentStatus;
        break;
      }

      // optional .Diadoc.Api.Proto.CounteragentStatus CurrentStatus = 3 [default = UnknownCounteragentStatus];
      case 3: {
        if (tag == 24) {
         parse_CurrentStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::CounteragentStatus_IsValid(value)) {
            set_currentstatus(static_cast< ::Diadoc::Api::Proto::CounteragentStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_LastEventTimestampTicks;
        break;
      }

      // required sfixed64 LastEventTimestampTicks = 4;
      case 4: {
        if (tag == 33) {
         parse_LastEventTimestampTicks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &lasteventtimestampticks_)));
          set_has_lasteventtimestampticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_MessageFromCounteragent;
        break;
      }

      // optional string MessageFromCounteragent = 6;
      case 6: {
        if (tag == 50) {
         parse_MessageFromCounteragent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagefromcounteragent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagefromcounteragent().data(), this->messagefromcounteragent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagefromcounteragent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_MessageToCounteragent;
        break;
      }

      // optional string MessageToCounteragent = 7;
      case 7: {
        if (tag == 58) {
         parse_MessageToCounteragent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetocounteragent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetocounteragent().data(), this->messagetocounteragent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagetocounteragent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_InvitationDocumentId;
        break;
      }

      // optional .Diadoc.Api.Proto.DocumentId InvitationDocumentId = 8;
      case 8: {
        if (tag == 66) {
         parse_InvitationDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitationdocumentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Counteragent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Counteragent)
  return false;
#undef DO_
}

void Counteragent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Counteragent)
  // optional string IndexKey = 1;
  if (has_indexkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indexkey().data(), this->indexkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "indexkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->indexkey(), output);
  }

  // required .Diadoc.Api.Proto.Organization Organization = 2;
  if (has_organization()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->organization(), output);
  }

  // optional .Diadoc.Api.Proto.CounteragentStatus CurrentStatus = 3 [default = UnknownCounteragentStatus];
  if (has_currentstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->currentstatus(), output);
  }

  // required sfixed64 LastEventTimestampTicks = 4;
  if (has_lasteventtimestampticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->lasteventtimestampticks(), output);
  }

  // optional string MessageFromCounteragent = 6;
  if (has_messagefromcounteragent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagefromcounteragent().data(), this->messagefromcounteragent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagefromcounteragent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->messagefromcounteragent(), output);
  }

  // optional string MessageToCounteragent = 7;
  if (has_messagetocounteragent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetocounteragent().data(), this->messagetocounteragent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetocounteragent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->messagetocounteragent(), output);
  }

  // optional .Diadoc.Api.Proto.DocumentId InvitationDocumentId = 8;
  if (has_invitationdocumentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->invitationdocumentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Counteragent)
}

::google::protobuf::uint8* Counteragent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Counteragent)
  // optional string IndexKey = 1;
  if (has_indexkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->indexkey().data(), this->indexkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "indexkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->indexkey(), target);
  }

  // required .Diadoc.Api.Proto.Organization Organization = 2;
  if (has_organization()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->organization(), target);
  }

  // optional .Diadoc.Api.Proto.CounteragentStatus CurrentStatus = 3 [default = UnknownCounteragentStatus];
  if (has_currentstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->currentstatus(), target);
  }

  // required sfixed64 LastEventTimestampTicks = 4;
  if (has_lasteventtimestampticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->lasteventtimestampticks(), target);
  }

  // optional string MessageFromCounteragent = 6;
  if (has_messagefromcounteragent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagefromcounteragent().data(), this->messagefromcounteragent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagefromcounteragent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->messagefromcounteragent(), target);
  }

  // optional string MessageToCounteragent = 7;
  if (has_messagetocounteragent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetocounteragent().data(), this->messagetocounteragent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetocounteragent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->messagetocounteragent(), target);
  }

  // optional .Diadoc.Api.Proto.DocumentId InvitationDocumentId = 8;
  if (has_invitationdocumentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->invitationdocumentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Counteragent)
  return target;
}

int Counteragent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string IndexKey = 1;
    if (has_indexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->indexkey());
    }

    // required .Diadoc.Api.Proto.Organization Organization = 2;
    if (has_organization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->organization());
    }

    // optional .Diadoc.Api.Proto.CounteragentStatus CurrentStatus = 3 [default = UnknownCounteragentStatus];
    if (has_currentstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->currentstatus());
    }

    // required sfixed64 LastEventTimestampTicks = 4;
    if (has_lasteventtimestampticks()) {
      total_size += 1 + 8;
    }

    // optional string MessageFromCounteragent = 6;
    if (has_messagefromcounteragent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagefromcounteragent());
    }

    // optional string MessageToCounteragent = 7;
    if (has_messagetocounteragent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagetocounteragent());
    }

    // optional .Diadoc.Api.Proto.DocumentId InvitationDocumentId = 8;
    if (has_invitationdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitationdocumentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Counteragent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Counteragent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Counteragent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Counteragent::MergeFrom(const Counteragent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_indexkey()) {
      set_indexkey(from.indexkey());
    }
    if (from.has_organization()) {
      mutable_organization()->::Diadoc::Api::Proto::Organization::MergeFrom(from.organization());
    }
    if (from.has_currentstatus()) {
      set_currentstatus(from.currentstatus());
    }
    if (from.has_lasteventtimestampticks()) {
      set_lasteventtimestampticks(from.lasteventtimestampticks());
    }
    if (from.has_messagefromcounteragent()) {
      set_messagefromcounteragent(from.messagefromcounteragent());
    }
    if (from.has_messagetocounteragent()) {
      set_messagetocounteragent(from.messagetocounteragent());
    }
    if (from.has_invitationdocumentid()) {
      mutable_invitationdocumentid()->::Diadoc::Api::Proto::DocumentId::MergeFrom(from.invitationdocumentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Counteragent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Counteragent::CopyFrom(const Counteragent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Counteragent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;

  if (has_organization()) {
    if (!this->organization().IsInitialized()) return false;
  }
  if (has_invitationdocumentid()) {
    if (!this->invitationdocumentid().IsInitialized()) return false;
  }
  return true;
}

void Counteragent::Swap(Counteragent* other) {
  if (other != this) {
    std::swap(indexkey_, other->indexkey_);
    std::swap(organization_, other->organization_);
    std::swap(currentstatus_, other->currentstatus_);
    std::swap(lasteventtimestampticks_, other->lasteventtimestampticks_);
    std::swap(messagefromcounteragent_, other->messagefromcounteragent_);
    std::swap(messagetocounteragent_, other->messagetocounteragent_);
    std::swap(invitationdocumentid_, other->invitationdocumentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Counteragent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Counteragent_descriptor_;
  metadata.reflection = Counteragent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CounteragentCertificateList::kCertificatesFieldNumber;
#endif  // !_MSC_VER

CounteragentCertificateList::CounteragentCertificateList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.CounteragentCertificateList)
}

void CounteragentCertificateList::InitAsDefaultInstance() {
}

CounteragentCertificateList::CounteragentCertificateList(const CounteragentCertificateList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.CounteragentCertificateList)
}

void CounteragentCertificateList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounteragentCertificateList::~CounteragentCertificateList() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.CounteragentCertificateList)
  SharedDtor();
}

void CounteragentCertificateList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CounteragentCertificateList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounteragentCertificateList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounteragentCertificateList_descriptor_;
}

const CounteragentCertificateList& CounteragentCertificateList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Counteragent_2eproto();
  return *default_instance_;
}

CounteragentCertificateList* CounteragentCertificateList::default_instance_ = NULL;

CounteragentCertificateList* CounteragentCertificateList::New() const {
  return new CounteragentCertificateList;
}

void CounteragentCertificateList::Clear() {
  certificates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CounteragentCertificateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.CounteragentCertificateList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Certificate Certificates = 1;
      case 1: {
        if (tag == 10) {
         parse_Certificates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_certificates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Certificates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.CounteragentCertificateList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.CounteragentCertificateList)
  return false;
#undef DO_
}

void CounteragentCertificateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.CounteragentCertificateList)
  // repeated .Diadoc.Api.Proto.Certificate Certificates = 1;
  for (int i = 0; i < this->certificates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->certificates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.CounteragentCertificateList)
}

::google::protobuf::uint8* CounteragentCertificateList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.CounteragentCertificateList)
  // repeated .Diadoc.Api.Proto.Certificate Certificates = 1;
  for (int i = 0; i < this->certificates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->certificates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.CounteragentCertificateList)
  return target;
}

int CounteragentCertificateList::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Certificate Certificates = 1;
  total_size += 1 * this->certificates_size();
  for (int i = 0; i < this->certificates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->certificates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounteragentCertificateList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CounteragentCertificateList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CounteragentCertificateList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CounteragentCertificateList::MergeFrom(const CounteragentCertificateList& from) {
  GOOGLE_CHECK_NE(&from, this);
  certificates_.MergeFrom(from.certificates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CounteragentCertificateList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounteragentCertificateList::CopyFrom(const CounteragentCertificateList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounteragentCertificateList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->certificates())) return false;
  return true;
}

void CounteragentCertificateList::Swap(CounteragentCertificateList* other) {
  if (other != this) {
    certificates_.Swap(&other->certificates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CounteragentCertificateList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounteragentCertificateList_descriptor_;
  metadata.reflection = CounteragentCertificateList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Certificate::kRawCertificateDataFieldNumber;
#endif  // !_MSC_VER

Certificate::Certificate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Certificate)
}

void Certificate::InitAsDefaultInstance() {
}

Certificate::Certificate(const Certificate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Certificate)
}

void Certificate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rawcertificatedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Certificate::~Certificate() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Certificate)
  SharedDtor();
}

void Certificate::SharedDtor() {
  if (rawcertificatedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rawcertificatedata_;
  }
  if (this != default_instance_) {
  }
}

void Certificate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Certificate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Certificate_descriptor_;
}

const Certificate& Certificate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Counteragent_2eproto();
  return *default_instance_;
}

Certificate* Certificate::default_instance_ = NULL;

Certificate* Certificate::New() const {
  return new Certificate;
}

void Certificate::Clear() {
  if (has_rawcertificatedata()) {
    if (rawcertificatedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      rawcertificatedata_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Certificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Certificate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes RawCertificateData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rawcertificatedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Certificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Certificate)
  return false;
#undef DO_
}

void Certificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Certificate)
  // required bytes RawCertificateData = 1;
  if (has_rawcertificatedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->rawcertificatedata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Certificate)
}

::google::protobuf::uint8* Certificate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Certificate)
  // required bytes RawCertificateData = 1;
  if (has_rawcertificatedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->rawcertificatedata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Certificate)
  return target;
}

int Certificate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes RawCertificateData = 1;
    if (has_rawcertificatedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rawcertificatedata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Certificate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Certificate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Certificate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Certificate::MergeFrom(const Certificate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rawcertificatedata()) {
      set_rawcertificatedata(from.rawcertificatedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Certificate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Certificate::CopyFrom(const Certificate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Certificate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Certificate::Swap(Certificate* other) {
  if (other != this) {
    std::swap(rawcertificatedata_, other->rawcertificatedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Certificate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Certificate_descriptor_;
  metadata.reflection = Certificate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
