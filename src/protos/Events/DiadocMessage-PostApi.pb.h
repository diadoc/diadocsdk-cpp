// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Events/DiadocMessage-PostApi.proto

#ifndef PROTOBUF_Events_2fDiadocMessage_2dPostApi_2eproto__INCLUDED
#define PROTOBUF_Events_2fDiadocMessage_2dPostApi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "DocumentId.pb.h"
#include "CustomDataItem.pb.h"
#include "LockMode.pb.h"
#include "Invoicing/Signer.pb.h"
#include "Invoicing/ExtendedSigner.pb.h"
#include "Events/ResolutionInfo.pb.h"
#include "Events/ResolutionRequestInfo.pb.h"
#include "Invoicing/OrganizationInfo.pb.h"
#include "Docflow/DocumentInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Events {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

class MessageToPost;
class EncryptedXmlDocumentAttachment;
class EncryptedInvoiceAttachment;
class EncryptedDocumentMetadata;
class EncryptedXmlBasicDocumentMetadata;
class EncryptedInvoiceMetadata;
class EncryptedInvoiceCorrectionMetadata;
class XmlDocumentAttachment;
class NonformalizedAttachment;
class BasicDocumentAttachment;
class Torg13Attachment;
class AcceptanceCertificateAttachment;
class TrustConnectionRequestAttachment;
class StructuredDataAttachment;
class PriceListAttachment;
class ReconciliationActAttachment;
class ContractAttachment;
class SupplementaryAgreementAttachment;
class ServiceDetailsAttachment;
class DocumentAttachment;
class MetadataItem;
class MessagePatchToPost;
class SignatureVerification;
class ResolutionRequestAttachment;
class ResolutionRouteAssignment;
class ResolutionRequestCancellationAttachment;
class ResolutionRequestDenialCancellationAttachment;
class ResolutionRequestDenialAttachment;
class ResolutionAttachment;
class ReceiptAttachment;
class CorrectionRequestAttachment;
class DocumentSignature;
class DocumentSenderSignature;
class RequestedSignatureRejection;
class SignedContent;
class DraftToSend;
class PrepareDocumentsToSignRequest;
class DraftDocumentToPatch;
class ContentToPatch;
class DocumentToPatch;
class DocumentPatchedContent;
class PrepareDocumentsToSignResponse;
class MessageToSend;
class RevocationRequestAttachment;
class XmlSignatureRejectionAttachment;
class RoamingNotificationToPost;
class CustomDataPatch;
class EditDocumentPacketCommand;
class ResolutionRouteRemoval;
class TemplateToPost;
class TemplateDocumentAttachment;
class UnsignedContent;
class TemplateTransformationToPost;
class DocumentTransformation;

enum CustomDataPatchOperation {
  Set = 0,
  Remove = 1
};
bool CustomDataPatchOperation_IsValid(int value);
const CustomDataPatchOperation CustomDataPatchOperation_MIN = Set;
const CustomDataPatchOperation CustomDataPatchOperation_MAX = Remove;
const int CustomDataPatchOperation_ARRAYSIZE = CustomDataPatchOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* CustomDataPatchOperation_descriptor();
inline const ::std::string& CustomDataPatchOperation_Name(CustomDataPatchOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    CustomDataPatchOperation_descriptor(), value);
}
inline bool CustomDataPatchOperation_Parse(
    const ::std::string& name, CustomDataPatchOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CustomDataPatchOperation>(
    CustomDataPatchOperation_descriptor(), name, value);
}
// ===================================================================

class MessageToPost : public ::google::protobuf::Message {
 public:
  MessageToPost();
  virtual ~MessageToPost();

  MessageToPost(const MessageToPost& from);

  inline MessageToPost& operator=(const MessageToPost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageToPost& default_instance();

  void Swap(MessageToPost* other);

  // implements Message ----------------------------------------------

  MessageToPost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageToPost& from);
  void MergeFrom(const MessageToPost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string FromBoxId = 1;
  inline bool has_fromboxid() const;
  inline void clear_fromboxid();
  static const int kFromBoxIdFieldNumber = 1;
  inline const ::std::string& fromboxid() const;
  inline void set_fromboxid(const ::std::string& value);
  inline void set_fromboxid(const char* value);
  inline void set_fromboxid(const char* value, size_t size);
  inline ::std::string* mutable_fromboxid();
  inline ::std::string* release_fromboxid();
  inline void set_allocated_fromboxid(::std::string* fromboxid);

  // optional string ToBoxId = 2;
  inline bool has_toboxid() const;
  inline void clear_toboxid();
  static const int kToBoxIdFieldNumber = 2;
  inline const ::std::string& toboxid() const;
  inline void set_toboxid(const ::std::string& value);
  inline void set_toboxid(const char* value);
  inline void set_toboxid(const char* value, size_t size);
  inline ::std::string* mutable_toboxid();
  inline ::std::string* release_toboxid();
  inline void set_allocated_toboxid(::std::string* toboxid);

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment Invoices = 3;
  inline int invoices_size() const;
  inline void clear_invoices();
  static const int kInvoicesFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Events::XmlDocumentAttachment& invoices(int index) const;
  inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* mutable_invoices(int index);
  inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* add_invoices();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >&
      invoices() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >*
      mutable_invoices();

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment NonformalizedDocuments = 4;
  inline int nonformalizeddocuments_size() const;
  inline void clear_nonformalizeddocuments();
  static const int kNonformalizedDocumentsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Events::NonformalizedAttachment& nonformalizeddocuments(int index) const;
  inline ::Diadoc::Api::Proto::Events::NonformalizedAttachment* mutable_nonformalizeddocuments(int index);
  inline ::Diadoc::Api::Proto::Events::NonformalizedAttachment* add_nonformalizeddocuments();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment >&
      nonformalizeddocuments() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment >*
      mutable_nonformalizeddocuments();

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment Torg12Documents = 5;
  inline int torg12documents_size() const;
  inline void clear_torg12documents();
  static const int kTorg12DocumentsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Events::BasicDocumentAttachment& torg12documents(int index) const;
  inline ::Diadoc::Api::Proto::Events::BasicDocumentAttachment* mutable_torg12documents(int index);
  inline ::Diadoc::Api::Proto::Events::BasicDocumentAttachment* add_torg12documents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::BasicDocumentAttachment >&
      torg12documents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::BasicDocumentAttachment >*
      mutable_torg12documents();

  // repeated .Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment AcceptanceCertificates = 7;
  inline int acceptancecertificates_size() const;
  inline void clear_acceptancecertificates();
  static const int kAcceptanceCertificatesFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::Events::AcceptanceCertificateAttachment& acceptancecertificates(int index) const;
  inline ::Diadoc::Api::Proto::Events::AcceptanceCertificateAttachment* mutable_acceptancecertificates(int index);
  inline ::Diadoc::Api::Proto::Events::AcceptanceCertificateAttachment* add_acceptancecertificates();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::AcceptanceCertificateAttachment >&
      acceptancecertificates() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::AcceptanceCertificateAttachment >*
      mutable_acceptancecertificates();

  // repeated .Diadoc.Api.Proto.Events.StructuredDataAttachment StructuredDataAttachments = 8;
  inline int structureddataattachments_size() const;
  inline void clear_structureddataattachments();
  static const int kStructuredDataAttachmentsFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::Events::StructuredDataAttachment& structureddataattachments(int index) const;
  inline ::Diadoc::Api::Proto::Events::StructuredDataAttachment* mutable_structureddataattachments(int index);
  inline ::Diadoc::Api::Proto::Events::StructuredDataAttachment* add_structureddataattachments();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::StructuredDataAttachment >&
      structureddataattachments() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::StructuredDataAttachment >*
      mutable_structureddataattachments();

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment ProformaInvoices = 9;
  inline int proformainvoices_size() const;
  inline void clear_proformainvoices();
  static const int kProformaInvoicesFieldNumber = 9;
  inline const ::Diadoc::Api::Proto::Events::BasicDocumentAttachment& proformainvoices(int index) const;
  inline ::Diadoc::Api::Proto::Events::BasicDocumentAttachment* mutable_proformainvoices(int index);
  inline ::Diadoc::Api::Proto::Events::BasicDocumentAttachment* add_proformainvoices();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::BasicDocumentAttachment >&
      proformainvoices() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::BasicDocumentAttachment >*
      mutable_proformainvoices();

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlTorg12SellerTitles = 10;
  inline int xmltorg12sellertitles_size() const;
  inline void clear_xmltorg12sellertitles();
  static const int kXmlTorg12SellerTitlesFieldNumber = 10;
  inline const ::Diadoc::Api::Proto::Events::XmlDocumentAttachment& xmltorg12sellertitles(int index) const;
  inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* mutable_xmltorg12sellertitles(int index);
  inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* add_xmltorg12sellertitles();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >&
      xmltorg12sellertitles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >*
      mutable_xmltorg12sellertitles();

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlAcceptanceCertificateSellerTitles = 11;
  inline int xmlacceptancecertificatesellertitles_size() const;
  inline void clear_xmlacceptancecertificatesellertitles();
  static const int kXmlAcceptanceCertificateSellerTitlesFieldNumber = 11;
  inline const ::Diadoc::Api::Proto::Events::XmlDocumentAttachment& xmlacceptancecertificatesellertitles(int index) const;
  inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* mutable_xmlacceptancecertificatesellertitles(int index);
  inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* add_xmlacceptancecertificatesellertitles();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >&
      xmlacceptancecertificatesellertitles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >*
      mutable_xmlacceptancecertificatesellertitles();

  // optional string ToDepartmentId = 12;
  inline bool has_todepartmentid() const;
  inline void clear_todepartmentid();
  static const int kToDepartmentIdFieldNumber = 12;
  inline const ::std::string& todepartmentid() const;
  inline void set_todepartmentid(const ::std::string& value);
  inline void set_todepartmentid(const char* value);
  inline void set_todepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_todepartmentid();
  inline ::std::string* release_todepartmentid();
  inline void set_allocated_todepartmentid(::std::string* todepartmentid);

  // optional bool IsDraft = 13 [default = false];
  inline bool has_isdraft() const;
  inline void clear_isdraft();
  static const int kIsDraftFieldNumber = 13;
  inline bool isdraft() const;
  inline void set_isdraft(bool value);

  // optional bool LockDraft = 14 [default = false];
  inline bool has_lockdraft() const;
  inline void clear_lockdraft();
  static const int kLockDraftFieldNumber = 14;
  inline bool lockdraft() const;
  inline void set_lockdraft(bool value);

  // optional bool StrictDraftValidation = 15 [default = true];
  inline bool has_strictdraftvalidation() const;
  inline void clear_strictdraftvalidation();
  static const int kStrictDraftValidationFieldNumber = 15;
  inline bool strictdraftvalidation() const;
  inline void set_strictdraftvalidation(bool value);

  // optional bool IsInternal = 16 [default = false];
  inline bool has_isinternal() const;
  inline void clear_isinternal();
  static const int kIsInternalFieldNumber = 16;
  inline bool isinternal() const;
  inline void set_isinternal(bool value);

  // optional string FromDepartmentId = 17;
  inline bool has_fromdepartmentid() const;
  inline void clear_fromdepartmentid();
  static const int kFromDepartmentIdFieldNumber = 17;
  inline const ::std::string& fromdepartmentid() const;
  inline void set_fromdepartmentid(const ::std::string& value);
  inline void set_fromdepartmentid(const char* value);
  inline void set_fromdepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_fromdepartmentid();
  inline ::std::string* release_fromdepartmentid();
  inline void set_allocated_fromdepartmentid(::std::string* fromdepartmentid);

  // optional bool DelaySend = 18 [default = false];
  inline bool has_delaysend() const;
  inline void clear_delaysend();
  static const int kDelaySendFieldNumber = 18;
  inline bool delaysend() const;
  inline void set_delaysend(bool value);

  // repeated .Diadoc.Api.Proto.Events.PriceListAttachment PriceLists = 19;
  inline int pricelists_size() const;
  inline void clear_pricelists();
  static const int kPriceListsFieldNumber = 19;
  inline const ::Diadoc::Api::Proto::Events::PriceListAttachment& pricelists(int index) const;
  inline ::Diadoc::Api::Proto::Events::PriceListAttachment* mutable_pricelists(int index);
  inline ::Diadoc::Api::Proto::Events::PriceListAttachment* add_pricelists();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::PriceListAttachment >&
      pricelists() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::PriceListAttachment >*
      mutable_pricelists();

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment PriceListAgreements = 20;
  inline int pricelistagreements_size() const;
  inline void clear_pricelistagreements();
  static const int kPriceListAgreementsFieldNumber = 20;
  inline const ::Diadoc::Api::Proto::Events::NonformalizedAttachment& pricelistagreements(int index) const;
  inline ::Diadoc::Api::Proto::Events::NonformalizedAttachment* mutable_pricelistagreements(int index);
  inline ::Diadoc::Api::Proto::Events::NonformalizedAttachment* add_pricelistagreements();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment >&
      pricelistagreements() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment >*
      mutable_pricelistagreements();

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment CertificateRegistries = 21;
  inline int certificateregistries_size() const;
  inline void clear_certificateregistries();
  static const int kCertificateRegistriesFieldNumber = 21;
  inline const ::Diadoc::Api::Proto::Events::NonformalizedAttachment& certificateregistries(int index) const;
  inline ::Diadoc::Api::Proto::Events::NonformalizedAttachment* mutable_certificateregistries(int index);
  inline ::Diadoc::Api::Proto::Events::NonformalizedAttachment* add_certificateregistries();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment >&
      certificateregistries() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment >*
      mutable_certificateregistries();

  // repeated .Diadoc.Api.Proto.Events.ReconciliationActAttachment ReconciliationActs = 22;
  inline int reconciliationacts_size() const;
  inline void clear_reconciliationacts();
  static const int kReconciliationActsFieldNumber = 22;
  inline const ::Diadoc::Api::Proto::Events::ReconciliationActAttachment& reconciliationacts(int index) const;
  inline ::Diadoc::Api::Proto::Events::ReconciliationActAttachment* mutable_reconciliationacts(int index);
  inline ::Diadoc::Api::Proto::Events::ReconciliationActAttachment* add_reconciliationacts();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReconciliationActAttachment >&
      reconciliationacts() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReconciliationActAttachment >*
      mutable_reconciliationacts();

  // repeated .Diadoc.Api.Proto.Events.ContractAttachment Contracts = 23;
  inline int contracts_size() const;
  inline void clear_contracts();
  static const int kContractsFieldNumber = 23;
  inline const ::Diadoc::Api::Proto::Events::ContractAttachment& contracts(int index) const;
  inline ::Diadoc::Api::Proto::Events::ContractAttachment* mutable_contracts(int index);
  inline ::Diadoc::Api::Proto::Events::ContractAttachment* add_contracts();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ContractAttachment >&
      contracts() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ContractAttachment >*
      mutable_contracts();

  // repeated .Diadoc.Api.Proto.Events.Torg13Attachment Torg13Documents = 24;
  inline int torg13documents_size() const;
  inline void clear_torg13documents();
  static const int kTorg13DocumentsFieldNumber = 24;
  inline const ::Diadoc::Api::Proto::Events::Torg13Attachment& torg13documents(int index) const;
  inline ::Diadoc::Api::Proto::Events::Torg13Attachment* mutable_torg13documents(int index);
  inline ::Diadoc::Api::Proto::Events::Torg13Attachment* add_torg13documents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::Torg13Attachment >&
      torg13documents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::Torg13Attachment >*
      mutable_torg13documents();

  // repeated .Diadoc.Api.Proto.Events.ServiceDetailsAttachment ServiceDetailsDocuments = 25;
  inline int servicedetailsdocuments_size() const;
  inline void clear_servicedetailsdocuments();
  static const int kServiceDetailsDocumentsFieldNumber = 25;
  inline const ::Diadoc::Api::Proto::Events::ServiceDetailsAttachment& servicedetailsdocuments(int index) const;
  inline ::Diadoc::Api::Proto::Events::ServiceDetailsAttachment* mutable_servicedetailsdocuments(int index);
  inline ::Diadoc::Api::Proto::Events::ServiceDetailsAttachment* add_servicedetailsdocuments();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ServiceDetailsAttachment >&
      servicedetailsdocuments() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ServiceDetailsAttachment >*
      mutable_servicedetailsdocuments();

  // optional string ProxyBoxId = 26;
  inline bool has_proxyboxid() const;
  inline void clear_proxyboxid();
  static const int kProxyBoxIdFieldNumber = 26;
  inline const ::std::string& proxyboxid() const;
  inline void set_proxyboxid(const ::std::string& value);
  inline void set_proxyboxid(const char* value);
  inline void set_proxyboxid(const char* value, size_t size);
  inline ::std::string* mutable_proxyboxid();
  inline ::std::string* release_proxyboxid();
  inline void set_allocated_proxyboxid(::std::string* proxyboxid);

  // optional string ProxyDepartmentId = 27;
  inline bool has_proxydepartmentid() const;
  inline void clear_proxydepartmentid();
  static const int kProxyDepartmentIdFieldNumber = 27;
  inline const ::std::string& proxydepartmentid() const;
  inline void set_proxydepartmentid(const ::std::string& value);
  inline void set_proxydepartmentid(const char* value);
  inline void set_proxydepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_proxydepartmentid();
  inline ::std::string* release_proxydepartmentid();
  inline void set_allocated_proxydepartmentid(::std::string* proxydepartmentid);

  // repeated .Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment EncryptedInvoices = 28;
  inline int encryptedinvoices_size() const;
  inline void clear_encryptedinvoices();
  static const int kEncryptedInvoicesFieldNumber = 28;
  inline const ::Diadoc::Api::Proto::Events::EncryptedInvoiceAttachment& encryptedinvoices(int index) const;
  inline ::Diadoc::Api::Proto::Events::EncryptedInvoiceAttachment* mutable_encryptedinvoices(int index);
  inline ::Diadoc::Api::Proto::Events::EncryptedInvoiceAttachment* add_encryptedinvoices();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedInvoiceAttachment >&
      encryptedinvoices() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedInvoiceAttachment >*
      mutable_encryptedinvoices();

  // repeated .Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment EncryptedXmlTorg12SellerTitles = 29;
  inline int encryptedxmltorg12sellertitles_size() const;
  inline void clear_encryptedxmltorg12sellertitles();
  static const int kEncryptedXmlTorg12SellerTitlesFieldNumber = 29;
  inline const ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment& encryptedxmltorg12sellertitles(int index) const;
  inline ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment* mutable_encryptedxmltorg12sellertitles(int index);
  inline ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment* add_encryptedxmltorg12sellertitles();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment >&
      encryptedxmltorg12sellertitles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment >*
      mutable_encryptedxmltorg12sellertitles();

  // repeated .Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment EncryptedXmlAcceptanceCertificateSellerTitles = 30;
  inline int encryptedxmlacceptancecertificatesellertitles_size() const;
  inline void clear_encryptedxmlacceptancecertificatesellertitles();
  static const int kEncryptedXmlAcceptanceCertificateSellerTitlesFieldNumber = 30;
  inline const ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment& encryptedxmlacceptancecertificatesellertitles(int index) const;
  inline ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment* mutable_encryptedxmlacceptancecertificatesellertitles(int index);
  inline ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment* add_encryptedxmlacceptancecertificatesellertitles();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment >&
      encryptedxmlacceptancecertificatesellertitles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment >*
      mutable_encryptedxmlacceptancecertificatesellertitles();

  // repeated .Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment SupplementaryAgreements = 31;
  inline int supplementaryagreements_size() const;
  inline void clear_supplementaryagreements();
  static const int kSupplementaryAgreementsFieldNumber = 31;
  inline const ::Diadoc::Api::Proto::Events::SupplementaryAgreementAttachment& supplementaryagreements(int index) const;
  inline ::Diadoc::Api::Proto::Events::SupplementaryAgreementAttachment* mutable_supplementaryagreements(int index);
  inline ::Diadoc::Api::Proto::Events::SupplementaryAgreementAttachment* add_supplementaryagreements();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::SupplementaryAgreementAttachment >&
      supplementaryagreements() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::SupplementaryAgreementAttachment >*
      mutable_supplementaryagreements();

  // optional bool LockPacket = 32 [default = false];
  inline bool has_lockpacket() const;
  inline void clear_lockpacket();
  static const int kLockPacketFieldNumber = 32;
  inline bool lockpacket() const;
  inline void set_lockpacket(bool value);

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment UniversalTransferDocumentSellerTitles = 33;
  inline int universaltransferdocumentsellertitles_size() const;
  inline void clear_universaltransferdocumentsellertitles();
  static const int kUniversalTransferDocumentSellerTitlesFieldNumber = 33;
  inline const ::Diadoc::Api::Proto::Events::XmlDocumentAttachment& universaltransferdocumentsellertitles(int index) const;
  inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* mutable_universaltransferdocumentsellertitles(int index);
  inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* add_universaltransferdocumentsellertitles();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >&
      universaltransferdocumentsellertitles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >*
      mutable_universaltransferdocumentsellertitles();

  // repeated .Diadoc.Api.Proto.Events.DocumentAttachment DocumentAttachments = 34;
  inline int documentattachments_size() const;
  inline void clear_documentattachments();
  static const int kDocumentAttachmentsFieldNumber = 34;
  inline const ::Diadoc::Api::Proto::Events::DocumentAttachment& documentattachments(int index) const;
  inline ::Diadoc::Api::Proto::Events::DocumentAttachment* mutable_documentattachments(int index);
  inline ::Diadoc::Api::Proto::Events::DocumentAttachment* add_documentattachments();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentAttachment >&
      documentattachments() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentAttachment >*
      mutable_documentattachments();

  // optional .Diadoc.Api.Proto.LockMode LockMode = 35 [default = None];
  inline bool has_lockmode() const;
  inline void clear_lockmode();
  static const int kLockModeFieldNumber = 35;
  inline ::Diadoc::Api::Proto::LockMode lockmode() const;
  inline void set_lockmode(::Diadoc::Api::Proto::LockMode value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.MessageToPost)
 private:
  inline void set_has_fromboxid();
  inline void clear_has_fromboxid();
  inline void set_has_toboxid();
  inline void clear_has_toboxid();
  inline void set_has_todepartmentid();
  inline void clear_has_todepartmentid();
  inline void set_has_isdraft();
  inline void clear_has_isdraft();
  inline void set_has_lockdraft();
  inline void clear_has_lockdraft();
  inline void set_has_strictdraftvalidation();
  inline void clear_has_strictdraftvalidation();
  inline void set_has_isinternal();
  inline void clear_has_isinternal();
  inline void set_has_fromdepartmentid();
  inline void clear_has_fromdepartmentid();
  inline void set_has_delaysend();
  inline void clear_has_delaysend();
  inline void set_has_proxyboxid();
  inline void clear_has_proxyboxid();
  inline void set_has_proxydepartmentid();
  inline void clear_has_proxydepartmentid();
  inline void set_has_lockpacket();
  inline void clear_has_lockpacket();
  inline void set_has_lockmode();
  inline void clear_has_lockmode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* fromboxid_;
  ::std::string* toboxid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment > invoices_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment > nonformalizeddocuments_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::BasicDocumentAttachment > torg12documents_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::AcceptanceCertificateAttachment > acceptancecertificates_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::StructuredDataAttachment > structureddataattachments_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::BasicDocumentAttachment > proformainvoices_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment > xmltorg12sellertitles_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment > xmlacceptancecertificatesellertitles_;
  ::std::string* todepartmentid_;
  ::std::string* fromdepartmentid_;
  bool isdraft_;
  bool lockdraft_;
  bool strictdraftvalidation_;
  bool isinternal_;
  bool delaysend_;
  bool lockpacket_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::PriceListAttachment > pricelists_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment > pricelistagreements_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment > certificateregistries_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReconciliationActAttachment > reconciliationacts_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ContractAttachment > contracts_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::Torg13Attachment > torg13documents_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ServiceDetailsAttachment > servicedetailsdocuments_;
  ::std::string* proxyboxid_;
  ::std::string* proxydepartmentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedInvoiceAttachment > encryptedinvoices_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment > encryptedxmltorg12sellertitles_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment > encryptedxmlacceptancecertificatesellertitles_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::SupplementaryAgreementAttachment > supplementaryagreements_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment > universaltransferdocumentsellertitles_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentAttachment > documentattachments_;
  int lockmode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static MessageToPost* default_instance_;
};
// -------------------------------------------------------------------

class EncryptedXmlDocumentAttachment : public ::google::protobuf::Message {
 public:
  EncryptedXmlDocumentAttachment();
  virtual ~EncryptedXmlDocumentAttachment();

  EncryptedXmlDocumentAttachment(const EncryptedXmlDocumentAttachment& from);

  inline EncryptedXmlDocumentAttachment& operator=(const EncryptedXmlDocumentAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncryptedXmlDocumentAttachment& default_instance();

  void Swap(EncryptedXmlDocumentAttachment* other);

  // implements Message ----------------------------------------------

  EncryptedXmlDocumentAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncryptedXmlDocumentAttachment& from);
  void MergeFrom(const EncryptedXmlDocumentAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // optional string CustomDocumentId = 6;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 6;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 7;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // required .Diadoc.Api.Proto.Events.EncryptedDocumentMetadata Metadata = 8;
  inline bool has_metadata() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata& metadata() const;
  inline ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* mutable_metadata();
  inline ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* release_metadata();
  inline void set_allocated_metadata(::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* metadata);

  // required .Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata XmlBasicMetadata = 9;
  inline bool has_xmlbasicmetadata() const;
  inline void clear_xmlbasicmetadata();
  static const int kXmlBasicMetadataFieldNumber = 9;
  inline const ::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata& xmlbasicmetadata() const;
  inline ::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata* mutable_xmlbasicmetadata();
  inline ::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata* release_xmlbasicmetadata();
  inline void set_allocated_xmlbasicmetadata(::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata* xmlbasicmetadata);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_metadata();
  inline void clear_has_metadata();
  inline void set_has_xmlbasicmetadata();
  inline void clear_has_xmlbasicmetadata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* customdocumentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* metadata_;
  ::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata* xmlbasicmetadata_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static EncryptedXmlDocumentAttachment* default_instance_;
};
// -------------------------------------------------------------------

class EncryptedInvoiceAttachment : public ::google::protobuf::Message {
 public:
  EncryptedInvoiceAttachment();
  virtual ~EncryptedInvoiceAttachment();

  EncryptedInvoiceAttachment(const EncryptedInvoiceAttachment& from);

  inline EncryptedInvoiceAttachment& operator=(const EncryptedInvoiceAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncryptedInvoiceAttachment& default_instance();

  void Swap(EncryptedInvoiceAttachment* other);

  // implements Message ----------------------------------------------

  EncryptedInvoiceAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncryptedInvoiceAttachment& from);
  void MergeFrom(const EncryptedInvoiceAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // optional string CustomDocumentId = 6;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 6;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 7;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // required .Diadoc.Api.Proto.Events.EncryptedDocumentMetadata Metadata = 8;
  inline bool has_metadata() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata& metadata() const;
  inline ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* mutable_metadata();
  inline ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* release_metadata();
  inline void set_allocated_metadata(::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* metadata);

  // optional .Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata InvoiceMetadata = 9;
  inline bool has_invoicemetadata() const;
  inline void clear_invoicemetadata();
  static const int kInvoiceMetadataFieldNumber = 9;
  inline const ::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata& invoicemetadata() const;
  inline ::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata* mutable_invoicemetadata();
  inline ::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata* release_invoicemetadata();
  inline void set_allocated_invoicemetadata(::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata* invoicemetadata);

  // optional .Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata InvoiceCorrectionMetadata = 10;
  inline bool has_invoicecorrectionmetadata() const;
  inline void clear_invoicecorrectionmetadata();
  static const int kInvoiceCorrectionMetadataFieldNumber = 10;
  inline const ::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata& invoicecorrectionmetadata() const;
  inline ::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata* mutable_invoicecorrectionmetadata();
  inline ::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata* release_invoicecorrectionmetadata();
  inline void set_allocated_invoicecorrectionmetadata(::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata* invoicecorrectionmetadata);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_metadata();
  inline void clear_has_metadata();
  inline void set_has_invoicemetadata();
  inline void clear_has_invoicemetadata();
  inline void set_has_invoicecorrectionmetadata();
  inline void clear_has_invoicecorrectionmetadata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* customdocumentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* metadata_;
  ::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata* invoicemetadata_;
  ::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata* invoicecorrectionmetadata_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static EncryptedInvoiceAttachment* default_instance_;
};
// -------------------------------------------------------------------

class EncryptedDocumentMetadata : public ::google::protobuf::Message {
 public:
  EncryptedDocumentMetadata();
  virtual ~EncryptedDocumentMetadata();

  EncryptedDocumentMetadata(const EncryptedDocumentMetadata& from);

  inline EncryptedDocumentMetadata& operator=(const EncryptedDocumentMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncryptedDocumentMetadata& default_instance();

  void Swap(EncryptedDocumentMetadata* other);

  // implements Message ----------------------------------------------

  EncryptedDocumentMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncryptedDocumentMetadata& from);
  void MergeFrom(const EncryptedDocumentMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string FileId = 1;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 1;
  inline const ::std::string& fileid() const;
  inline void set_fileid(const ::std::string& value);
  inline void set_fileid(const char* value);
  inline void set_fileid(const char* value, size_t size);
  inline ::std::string* mutable_fileid();
  inline ::std::string* release_fileid();
  inline void set_allocated_fileid(::std::string* fileid);

  // required string BuyerFnsParticipantId = 2;
  inline bool has_buyerfnsparticipantid() const;
  inline void clear_buyerfnsparticipantid();
  static const int kBuyerFnsParticipantIdFieldNumber = 2;
  inline const ::std::string& buyerfnsparticipantid() const;
  inline void set_buyerfnsparticipantid(const ::std::string& value);
  inline void set_buyerfnsparticipantid(const char* value);
  inline void set_buyerfnsparticipantid(const char* value, size_t size);
  inline ::std::string* mutable_buyerfnsparticipantid();
  inline ::std::string* release_buyerfnsparticipantid();
  inline void set_allocated_buyerfnsparticipantid(::std::string* buyerfnsparticipantid);

  // required string SenderFnsParticipantId = 3;
  inline bool has_senderfnsparticipantid() const;
  inline void clear_senderfnsparticipantid();
  static const int kSenderFnsParticipantIdFieldNumber = 3;
  inline const ::std::string& senderfnsparticipantid() const;
  inline void set_senderfnsparticipantid(const ::std::string& value);
  inline void set_senderfnsparticipantid(const char* value);
  inline void set_senderfnsparticipantid(const char* value, size_t size);
  inline ::std::string* mutable_senderfnsparticipantid();
  inline ::std::string* release_senderfnsparticipantid();
  inline void set_allocated_senderfnsparticipantid(::std::string* senderfnsparticipantid);

  // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 4;
  inline bool has_documentdateandnumber() const;
  inline void clear_documentdateandnumber();
  static const int kDocumentDateAndNumberFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber& documentdateandnumber() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* mutable_documentdateandnumber();
  inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* release_documentdateandnumber();
  inline void set_allocated_documentdateandnumber(::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* documentdateandnumber);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata)
 private:
  inline void set_has_fileid();
  inline void clear_has_fileid();
  inline void set_has_buyerfnsparticipantid();
  inline void clear_has_buyerfnsparticipantid();
  inline void set_has_senderfnsparticipantid();
  inline void clear_has_senderfnsparticipantid();
  inline void set_has_documentdateandnumber();
  inline void clear_has_documentdateandnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fileid_;
  ::std::string* buyerfnsparticipantid_;
  ::std::string* senderfnsparticipantid_;
  ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* documentdateandnumber_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static EncryptedDocumentMetadata* default_instance_;
};
// -------------------------------------------------------------------

class EncryptedXmlBasicDocumentMetadata : public ::google::protobuf::Message {
 public:
  EncryptedXmlBasicDocumentMetadata();
  virtual ~EncryptedXmlBasicDocumentMetadata();

  EncryptedXmlBasicDocumentMetadata(const EncryptedXmlBasicDocumentMetadata& from);

  inline EncryptedXmlBasicDocumentMetadata& operator=(const EncryptedXmlBasicDocumentMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncryptedXmlBasicDocumentMetadata& default_instance();

  void Swap(EncryptedXmlBasicDocumentMetadata* other);

  // implements Message ----------------------------------------------

  EncryptedXmlBasicDocumentMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncryptedXmlBasicDocumentMetadata& from);
  void MergeFrom(const EncryptedXmlBasicDocumentMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string FormationDate = 1;
  inline bool has_formationdate() const;
  inline void clear_formationdate();
  static const int kFormationDateFieldNumber = 1;
  inline const ::std::string& formationdate() const;
  inline void set_formationdate(const ::std::string& value);
  inline void set_formationdate(const char* value);
  inline void set_formationdate(const char* value, size_t size);
  inline ::std::string* mutable_formationdate();
  inline ::std::string* release_formationdate();
  inline void set_allocated_formationdate(::std::string* formationdate);

  // required string FormationTime = 2;
  inline bool has_formationtime() const;
  inline void clear_formationtime();
  static const int kFormationTimeFieldNumber = 2;
  inline const ::std::string& formationtime() const;
  inline void set_formationtime(const ::std::string& value);
  inline void set_formationtime(const char* value);
  inline void set_formationtime(const char* value, size_t size);
  inline ::std::string* mutable_formationtime();
  inline ::std::string* release_formationtime();
  inline void set_allocated_formationtime(::std::string* formationtime);

  // optional string DocumentName = 3;
  inline bool has_documentname() const;
  inline void clear_documentname();
  static const int kDocumentNameFieldNumber = 3;
  inline const ::std::string& documentname() const;
  inline void set_documentname(const ::std::string& value);
  inline void set_documentname(const char* value);
  inline void set_documentname(const char* value, size_t size);
  inline ::std::string* mutable_documentname();
  inline ::std::string* release_documentname();
  inline void set_allocated_documentname(::std::string* documentname);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata)
 private:
  inline void set_has_formationdate();
  inline void clear_has_formationdate();
  inline void set_has_formationtime();
  inline void clear_has_formationtime();
  inline void set_has_documentname();
  inline void clear_has_documentname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* formationdate_;
  ::std::string* formationtime_;
  ::std::string* documentname_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static EncryptedXmlBasicDocumentMetadata* default_instance_;
};
// -------------------------------------------------------------------

class EncryptedInvoiceMetadata : public ::google::protobuf::Message {
 public:
  EncryptedInvoiceMetadata();
  virtual ~EncryptedInvoiceMetadata();

  EncryptedInvoiceMetadata(const EncryptedInvoiceMetadata& from);

  inline EncryptedInvoiceMetadata& operator=(const EncryptedInvoiceMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncryptedInvoiceMetadata& default_instance();

  void Swap(EncryptedInvoiceMetadata* other);

  // implements Message ----------------------------------------------

  EncryptedInvoiceMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncryptedInvoiceMetadata& from);
  void MergeFrom(const EncryptedInvoiceMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber RevisionDateAndNumber = 1;
  inline bool has_revisiondateandnumber() const;
  inline void clear_revisiondateandnumber();
  static const int kRevisionDateAndNumberFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber& revisiondateandnumber() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* mutable_revisiondateandnumber();
  inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* release_revisiondateandnumber();
  inline void set_allocated_revisiondateandnumber(::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* revisiondateandnumber);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata)
 private:
  inline void set_has_revisiondateandnumber();
  inline void clear_has_revisiondateandnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* revisiondateandnumber_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static EncryptedInvoiceMetadata* default_instance_;
};
// -------------------------------------------------------------------

class EncryptedInvoiceCorrectionMetadata : public ::google::protobuf::Message {
 public:
  EncryptedInvoiceCorrectionMetadata();
  virtual ~EncryptedInvoiceCorrectionMetadata();

  EncryptedInvoiceCorrectionMetadata(const EncryptedInvoiceCorrectionMetadata& from);

  inline EncryptedInvoiceCorrectionMetadata& operator=(const EncryptedInvoiceCorrectionMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncryptedInvoiceCorrectionMetadata& default_instance();

  void Swap(EncryptedInvoiceCorrectionMetadata* other);

  // implements Message ----------------------------------------------

  EncryptedInvoiceCorrectionMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncryptedInvoiceCorrectionMetadata& from);
  void MergeFrom(const EncryptedInvoiceCorrectionMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 1;
  inline bool has_originalinvoicedateandnumber() const;
  inline void clear_originalinvoicedateandnumber();
  static const int kOriginalInvoiceDateAndNumberFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber& originalinvoicedateandnumber() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* mutable_originalinvoicedateandnumber();
  inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* release_originalinvoicedateandnumber();
  inline void set_allocated_originalinvoicedateandnumber(::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* originalinvoicedateandnumber);

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceRevisionDateAndNumber = 2;
  inline bool has_originalinvoicerevisiondateandnumber() const;
  inline void clear_originalinvoicerevisiondateandnumber();
  static const int kOriginalInvoiceRevisionDateAndNumberFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber& originalinvoicerevisiondateandnumber() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* mutable_originalinvoicerevisiondateandnumber();
  inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* release_originalinvoicerevisiondateandnumber();
  inline void set_allocated_originalinvoicerevisiondateandnumber(::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* originalinvoicerevisiondateandnumber);

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber InvoiceCorrectionRevisionDateAndNumber = 3;
  inline bool has_invoicecorrectionrevisiondateandnumber() const;
  inline void clear_invoicecorrectionrevisiondateandnumber();
  static const int kInvoiceCorrectionRevisionDateAndNumberFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber& invoicecorrectionrevisiondateandnumber() const;
  inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* mutable_invoicecorrectionrevisiondateandnumber();
  inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* release_invoicecorrectionrevisiondateandnumber();
  inline void set_allocated_invoicecorrectionrevisiondateandnumber(::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* invoicecorrectionrevisiondateandnumber);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata)
 private:
  inline void set_has_originalinvoicedateandnumber();
  inline void clear_has_originalinvoicedateandnumber();
  inline void set_has_originalinvoicerevisiondateandnumber();
  inline void clear_has_originalinvoicerevisiondateandnumber();
  inline void set_has_invoicecorrectionrevisiondateandnumber();
  inline void clear_has_invoicecorrectionrevisiondateandnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* originalinvoicedateandnumber_;
  ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* originalinvoicerevisiondateandnumber_;
  ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* invoicecorrectionrevisiondateandnumber_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static EncryptedInvoiceCorrectionMetadata* default_instance_;
};
// -------------------------------------------------------------------

class XmlDocumentAttachment : public ::google::protobuf::Message {
 public:
  XmlDocumentAttachment();
  virtual ~XmlDocumentAttachment();

  XmlDocumentAttachment(const XmlDocumentAttachment& from);

  inline XmlDocumentAttachment& operator=(const XmlDocumentAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const XmlDocumentAttachment& default_instance();

  void Swap(XmlDocumentAttachment* other);

  // implements Message ----------------------------------------------

  XmlDocumentAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const XmlDocumentAttachment& from);
  void MergeFrom(const XmlDocumentAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // optional string CustomDocumentId = 6;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 6;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // optional bool NeedReceipt = 7 [default = false];
  inline bool has_needreceipt() const;
  inline void clear_needreceipt();
  static const int kNeedReceiptFieldNumber = 7;
  inline bool needreceipt() const;
  inline void set_needreceipt(bool value);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 8;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.XmlDocumentAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_needreceipt();
  inline void clear_has_needreceipt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* customdocumentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  bool needreceipt_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static XmlDocumentAttachment* default_instance_;
};
// -------------------------------------------------------------------

class NonformalizedAttachment : public ::google::protobuf::Message {
 public:
  NonformalizedAttachment();
  virtual ~NonformalizedAttachment();

  NonformalizedAttachment(const NonformalizedAttachment& from);

  inline NonformalizedAttachment& operator=(const NonformalizedAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NonformalizedAttachment& default_instance();

  void Swap(NonformalizedAttachment* other);

  // implements Message ----------------------------------------------

  NonformalizedAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NonformalizedAttachment& from);
  void MergeFrom(const NonformalizedAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // optional bool NeedRecipientSignature = 4 [default = false];
  inline bool has_needrecipientsignature() const;
  inline void clear_needrecipientsignature();
  static const int kNeedRecipientSignatureFieldNumber = 4;
  inline bool needrecipientsignature() const;
  inline void set_needrecipientsignature(bool value);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // optional string DocumentDate = 7;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 7;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  inline void set_allocated_documentdate(::std::string* documentdate);

  // optional string DocumentNumber = 8;
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 8;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  inline void set_allocated_documentnumber(::std::string* documentnumber);

  // optional string CustomDocumentId = 9;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 9;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // optional bool NeedReceipt = 10 [default = false];
  inline bool has_needreceipt() const;
  inline void clear_needreceipt();
  static const int kNeedReceiptFieldNumber = 10;
  inline bool needreceipt() const;
  inline void set_needreceipt(bool value);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 11;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.NonformalizedAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_needrecipientsignature();
  inline void clear_has_needrecipientsignature();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_needreceipt();
  inline void clear_has_needreceipt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* filename_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::std::string* customdocumentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  bool needrecipientsignature_;
  bool needreceipt_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static NonformalizedAttachment* default_instance_;
};
// -------------------------------------------------------------------

class BasicDocumentAttachment : public ::google::protobuf::Message {
 public:
  BasicDocumentAttachment();
  virtual ~BasicDocumentAttachment();

  BasicDocumentAttachment(const BasicDocumentAttachment& from);

  inline BasicDocumentAttachment& operator=(const BasicDocumentAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicDocumentAttachment& default_instance();

  void Swap(BasicDocumentAttachment* other);

  // implements Message ----------------------------------------------

  BasicDocumentAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BasicDocumentAttachment& from);
  void MergeFrom(const BasicDocumentAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // required string DocumentDate = 6;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 6;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  inline void set_allocated_documentdate(::std::string* documentdate);

  // required string DocumentNumber = 7;
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 7;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  inline void set_allocated_documentnumber(::std::string* documentnumber);

  // required string Total = 8;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 8;
  inline const ::std::string& total() const;
  inline void set_total(const ::std::string& value);
  inline void set_total(const char* value);
  inline void set_total(const char* value, size_t size);
  inline ::std::string* mutable_total();
  inline ::std::string* release_total();
  inline void set_allocated_total(::std::string* total);

  // optional string CustomDocumentId = 9;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 9;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // optional string Vat = 10;
  inline bool has_vat() const;
  inline void clear_vat();
  static const int kVatFieldNumber = 10;
  inline const ::std::string& vat() const;
  inline void set_vat(const ::std::string& value);
  inline void set_vat(const char* value);
  inline void set_vat(const char* value, size_t size);
  inline ::std::string* mutable_vat();
  inline ::std::string* release_vat();
  inline void set_allocated_vat(::std::string* vat);

  // optional string Grounds = 11;
  inline bool has_grounds() const;
  inline void clear_grounds();
  static const int kGroundsFieldNumber = 11;
  inline const ::std::string& grounds() const;
  inline void set_grounds(const ::std::string& value);
  inline void set_grounds(const char* value);
  inline void set_grounds(const char* value, size_t size);
  inline ::std::string* mutable_grounds();
  inline ::std::string* release_grounds();
  inline void set_allocated_grounds(::std::string* grounds);

  // optional bool NeedReceipt = 12 [default = false];
  inline bool has_needreceipt() const;
  inline void clear_needreceipt();
  static const int kNeedReceiptFieldNumber = 12;
  inline bool needreceipt() const;
  inline void set_needreceipt(bool value);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 13;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.BasicDocumentAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_vat();
  inline void clear_has_vat();
  inline void set_has_grounds();
  inline void clear_has_grounds();
  inline void set_has_needreceipt();
  inline void clear_has_needreceipt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* filename_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::std::string* total_;
  ::std::string* customdocumentid_;
  ::std::string* vat_;
  ::std::string* grounds_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  bool needreceipt_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static BasicDocumentAttachment* default_instance_;
};
// -------------------------------------------------------------------

class Torg13Attachment : public ::google::protobuf::Message {
 public:
  Torg13Attachment();
  virtual ~Torg13Attachment();

  Torg13Attachment(const Torg13Attachment& from);

  inline Torg13Attachment& operator=(const Torg13Attachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Torg13Attachment& default_instance();

  void Swap(Torg13Attachment* other);

  // implements Message ----------------------------------------------

  Torg13Attachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Torg13Attachment& from);
  void MergeFrom(const Torg13Attachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // required string DocumentDate = 6;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 6;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  inline void set_allocated_documentdate(::std::string* documentdate);

  // required string DocumentNumber = 7;
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 7;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  inline void set_allocated_documentnumber(::std::string* documentnumber);

  // required string Total = 8;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 8;
  inline const ::std::string& total() const;
  inline void set_total(const ::std::string& value);
  inline void set_total(const char* value);
  inline void set_total(const char* value, size_t size);
  inline ::std::string* mutable_total();
  inline ::std::string* release_total();
  inline void set_allocated_total(::std::string* total);

  // optional string CustomDocumentId = 9;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 9;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // optional string Grounds = 11;
  inline bool has_grounds() const;
  inline void clear_grounds();
  static const int kGroundsFieldNumber = 11;
  inline const ::std::string& grounds() const;
  inline void set_grounds(const ::std::string& value);
  inline void set_grounds(const char* value);
  inline void set_grounds(const char* value, size_t size);
  inline ::std::string* mutable_grounds();
  inline ::std::string* release_grounds();
  inline void set_allocated_grounds(::std::string* grounds);

  // optional bool NeedReceipt = 12 [default = false];
  inline bool has_needreceipt() const;
  inline void clear_needreceipt();
  static const int kNeedReceiptFieldNumber = 12;
  inline bool needreceipt() const;
  inline void set_needreceipt(bool value);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 13;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.Torg13Attachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_grounds();
  inline void clear_has_grounds();
  inline void set_has_needreceipt();
  inline void clear_has_needreceipt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* filename_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::std::string* total_;
  ::std::string* customdocumentid_;
  ::std::string* grounds_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  bool needreceipt_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static Torg13Attachment* default_instance_;
};
// -------------------------------------------------------------------

class AcceptanceCertificateAttachment : public ::google::protobuf::Message {
 public:
  AcceptanceCertificateAttachment();
  virtual ~AcceptanceCertificateAttachment();

  AcceptanceCertificateAttachment(const AcceptanceCertificateAttachment& from);

  inline AcceptanceCertificateAttachment& operator=(const AcceptanceCertificateAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptanceCertificateAttachment& default_instance();

  void Swap(AcceptanceCertificateAttachment* other);

  // implements Message ----------------------------------------------

  AcceptanceCertificateAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptanceCertificateAttachment& from);
  void MergeFrom(const AcceptanceCertificateAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // required string DocumentDate = 6;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 6;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  inline void set_allocated_documentdate(::std::string* documentdate);

  // optional string DocumentNumber = 7 [default = ""];
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 7;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  inline void set_allocated_documentnumber(::std::string* documentnumber);

  // required string Total = 8;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 8;
  inline const ::std::string& total() const;
  inline void set_total(const ::std::string& value);
  inline void set_total(const char* value);
  inline void set_total(const char* value, size_t size);
  inline ::std::string* mutable_total();
  inline ::std::string* release_total();
  inline void set_allocated_total(::std::string* total);

  // optional string CustomDocumentId = 9;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 9;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // optional string Vat = 10;
  inline bool has_vat() const;
  inline void clear_vat();
  static const int kVatFieldNumber = 10;
  inline const ::std::string& vat() const;
  inline void set_vat(const ::std::string& value);
  inline void set_vat(const char* value);
  inline void set_vat(const char* value, size_t size);
  inline ::std::string* mutable_vat();
  inline ::std::string* release_vat();
  inline void set_allocated_vat(::std::string* vat);

  // optional string Grounds = 11;
  inline bool has_grounds() const;
  inline void clear_grounds();
  static const int kGroundsFieldNumber = 11;
  inline const ::std::string& grounds() const;
  inline void set_grounds(const ::std::string& value);
  inline void set_grounds(const char* value);
  inline void set_grounds(const char* value, size_t size);
  inline ::std::string* mutable_grounds();
  inline ::std::string* release_grounds();
  inline void set_allocated_grounds(::std::string* grounds);

  // optional bool NeedReceipt = 12 [default = false];
  inline bool has_needreceipt() const;
  inline void clear_needreceipt();
  static const int kNeedReceiptFieldNumber = 12;
  inline bool needreceipt() const;
  inline void set_needreceipt(bool value);

  // optional bool NeedRecipientSignature = 13 [default = true];
  inline bool has_needrecipientsignature() const;
  inline void clear_needrecipientsignature();
  static const int kNeedRecipientSignatureFieldNumber = 13;
  inline bool needrecipientsignature() const;
  inline void set_needrecipientsignature(bool value);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 14;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 14;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_vat();
  inline void clear_has_vat();
  inline void set_has_grounds();
  inline void clear_has_grounds();
  inline void set_has_needreceipt();
  inline void clear_has_needreceipt();
  inline void set_has_needrecipientsignature();
  inline void clear_has_needrecipientsignature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* filename_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::std::string* total_;
  ::std::string* customdocumentid_;
  ::std::string* vat_;
  ::std::string* grounds_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  bool needreceipt_;
  bool needrecipientsignature_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static AcceptanceCertificateAttachment* default_instance_;
};
// -------------------------------------------------------------------

class TrustConnectionRequestAttachment : public ::google::protobuf::Message {
 public:
  TrustConnectionRequestAttachment();
  virtual ~TrustConnectionRequestAttachment();

  TrustConnectionRequestAttachment(const TrustConnectionRequestAttachment& from);

  inline TrustConnectionRequestAttachment& operator=(const TrustConnectionRequestAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrustConnectionRequestAttachment& default_instance();

  void Swap(TrustConnectionRequestAttachment* other);

  // implements Message ----------------------------------------------

  TrustConnectionRequestAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrustConnectionRequestAttachment& from);
  void MergeFrom(const TrustConnectionRequestAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // optional string CustomDocumentId = 4;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 4;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 5;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* filename_;
  ::std::string* comment_;
  ::std::string* customdocumentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static TrustConnectionRequestAttachment* default_instance_;
};
// -------------------------------------------------------------------

class StructuredDataAttachment : public ::google::protobuf::Message {
 public:
  StructuredDataAttachment();
  virtual ~StructuredDataAttachment();

  StructuredDataAttachment(const StructuredDataAttachment& from);

  inline StructuredDataAttachment& operator=(const StructuredDataAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StructuredDataAttachment& default_instance();

  void Swap(StructuredDataAttachment* other);

  // implements Message ----------------------------------------------

  StructuredDataAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StructuredDataAttachment& from);
  void MergeFrom(const StructuredDataAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required string ParentCustomDocumentId = 3;
  inline bool has_parentcustomdocumentid() const;
  inline void clear_parentcustomdocumentid();
  static const int kParentCustomDocumentIdFieldNumber = 3;
  inline const ::std::string& parentcustomdocumentid() const;
  inline void set_parentcustomdocumentid(const ::std::string& value);
  inline void set_parentcustomdocumentid(const char* value);
  inline void set_parentcustomdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_parentcustomdocumentid();
  inline ::std::string* release_parentcustomdocumentid();
  inline void set_allocated_parentcustomdocumentid(::std::string* parentcustomdocumentid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.StructuredDataAttachment)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_parentcustomdocumentid();
  inline void clear_has_parentcustomdocumentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  ::std::string* filename_;
  ::std::string* parentcustomdocumentid_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static StructuredDataAttachment* default_instance_;
};
// -------------------------------------------------------------------

class PriceListAttachment : public ::google::protobuf::Message {
 public:
  PriceListAttachment();
  virtual ~PriceListAttachment();

  PriceListAttachment(const PriceListAttachment& from);

  inline PriceListAttachment& operator=(const PriceListAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PriceListAttachment& default_instance();

  void Swap(PriceListAttachment* other);

  // implements Message ----------------------------------------------

  PriceListAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PriceListAttachment& from);
  void MergeFrom(const PriceListAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // optional string CustomDocumentId = 6;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 6;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // required string DocumentDate = 7;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 7;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  inline void set_allocated_documentdate(::std::string* documentdate);

  // required string DocumentNumber = 8;
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 8;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  inline void set_allocated_documentnumber(::std::string* documentnumber);

  // required string PriceListEffectiveDate = 9;
  inline bool has_pricelisteffectivedate() const;
  inline void clear_pricelisteffectivedate();
  static const int kPriceListEffectiveDateFieldNumber = 9;
  inline const ::std::string& pricelisteffectivedate() const;
  inline void set_pricelisteffectivedate(const ::std::string& value);
  inline void set_pricelisteffectivedate(const char* value);
  inline void set_pricelisteffectivedate(const char* value, size_t size);
  inline ::std::string* mutable_pricelisteffectivedate();
  inline ::std::string* release_pricelisteffectivedate();
  inline void set_allocated_pricelisteffectivedate(::std::string* pricelisteffectivedate);

  // required string ContractDocumentDate = 10;
  inline bool has_contractdocumentdate() const;
  inline void clear_contractdocumentdate();
  static const int kContractDocumentDateFieldNumber = 10;
  inline const ::std::string& contractdocumentdate() const;
  inline void set_contractdocumentdate(const ::std::string& value);
  inline void set_contractdocumentdate(const char* value);
  inline void set_contractdocumentdate(const char* value, size_t size);
  inline ::std::string* mutable_contractdocumentdate();
  inline ::std::string* release_contractdocumentdate();
  inline void set_allocated_contractdocumentdate(::std::string* contractdocumentdate);

  // required string ContractDocumentNumber = 11;
  inline bool has_contractdocumentnumber() const;
  inline void clear_contractdocumentnumber();
  static const int kContractDocumentNumberFieldNumber = 11;
  inline const ::std::string& contractdocumentnumber() const;
  inline void set_contractdocumentnumber(const ::std::string& value);
  inline void set_contractdocumentnumber(const char* value);
  inline void set_contractdocumentnumber(const char* value, size_t size);
  inline ::std::string* mutable_contractdocumentnumber();
  inline ::std::string* release_contractdocumentnumber();
  inline void set_allocated_contractdocumentnumber(::std::string* contractdocumentnumber);

  // optional bool NeedReceipt = 12 [default = false];
  inline bool has_needreceipt() const;
  inline void clear_needreceipt();
  static const int kNeedReceiptFieldNumber = 12;
  inline bool needreceipt() const;
  inline void set_needreceipt(bool value);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 13;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.PriceListAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_pricelisteffectivedate();
  inline void clear_has_pricelisteffectivedate();
  inline void set_has_contractdocumentdate();
  inline void clear_has_contractdocumentdate();
  inline void set_has_contractdocumentnumber();
  inline void clear_has_contractdocumentnumber();
  inline void set_has_needreceipt();
  inline void clear_has_needreceipt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* filename_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* customdocumentid_;
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::std::string* pricelisteffectivedate_;
  ::std::string* contractdocumentdate_;
  ::std::string* contractdocumentnumber_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  bool needreceipt_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static PriceListAttachment* default_instance_;
};
// -------------------------------------------------------------------

class ReconciliationActAttachment : public ::google::protobuf::Message {
 public:
  ReconciliationActAttachment();
  virtual ~ReconciliationActAttachment();

  ReconciliationActAttachment(const ReconciliationActAttachment& from);

  inline ReconciliationActAttachment& operator=(const ReconciliationActAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReconciliationActAttachment& default_instance();

  void Swap(ReconciliationActAttachment* other);

  // implements Message ----------------------------------------------

  ReconciliationActAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReconciliationActAttachment& from);
  void MergeFrom(const ReconciliationActAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // required string DocumentDate = 7;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 7;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  inline void set_allocated_documentdate(::std::string* documentdate);

  // optional string DocumentNumber = 8 [default = ""];
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 8;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  inline void set_allocated_documentnumber(::std::string* documentnumber);

  // optional string CustomDocumentId = 9;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 9;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // optional bool NeedReceipt = 10 [default = false];
  inline bool has_needreceipt() const;
  inline void clear_needreceipt();
  static const int kNeedReceiptFieldNumber = 10;
  inline bool needreceipt() const;
  inline void set_needreceipt(bool value);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 11;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ReconciliationActAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_needreceipt();
  inline void clear_has_needreceipt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* filename_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::std::string* customdocumentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  bool needreceipt_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static ReconciliationActAttachment* default_instance_;
};
// -------------------------------------------------------------------

class ContractAttachment : public ::google::protobuf::Message {
 public:
  ContractAttachment();
  virtual ~ContractAttachment();

  ContractAttachment(const ContractAttachment& from);

  inline ContractAttachment& operator=(const ContractAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContractAttachment& default_instance();

  void Swap(ContractAttachment* other);

  // implements Message ----------------------------------------------

  ContractAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContractAttachment& from);
  void MergeFrom(const ContractAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // optional string CustomDocumentId = 6;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 6;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // required string DocumentDate = 7;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 7;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  inline void set_allocated_documentdate(::std::string* documentdate);

  // required string DocumentNumber = 8;
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 8;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  inline void set_allocated_documentnumber(::std::string* documentnumber);

  // optional string ContractPrice = 9;
  inline bool has_contractprice() const;
  inline void clear_contractprice();
  static const int kContractPriceFieldNumber = 9;
  inline const ::std::string& contractprice() const;
  inline void set_contractprice(const ::std::string& value);
  inline void set_contractprice(const char* value);
  inline void set_contractprice(const char* value, size_t size);
  inline ::std::string* mutable_contractprice();
  inline ::std::string* release_contractprice();
  inline void set_allocated_contractprice(::std::string* contractprice);

  // optional string ContractType = 10;
  inline bool has_contracttype() const;
  inline void clear_contracttype();
  static const int kContractTypeFieldNumber = 10;
  inline const ::std::string& contracttype() const;
  inline void set_contracttype(const ::std::string& value);
  inline void set_contracttype(const char* value);
  inline void set_contracttype(const char* value, size_t size);
  inline ::std::string* mutable_contracttype();
  inline ::std::string* release_contracttype();
  inline void set_allocated_contracttype(::std::string* contracttype);

  // optional bool NeedReceipt = 11 [default = false];
  inline bool has_needreceipt() const;
  inline void clear_needreceipt();
  static const int kNeedReceiptFieldNumber = 11;
  inline bool needreceipt() const;
  inline void set_needreceipt(bool value);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 12;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 12;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ContractAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_contractprice();
  inline void clear_has_contractprice();
  inline void set_has_contracttype();
  inline void clear_has_contracttype();
  inline void set_has_needreceipt();
  inline void clear_has_needreceipt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* filename_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* customdocumentid_;
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::std::string* contractprice_;
  ::std::string* contracttype_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  bool needreceipt_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static ContractAttachment* default_instance_;
};
// -------------------------------------------------------------------

class SupplementaryAgreementAttachment : public ::google::protobuf::Message {
 public:
  SupplementaryAgreementAttachment();
  virtual ~SupplementaryAgreementAttachment();

  SupplementaryAgreementAttachment(const SupplementaryAgreementAttachment& from);

  inline SupplementaryAgreementAttachment& operator=(const SupplementaryAgreementAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SupplementaryAgreementAttachment& default_instance();

  void Swap(SupplementaryAgreementAttachment* other);

  // implements Message ----------------------------------------------

  SupplementaryAgreementAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SupplementaryAgreementAttachment& from);
  void MergeFrom(const SupplementaryAgreementAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // optional string CustomDocumentId = 6;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 6;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // required string DocumentDate = 7;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 7;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  inline void set_allocated_documentdate(::std::string* documentdate);

  // required string DocumentNumber = 8;
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 8;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  inline void set_allocated_documentnumber(::std::string* documentnumber);

  // optional string Total = 9;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 9;
  inline const ::std::string& total() const;
  inline void set_total(const ::std::string& value);
  inline void set_total(const char* value);
  inline void set_total(const char* value, size_t size);
  inline ::std::string* mutable_total();
  inline ::std::string* release_total();
  inline void set_allocated_total(::std::string* total);

  // required string ContractNumber = 10;
  inline bool has_contractnumber() const;
  inline void clear_contractnumber();
  static const int kContractNumberFieldNumber = 10;
  inline const ::std::string& contractnumber() const;
  inline void set_contractnumber(const ::std::string& value);
  inline void set_contractnumber(const char* value);
  inline void set_contractnumber(const char* value, size_t size);
  inline ::std::string* mutable_contractnumber();
  inline ::std::string* release_contractnumber();
  inline void set_allocated_contractnumber(::std::string* contractnumber);

  // required string ContractDate = 11;
  inline bool has_contractdate() const;
  inline void clear_contractdate();
  static const int kContractDateFieldNumber = 11;
  inline const ::std::string& contractdate() const;
  inline void set_contractdate(const ::std::string& value);
  inline void set_contractdate(const char* value);
  inline void set_contractdate(const char* value, size_t size);
  inline ::std::string* mutable_contractdate();
  inline ::std::string* release_contractdate();
  inline void set_allocated_contractdate(::std::string* contractdate);

  // optional string ContractType = 12;
  inline bool has_contracttype() const;
  inline void clear_contracttype();
  static const int kContractTypeFieldNumber = 12;
  inline const ::std::string& contracttype() const;
  inline void set_contracttype(const ::std::string& value);
  inline void set_contracttype(const char* value);
  inline void set_contracttype(const char* value, size_t size);
  inline ::std::string* mutable_contracttype();
  inline ::std::string* release_contracttype();
  inline void set_allocated_contracttype(::std::string* contracttype);

  // optional bool NeedReceipt = 13 [default = false];
  inline bool has_needreceipt() const;
  inline void clear_needreceipt();
  static const int kNeedReceiptFieldNumber = 13;
  inline bool needreceipt() const;
  inline void set_needreceipt(bool value);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 14;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 14;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_contractnumber();
  inline void clear_has_contractnumber();
  inline void set_has_contractdate();
  inline void clear_has_contractdate();
  inline void set_has_contracttype();
  inline void clear_has_contracttype();
  inline void set_has_needreceipt();
  inline void clear_has_needreceipt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* filename_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* customdocumentid_;
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::std::string* total_;
  ::std::string* contractnumber_;
  ::std::string* contractdate_;
  ::std::string* contracttype_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  bool needreceipt_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static SupplementaryAgreementAttachment* default_instance_;
};
// -------------------------------------------------------------------

class ServiceDetailsAttachment : public ::google::protobuf::Message {
 public:
  ServiceDetailsAttachment();
  virtual ~ServiceDetailsAttachment();

  ServiceDetailsAttachment(const ServiceDetailsAttachment& from);

  inline ServiceDetailsAttachment& operator=(const ServiceDetailsAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceDetailsAttachment& default_instance();

  void Swap(ServiceDetailsAttachment* other);

  // implements Message ----------------------------------------------

  ServiceDetailsAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceDetailsAttachment& from);
  void MergeFrom(const ServiceDetailsAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // required string FileName = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // optional string DocumentDate = 7;
  inline bool has_documentdate() const;
  inline void clear_documentdate();
  static const int kDocumentDateFieldNumber = 7;
  inline const ::std::string& documentdate() const;
  inline void set_documentdate(const ::std::string& value);
  inline void set_documentdate(const char* value);
  inline void set_documentdate(const char* value, size_t size);
  inline ::std::string* mutable_documentdate();
  inline ::std::string* release_documentdate();
  inline void set_allocated_documentdate(::std::string* documentdate);

  // optional string DocumentNumber = 8;
  inline bool has_documentnumber() const;
  inline void clear_documentnumber();
  static const int kDocumentNumberFieldNumber = 8;
  inline const ::std::string& documentnumber() const;
  inline void set_documentnumber(const ::std::string& value);
  inline void set_documentnumber(const char* value);
  inline void set_documentnumber(const char* value, size_t size);
  inline ::std::string* mutable_documentnumber();
  inline ::std::string* release_documentnumber();
  inline void set_allocated_documentnumber(::std::string* documentnumber);

  // optional string CustomDocumentId = 9;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 9;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // optional bool NeedReceipt = 10 [default = false];
  inline bool has_needreceipt() const;
  inline void clear_needreceipt();
  static const int kNeedReceiptFieldNumber = 10;
  inline bool needreceipt() const;
  inline void set_needreceipt(bool value);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 11;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ServiceDetailsAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_documentdate();
  inline void clear_has_documentdate();
  inline void set_has_documentnumber();
  inline void clear_has_documentnumber();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_needreceipt();
  inline void clear_has_needreceipt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* filename_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* documentdate_;
  ::std::string* documentnumber_;
  ::std::string* customdocumentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  bool needreceipt_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static ServiceDetailsAttachment* default_instance_;
};
// -------------------------------------------------------------------

class DocumentAttachment : public ::google::protobuf::Message {
 public:
  DocumentAttachment();
  virtual ~DocumentAttachment();

  DocumentAttachment(const DocumentAttachment& from);

  inline DocumentAttachment& operator=(const DocumentAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentAttachment& default_instance();

  void Swap(DocumentAttachment* other);

  // implements Message ----------------------------------------------

  DocumentAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentAttachment& from);
  void MergeFrom(const DocumentAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // optional bool NeedRecipientSignature = 4 [default = false];
  inline bool has_needrecipientsignature() const;
  inline void clear_needrecipientsignature();
  static const int kNeedRecipientSignatureFieldNumber = 4;
  inline bool needrecipientsignature() const;
  inline void set_needrecipientsignature(bool value);

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  inline int initialdocumentids_size() const;
  inline void clear_initialdocumentids();
  static const int kInitialDocumentIdsFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::DocumentId& initialdocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_initialdocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_initialdocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      initialdocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_initialdocumentids();

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  inline int subordinatedocumentids_size() const;
  inline void clear_subordinatedocumentids();
  static const int kSubordinateDocumentIdsFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::DocumentId& subordinatedocumentids(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_subordinatedocumentids(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_subordinatedocumentids();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      subordinatedocumentids() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_subordinatedocumentids();

  // optional string CustomDocumentId = 9;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 9;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // optional bool NeedReceipt = 10 [default = false];
  inline bool has_needreceipt() const;
  inline void clear_needreceipt();
  static const int kNeedReceiptFieldNumber = 10;
  inline bool needreceipt() const;
  inline void set_needreceipt(bool value);

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  inline int customdata_size() const;
  inline void clear_customdata();
  static const int kCustomDataFieldNumber = 11;
  inline const ::Diadoc::Api::Proto::CustomDataItem& customdata(int index) const;
  inline ::Diadoc::Api::Proto::CustomDataItem* mutable_customdata(int index);
  inline ::Diadoc::Api::Proto::CustomDataItem* add_customdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
      customdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
      mutable_customdata();

  // required string TypeNamedId = 12;
  inline bool has_typenamedid() const;
  inline void clear_typenamedid();
  static const int kTypeNamedIdFieldNumber = 12;
  inline const ::std::string& typenamedid() const;
  inline void set_typenamedid(const ::std::string& value);
  inline void set_typenamedid(const char* value);
  inline void set_typenamedid(const char* value, size_t size);
  inline ::std::string* mutable_typenamedid();
  inline ::std::string* release_typenamedid();
  inline void set_allocated_typenamedid(::std::string* typenamedid);

  // optional string Function = 13;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 13;
  inline const ::std::string& function() const;
  inline void set_function(const ::std::string& value);
  inline void set_function(const char* value);
  inline void set_function(const char* value, size_t size);
  inline ::std::string* mutable_function();
  inline ::std::string* release_function();
  inline void set_allocated_function(::std::string* function);

  // optional string Version = 14;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 14;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 15;
  inline int metadata_size() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 15;
  inline const ::Diadoc::Api::Proto::Events::MetadataItem& metadata(int index) const;
  inline ::Diadoc::Api::Proto::Events::MetadataItem* mutable_metadata(int index);
  inline ::Diadoc::Api::Proto::Events::MetadataItem* add_metadata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >&
      metadata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >*
      mutable_metadata();

  // optional int32 WorkflowId = 16;
  inline bool has_workflowid() const;
  inline void clear_workflowid();
  static const int kWorkflowIdFieldNumber = 16;
  inline ::google::protobuf::int32 workflowid() const;
  inline void set_workflowid(::google::protobuf::int32 value);

  // optional bool IsEncrypted = 17 [default = false];
  inline bool has_isencrypted() const;
  inline void clear_isencrypted();
  static const int kIsEncryptedFieldNumber = 17;
  inline bool isencrypted() const;
  inline void set_isencrypted(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.DocumentAttachment)
 private:
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_needrecipientsignature();
  inline void clear_has_needrecipientsignature();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_needreceipt();
  inline void clear_has_needreceipt();
  inline void set_has_typenamedid();
  inline void clear_has_typenamedid();
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_workflowid();
  inline void clear_has_workflowid();
  inline void set_has_isencrypted();
  inline void clear_has_isencrypted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > initialdocumentids_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > subordinatedocumentids_;
  ::std::string* customdocumentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem > customdata_;
  ::std::string* typenamedid_;
  bool needrecipientsignature_;
  bool needreceipt_;
  bool isencrypted_;
  ::google::protobuf::int32 workflowid_;
  ::std::string* function_;
  ::std::string* version_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem > metadata_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static DocumentAttachment* default_instance_;
};
// -------------------------------------------------------------------

class MetadataItem : public ::google::protobuf::Message {
 public:
  MetadataItem();
  virtual ~MetadataItem();

  MetadataItem(const MetadataItem& from);

  inline MetadataItem& operator=(const MetadataItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetadataItem& default_instance();

  void Swap(MetadataItem* other);

  // implements Message ----------------------------------------------

  MetadataItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetadataItem& from);
  void MergeFrom(const MetadataItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.MetadataItem)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static MetadataItem* default_instance_;
};
// -------------------------------------------------------------------

class MessagePatchToPost : public ::google::protobuf::Message {
 public:
  MessagePatchToPost();
  virtual ~MessagePatchToPost();

  MessagePatchToPost(const MessagePatchToPost& from);

  inline MessagePatchToPost& operator=(const MessagePatchToPost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagePatchToPost& default_instance();

  void Swap(MessagePatchToPost* other);

  // implements Message ----------------------------------------------

  MessagePatchToPost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessagePatchToPost& from);
  void MergeFrom(const MessagePatchToPost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // required string MessageId = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 2;
  inline const ::std::string& messageid() const;
  inline void set_messageid(const ::std::string& value);
  inline void set_messageid(const char* value);
  inline void set_messageid(const char* value, size_t size);
  inline ::std::string* mutable_messageid();
  inline ::std::string* release_messageid();
  inline void set_allocated_messageid(::std::string* messageid);

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment Receipts = 3;
  inline int receipts_size() const;
  inline void clear_receipts();
  static const int kReceiptsFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Events::ReceiptAttachment& receipts(int index) const;
  inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* mutable_receipts(int index);
  inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* add_receipts();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >&
      receipts() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >*
      mutable_receipts();

  // repeated .Diadoc.Api.Proto.Events.CorrectionRequestAttachment CorrectionRequests = 4;
  inline int correctionrequests_size() const;
  inline void clear_correctionrequests();
  static const int kCorrectionRequestsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Events::CorrectionRequestAttachment& correctionrequests(int index) const;
  inline ::Diadoc::Api::Proto::Events::CorrectionRequestAttachment* mutable_correctionrequests(int index);
  inline ::Diadoc::Api::Proto::Events::CorrectionRequestAttachment* add_correctionrequests();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CorrectionRequestAttachment >&
      correctionrequests() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CorrectionRequestAttachment >*
      mutable_correctionrequests();

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature Signatures = 5;
  inline int signatures_size() const;
  inline void clear_signatures();
  static const int kSignaturesFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Events::DocumentSignature& signatures(int index) const;
  inline ::Diadoc::Api::Proto::Events::DocumentSignature* mutable_signatures(int index);
  inline ::Diadoc::Api::Proto::Events::DocumentSignature* add_signatures();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSignature >&
      signatures() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSignature >*
      mutable_signatures();

  // repeated .Diadoc.Api.Proto.Events.RequestedSignatureRejection RequestedSignatureRejections = 6;
  inline int requestedsignaturerejections_size() const;
  inline void clear_requestedsignaturerejections();
  static const int kRequestedSignatureRejectionsFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Events::RequestedSignatureRejection& requestedsignaturerejections(int index) const;
  inline ::Diadoc::Api::Proto::Events::RequestedSignatureRejection* mutable_requestedsignaturerejections(int index);
  inline ::Diadoc::Api::Proto::Events::RequestedSignatureRejection* add_requestedsignaturerejections();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::RequestedSignatureRejection >&
      requestedsignaturerejections() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::RequestedSignatureRejection >*
      mutable_requestedsignaturerejections();

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlTorg12BuyerTitles = 7;
  inline int xmltorg12buyertitles_size() const;
  inline void clear_xmltorg12buyertitles();
  static const int kXmlTorg12BuyerTitlesFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::Events::ReceiptAttachment& xmltorg12buyertitles(int index) const;
  inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* mutable_xmltorg12buyertitles(int index);
  inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* add_xmltorg12buyertitles();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >&
      xmltorg12buyertitles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >*
      mutable_xmltorg12buyertitles();

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlAcceptanceCertificateBuyerTitles = 8;
  inline int xmlacceptancecertificatebuyertitles_size() const;
  inline void clear_xmlacceptancecertificatebuyertitles();
  static const int kXmlAcceptanceCertificateBuyerTitlesFieldNumber = 8;
  inline const ::Diadoc::Api::Proto::Events::ReceiptAttachment& xmlacceptancecertificatebuyertitles(int index) const;
  inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* mutable_xmlacceptancecertificatebuyertitles(int index);
  inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* add_xmlacceptancecertificatebuyertitles();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >&
      xmlacceptancecertificatebuyertitles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >*
      mutable_xmlacceptancecertificatebuyertitles();

  // repeated .Diadoc.Api.Proto.Events.ResolutionAttachment Resolutions = 9;
  inline int resolutions_size() const;
  inline void clear_resolutions();
  static const int kResolutionsFieldNumber = 9;
  inline const ::Diadoc::Api::Proto::Events::ResolutionAttachment& resolutions(int index) const;
  inline ::Diadoc::Api::Proto::Events::ResolutionAttachment* mutable_resolutions(int index);
  inline ::Diadoc::Api::Proto::Events::ResolutionAttachment* add_resolutions();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionAttachment >&
      resolutions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionAttachment >*
      mutable_resolutions();

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestAttachment ResolutionRequests = 10;
  inline int resolutionrequests_size() const;
  inline void clear_resolutionrequests();
  static const int kResolutionRequestsFieldNumber = 10;
  inline const ::Diadoc::Api::Proto::Events::ResolutionRequestAttachment& resolutionrequests(int index) const;
  inline ::Diadoc::Api::Proto::Events::ResolutionRequestAttachment* mutable_resolutionrequests(int index);
  inline ::Diadoc::Api::Proto::Events::ResolutionRequestAttachment* add_resolutionrequests();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestAttachment >&
      resolutionrequests() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestAttachment >*
      mutable_resolutionrequests();

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment ResolutionRequestCancellations = 11;
  inline int resolutionrequestcancellations_size() const;
  inline void clear_resolutionrequestcancellations();
  static const int kResolutionRequestCancellationsFieldNumber = 11;
  inline const ::Diadoc::Api::Proto::Events::ResolutionRequestCancellationAttachment& resolutionrequestcancellations(int index) const;
  inline ::Diadoc::Api::Proto::Events::ResolutionRequestCancellationAttachment* mutable_resolutionrequestcancellations(int index);
  inline ::Diadoc::Api::Proto::Events::ResolutionRequestCancellationAttachment* add_resolutionrequestcancellations();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestCancellationAttachment >&
      resolutionrequestcancellations() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestCancellationAttachment >*
      mutable_resolutionrequestcancellations();

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment ResolutionRequestDenials = 12;
  inline int resolutionrequestdenials_size() const;
  inline void clear_resolutionrequestdenials();
  static const int kResolutionRequestDenialsFieldNumber = 12;
  inline const ::Diadoc::Api::Proto::Events::ResolutionRequestDenialAttachment& resolutionrequestdenials(int index) const;
  inline ::Diadoc::Api::Proto::Events::ResolutionRequestDenialAttachment* mutable_resolutionrequestdenials(int index);
  inline ::Diadoc::Api::Proto::Events::ResolutionRequestDenialAttachment* add_resolutionrequestdenials();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestDenialAttachment >&
      resolutionrequestdenials() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestDenialAttachment >*
      mutable_resolutionrequestdenials();

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment ResolutionRequestDenialCancellations = 13;
  inline int resolutionrequestdenialcancellations_size() const;
  inline void clear_resolutionrequestdenialcancellations();
  static const int kResolutionRequestDenialCancellationsFieldNumber = 13;
  inline const ::Diadoc::Api::Proto::Events::ResolutionRequestDenialCancellationAttachment& resolutionrequestdenialcancellations(int index) const;
  inline ::Diadoc::Api::Proto::Events::ResolutionRequestDenialCancellationAttachment* mutable_resolutionrequestdenialcancellations(int index);
  inline ::Diadoc::Api::Proto::Events::ResolutionRequestDenialCancellationAttachment* add_resolutionrequestdenialcancellations();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestDenialCancellationAttachment >&
      resolutionrequestdenialcancellations() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestDenialCancellationAttachment >*
      mutable_resolutionrequestdenialcancellations();

  // repeated .Diadoc.Api.Proto.Events.RevocationRequestAttachment RevocationRequests = 14;
  inline int revocationrequests_size() const;
  inline void clear_revocationrequests();
  static const int kRevocationRequestsFieldNumber = 14;
  inline const ::Diadoc::Api::Proto::Events::RevocationRequestAttachment& revocationrequests(int index) const;
  inline ::Diadoc::Api::Proto::Events::RevocationRequestAttachment* mutable_revocationrequests(int index);
  inline ::Diadoc::Api::Proto::Events::RevocationRequestAttachment* add_revocationrequests();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::RevocationRequestAttachment >&
      revocationrequests() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::RevocationRequestAttachment >*
      mutable_revocationrequests();

  // repeated .Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment XmlSignatureRejections = 15;
  inline int xmlsignaturerejections_size() const;
  inline void clear_xmlsignaturerejections();
  static const int kXmlSignatureRejectionsFieldNumber = 15;
  inline const ::Diadoc::Api::Proto::Events::XmlSignatureRejectionAttachment& xmlsignaturerejections(int index) const;
  inline ::Diadoc::Api::Proto::Events::XmlSignatureRejectionAttachment* mutable_xmlsignaturerejections(int index);
  inline ::Diadoc::Api::Proto::Events::XmlSignatureRejectionAttachment* add_xmlsignaturerejections();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlSignatureRejectionAttachment >&
      xmlsignaturerejections() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlSignatureRejectionAttachment >*
      mutable_xmlsignaturerejections();

  // repeated .Diadoc.Api.Proto.Events.CustomDataPatch CustomDataPatches = 16;
  inline int customdatapatches_size() const;
  inline void clear_customdatapatches();
  static const int kCustomDataPatchesFieldNumber = 16;
  inline const ::Diadoc::Api::Proto::Events::CustomDataPatch& customdatapatches(int index) const;
  inline ::Diadoc::Api::Proto::Events::CustomDataPatch* mutable_customdatapatches(int index);
  inline ::Diadoc::Api::Proto::Events::CustomDataPatch* add_customdatapatches();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CustomDataPatch >&
      customdatapatches() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CustomDataPatch >*
      mutable_customdatapatches();

  // repeated .Diadoc.Api.Proto.Events.ResolutionRouteAssignment ResolutionRouteAssignments = 17;
  inline int resolutionrouteassignments_size() const;
  inline void clear_resolutionrouteassignments();
  static const int kResolutionRouteAssignmentsFieldNumber = 17;
  inline const ::Diadoc::Api::Proto::Events::ResolutionRouteAssignment& resolutionrouteassignments(int index) const;
  inline ::Diadoc::Api::Proto::Events::ResolutionRouteAssignment* mutable_resolutionrouteassignments(int index);
  inline ::Diadoc::Api::Proto::Events::ResolutionRouteAssignment* add_resolutionrouteassignments();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRouteAssignment >&
      resolutionrouteassignments() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRouteAssignment >*
      mutable_resolutionrouteassignments();

  // repeated .Diadoc.Api.Proto.Events.SignatureVerification SignatureVerifications = 18;
  inline int signatureverifications_size() const;
  inline void clear_signatureverifications();
  static const int kSignatureVerificationsFieldNumber = 18;
  inline const ::Diadoc::Api::Proto::Events::SignatureVerification& signatureverifications(int index) const;
  inline ::Diadoc::Api::Proto::Events::SignatureVerification* mutable_signatureverifications(int index);
  inline ::Diadoc::Api::Proto::Events::SignatureVerification* add_signatureverifications();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::SignatureVerification >&
      signatureverifications() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::SignatureVerification >*
      mutable_signatureverifications();

  // repeated .Diadoc.Api.Proto.Events.EditDocumentPacketCommand EditDocumentPacketCommands = 19;
  inline int editdocumentpacketcommands_size() const;
  inline void clear_editdocumentpacketcommands();
  static const int kEditDocumentPacketCommandsFieldNumber = 19;
  inline const ::Diadoc::Api::Proto::Events::EditDocumentPacketCommand& editdocumentpacketcommands(int index) const;
  inline ::Diadoc::Api::Proto::Events::EditDocumentPacketCommand* mutable_editdocumentpacketcommands(int index);
  inline ::Diadoc::Api::Proto::Events::EditDocumentPacketCommand* add_editdocumentpacketcommands();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EditDocumentPacketCommand >&
      editdocumentpacketcommands() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EditDocumentPacketCommand >*
      mutable_editdocumentpacketcommands();

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment UniversalTransferDocumentBuyerTitles = 20;
  inline int universaltransferdocumentbuyertitles_size() const;
  inline void clear_universaltransferdocumentbuyertitles();
  static const int kUniversalTransferDocumentBuyerTitlesFieldNumber = 20;
  inline const ::Diadoc::Api::Proto::Events::ReceiptAttachment& universaltransferdocumentbuyertitles(int index) const;
  inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* mutable_universaltransferdocumentbuyertitles(int index);
  inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* add_universaltransferdocumentbuyertitles();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >&
      universaltransferdocumentbuyertitles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >*
      mutable_universaltransferdocumentbuyertitles();

  // repeated .Diadoc.Api.Proto.Events.ResolutionRouteRemoval ResolutionRouteRemovals = 21;
  inline int resolutionrouteremovals_size() const;
  inline void clear_resolutionrouteremovals();
  static const int kResolutionRouteRemovalsFieldNumber = 21;
  inline const ::Diadoc::Api::Proto::Events::ResolutionRouteRemoval& resolutionrouteremovals(int index) const;
  inline ::Diadoc::Api::Proto::Events::ResolutionRouteRemoval* mutable_resolutionrouteremovals(int index);
  inline ::Diadoc::Api::Proto::Events::ResolutionRouteRemoval* add_resolutionrouteremovals();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRouteRemoval >&
      resolutionrouteremovals() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRouteRemoval >*
      mutable_resolutionrouteremovals();

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment RecipientTitles = 22;
  inline int recipienttitles_size() const;
  inline void clear_recipienttitles();
  static const int kRecipientTitlesFieldNumber = 22;
  inline const ::Diadoc::Api::Proto::Events::ReceiptAttachment& recipienttitles(int index) const;
  inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* mutable_recipienttitles(int index);
  inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* add_recipienttitles();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >&
      recipienttitles() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >*
      mutable_recipienttitles();

  // repeated .Diadoc.Api.Proto.Events.CustomDataPatch EditingPatches = 23;
  inline int editingpatches_size() const;
  inline void clear_editingpatches();
  static const int kEditingPatchesFieldNumber = 23;
  inline const ::Diadoc::Api::Proto::Events::CustomDataPatch& editingpatches(int index) const;
  inline ::Diadoc::Api::Proto::Events::CustomDataPatch* mutable_editingpatches(int index);
  inline ::Diadoc::Api::Proto::Events::CustomDataPatch* add_editingpatches();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CustomDataPatch >&
      editingpatches() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CustomDataPatch >*
      mutable_editingpatches();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.MessagePatchToPost)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_messageid();
  inline void clear_has_messageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* boxid_;
  ::std::string* messageid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment > receipts_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CorrectionRequestAttachment > correctionrequests_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSignature > signatures_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::RequestedSignatureRejection > requestedsignaturerejections_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment > xmltorg12buyertitles_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment > xmlacceptancecertificatebuyertitles_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionAttachment > resolutions_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestAttachment > resolutionrequests_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestCancellationAttachment > resolutionrequestcancellations_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestDenialAttachment > resolutionrequestdenials_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestDenialCancellationAttachment > resolutionrequestdenialcancellations_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::RevocationRequestAttachment > revocationrequests_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlSignatureRejectionAttachment > xmlsignaturerejections_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CustomDataPatch > customdatapatches_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRouteAssignment > resolutionrouteassignments_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::SignatureVerification > signatureverifications_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EditDocumentPacketCommand > editdocumentpacketcommands_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment > universaltransferdocumentbuyertitles_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRouteRemoval > resolutionrouteremovals_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment > recipienttitles_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CustomDataPatch > editingpatches_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static MessagePatchToPost* default_instance_;
};
// -------------------------------------------------------------------

class SignatureVerification : public ::google::protobuf::Message {
 public:
  SignatureVerification();
  virtual ~SignatureVerification();

  SignatureVerification(const SignatureVerification& from);

  inline SignatureVerification& operator=(const SignatureVerification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignatureVerification& default_instance();

  void Swap(SignatureVerification* other);

  // implements Message ----------------------------------------------

  SignatureVerification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignatureVerification& from);
  void MergeFrom(const SignatureVerification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string InitialDocumentId = 1;
  inline bool has_initialdocumentid() const;
  inline void clear_initialdocumentid();
  static const int kInitialDocumentIdFieldNumber = 1;
  inline const ::std::string& initialdocumentid() const;
  inline void set_initialdocumentid(const ::std::string& value);
  inline void set_initialdocumentid(const char* value);
  inline void set_initialdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_initialdocumentid();
  inline ::std::string* release_initialdocumentid();
  inline void set_allocated_initialdocumentid(::std::string* initialdocumentid);

  // required bool IsValid = 2;
  inline bool has_isvalid() const;
  inline void clear_isvalid();
  static const int kIsValidFieldNumber = 2;
  inline bool isvalid() const;
  inline void set_isvalid(bool value);

  // optional string ErrorMessage = 3;
  inline bool has_errormessage() const;
  inline void clear_errormessage();
  static const int kErrorMessageFieldNumber = 3;
  inline const ::std::string& errormessage() const;
  inline void set_errormessage(const ::std::string& value);
  inline void set_errormessage(const char* value);
  inline void set_errormessage(const char* value, size_t size);
  inline ::std::string* mutable_errormessage();
  inline ::std::string* release_errormessage();
  inline void set_allocated_errormessage(::std::string* errormessage);

  // repeated string Labels = 4;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 4;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.SignatureVerification)
 private:
  inline void set_has_initialdocumentid();
  inline void clear_has_initialdocumentid();
  inline void set_has_isvalid();
  inline void clear_has_isvalid();
  inline void set_has_errormessage();
  inline void clear_has_errormessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* initialdocumentid_;
  ::std::string* errormessage_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  bool isvalid_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static SignatureVerification* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionRequestAttachment : public ::google::protobuf::Message {
 public:
  ResolutionRequestAttachment();
  virtual ~ResolutionRequestAttachment();

  ResolutionRequestAttachment(const ResolutionRequestAttachment& from);

  inline ResolutionRequestAttachment& operator=(const ResolutionRequestAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionRequestAttachment& default_instance();

  void Swap(ResolutionRequestAttachment* other);

  // implements Message ----------------------------------------------

  ResolutionRequestAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionRequestAttachment& from);
  void MergeFrom(const ResolutionRequestAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string InitialDocumentId = 1;
  inline bool has_initialdocumentid() const;
  inline void clear_initialdocumentid();
  static const int kInitialDocumentIdFieldNumber = 1;
  inline const ::std::string& initialdocumentid() const;
  inline void set_initialdocumentid(const ::std::string& value);
  inline void set_initialdocumentid(const char* value);
  inline void set_initialdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_initialdocumentid();
  inline ::std::string* release_initialdocumentid();
  inline void set_allocated_initialdocumentid(::std::string* initialdocumentid);

  // required .Diadoc.Api.Proto.Events.ResolutionRequestType Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Diadoc::Api::Proto::Events::ResolutionRequestType type() const;
  inline void set_type(::Diadoc::Api::Proto::Events::ResolutionRequestType value);

  // optional string TargetUserId = 3;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetUserIdFieldNumber = 3;
  inline const ::std::string& targetuserid() const;
  inline void set_targetuserid(const ::std::string& value);
  inline void set_targetuserid(const char* value);
  inline void set_targetuserid(const char* value, size_t size);
  inline ::std::string* mutable_targetuserid();
  inline ::std::string* release_targetuserid();
  inline void set_allocated_targetuserid(::std::string* targetuserid);

  // optional string TargetDepartmentId = 4;
  inline bool has_targetdepartmentid() const;
  inline void clear_targetdepartmentid();
  static const int kTargetDepartmentIdFieldNumber = 4;
  inline const ::std::string& targetdepartmentid() const;
  inline void set_targetdepartmentid(const ::std::string& value);
  inline void set_targetdepartmentid(const char* value);
  inline void set_targetdepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_targetdepartmentid();
  inline ::std::string* release_targetdepartmentid();
  inline void set_allocated_targetdepartmentid(::std::string* targetdepartmentid);

  // optional string Comment = 5;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 5;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated string Labels = 6;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 6;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ResolutionRequestAttachment)
 private:
  inline void set_has_initialdocumentid();
  inline void clear_has_initialdocumentid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();
  inline void set_has_targetdepartmentid();
  inline void clear_has_targetdepartmentid();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* initialdocumentid_;
  ::std::string* targetuserid_;
  ::std::string* targetdepartmentid_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  int type_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static ResolutionRequestAttachment* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionRouteAssignment : public ::google::protobuf::Message {
 public:
  ResolutionRouteAssignment();
  virtual ~ResolutionRouteAssignment();

  ResolutionRouteAssignment(const ResolutionRouteAssignment& from);

  inline ResolutionRouteAssignment& operator=(const ResolutionRouteAssignment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionRouteAssignment& default_instance();

  void Swap(ResolutionRouteAssignment* other);

  // implements Message ----------------------------------------------

  ResolutionRouteAssignment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionRouteAssignment& from);
  void MergeFrom(const ResolutionRouteAssignment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string InitialDocumentId = 1;
  inline bool has_initialdocumentid() const;
  inline void clear_initialdocumentid();
  static const int kInitialDocumentIdFieldNumber = 1;
  inline const ::std::string& initialdocumentid() const;
  inline void set_initialdocumentid(const ::std::string& value);
  inline void set_initialdocumentid(const char* value);
  inline void set_initialdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_initialdocumentid();
  inline ::std::string* release_initialdocumentid();
  inline void set_allocated_initialdocumentid(::std::string* initialdocumentid);

  // required string RouteId = 2;
  inline bool has_routeid() const;
  inline void clear_routeid();
  static const int kRouteIdFieldNumber = 2;
  inline const ::std::string& routeid() const;
  inline void set_routeid(const ::std::string& value);
  inline void set_routeid(const char* value);
  inline void set_routeid(const char* value, size_t size);
  inline ::std::string* mutable_routeid();
  inline ::std::string* release_routeid();
  inline void set_allocated_routeid(::std::string* routeid);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated string Labels = 4;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 4;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ResolutionRouteAssignment)
 private:
  inline void set_has_initialdocumentid();
  inline void clear_has_initialdocumentid();
  inline void set_has_routeid();
  inline void clear_has_routeid();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* initialdocumentid_;
  ::std::string* routeid_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static ResolutionRouteAssignment* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionRequestCancellationAttachment : public ::google::protobuf::Message {
 public:
  ResolutionRequestCancellationAttachment();
  virtual ~ResolutionRequestCancellationAttachment();

  ResolutionRequestCancellationAttachment(const ResolutionRequestCancellationAttachment& from);

  inline ResolutionRequestCancellationAttachment& operator=(const ResolutionRequestCancellationAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionRequestCancellationAttachment& default_instance();

  void Swap(ResolutionRequestCancellationAttachment* other);

  // implements Message ----------------------------------------------

  ResolutionRequestCancellationAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionRequestCancellationAttachment& from);
  void MergeFrom(const ResolutionRequestCancellationAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string InitialResolutionRequestId = 1;
  inline bool has_initialresolutionrequestid() const;
  inline void clear_initialresolutionrequestid();
  static const int kInitialResolutionRequestIdFieldNumber = 1;
  inline const ::std::string& initialresolutionrequestid() const;
  inline void set_initialresolutionrequestid(const ::std::string& value);
  inline void set_initialresolutionrequestid(const char* value);
  inline void set_initialresolutionrequestid(const char* value, size_t size);
  inline ::std::string* mutable_initialresolutionrequestid();
  inline ::std::string* release_initialresolutionrequestid();
  inline void set_allocated_initialresolutionrequestid(::std::string* initialresolutionrequestid);

  // optional string Comment = 2;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 2;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated string Labels = 3;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 3;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment)
 private:
  inline void set_has_initialresolutionrequestid();
  inline void clear_has_initialresolutionrequestid();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* initialresolutionrequestid_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static ResolutionRequestCancellationAttachment* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionRequestDenialCancellationAttachment : public ::google::protobuf::Message {
 public:
  ResolutionRequestDenialCancellationAttachment();
  virtual ~ResolutionRequestDenialCancellationAttachment();

  ResolutionRequestDenialCancellationAttachment(const ResolutionRequestDenialCancellationAttachment& from);

  inline ResolutionRequestDenialCancellationAttachment& operator=(const ResolutionRequestDenialCancellationAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionRequestDenialCancellationAttachment& default_instance();

  void Swap(ResolutionRequestDenialCancellationAttachment* other);

  // implements Message ----------------------------------------------

  ResolutionRequestDenialCancellationAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionRequestDenialCancellationAttachment& from);
  void MergeFrom(const ResolutionRequestDenialCancellationAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string InitialResolutionRequestDenialId = 1;
  inline bool has_initialresolutionrequestdenialid() const;
  inline void clear_initialresolutionrequestdenialid();
  static const int kInitialResolutionRequestDenialIdFieldNumber = 1;
  inline const ::std::string& initialresolutionrequestdenialid() const;
  inline void set_initialresolutionrequestdenialid(const ::std::string& value);
  inline void set_initialresolutionrequestdenialid(const char* value);
  inline void set_initialresolutionrequestdenialid(const char* value, size_t size);
  inline ::std::string* mutable_initialresolutionrequestdenialid();
  inline ::std::string* release_initialresolutionrequestdenialid();
  inline void set_allocated_initialresolutionrequestdenialid(::std::string* initialresolutionrequestdenialid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment)
 private:
  inline void set_has_initialresolutionrequestdenialid();
  inline void clear_has_initialresolutionrequestdenialid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* initialresolutionrequestdenialid_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static ResolutionRequestDenialCancellationAttachment* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionRequestDenialAttachment : public ::google::protobuf::Message {
 public:
  ResolutionRequestDenialAttachment();
  virtual ~ResolutionRequestDenialAttachment();

  ResolutionRequestDenialAttachment(const ResolutionRequestDenialAttachment& from);

  inline ResolutionRequestDenialAttachment& operator=(const ResolutionRequestDenialAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionRequestDenialAttachment& default_instance();

  void Swap(ResolutionRequestDenialAttachment* other);

  // implements Message ----------------------------------------------

  ResolutionRequestDenialAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionRequestDenialAttachment& from);
  void MergeFrom(const ResolutionRequestDenialAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string InitialResolutionRequestId = 1;
  inline bool has_initialresolutionrequestid() const;
  inline void clear_initialresolutionrequestid();
  static const int kInitialResolutionRequestIdFieldNumber = 1;
  inline const ::std::string& initialresolutionrequestid() const;
  inline void set_initialresolutionrequestid(const ::std::string& value);
  inline void set_initialresolutionrequestid(const char* value);
  inline void set_initialresolutionrequestid(const char* value, size_t size);
  inline ::std::string* mutable_initialresolutionrequestid();
  inline ::std::string* release_initialresolutionrequestid();
  inline void set_allocated_initialresolutionrequestid(::std::string* initialresolutionrequestid);

  // optional string Comment = 2;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 2;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated string Labels = 3;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 3;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment)
 private:
  inline void set_has_initialresolutionrequestid();
  inline void clear_has_initialresolutionrequestid();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* initialresolutionrequestid_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static ResolutionRequestDenialAttachment* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionAttachment : public ::google::protobuf::Message {
 public:
  ResolutionAttachment();
  virtual ~ResolutionAttachment();

  ResolutionAttachment(const ResolutionAttachment& from);

  inline ResolutionAttachment& operator=(const ResolutionAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionAttachment& default_instance();

  void Swap(ResolutionAttachment* other);

  // implements Message ----------------------------------------------

  ResolutionAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionAttachment& from);
  void MergeFrom(const ResolutionAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string InitialDocumentId = 1;
  inline bool has_initialdocumentid() const;
  inline void clear_initialdocumentid();
  static const int kInitialDocumentIdFieldNumber = 1;
  inline const ::std::string& initialdocumentid() const;
  inline void set_initialdocumentid(const ::std::string& value);
  inline void set_initialdocumentid(const char* value);
  inline void set_initialdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_initialdocumentid();
  inline ::std::string* release_initialdocumentid();
  inline void set_allocated_initialdocumentid(::std::string* initialdocumentid);

  // required .Diadoc.Api.Proto.Events.ResolutionType ResolutionType = 2;
  inline bool has_resolutiontype() const;
  inline void clear_resolutiontype();
  static const int kResolutionTypeFieldNumber = 2;
  inline ::Diadoc::Api::Proto::Events::ResolutionType resolutiontype() const;
  inline void set_resolutiontype(::Diadoc::Api::Proto::Events::ResolutionType value);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated string Labels = 4;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 4;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ResolutionAttachment)
 private:
  inline void set_has_initialdocumentid();
  inline void clear_has_initialdocumentid();
  inline void set_has_resolutiontype();
  inline void clear_has_resolutiontype();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* initialdocumentid_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  int resolutiontype_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static ResolutionAttachment* default_instance_;
};
// -------------------------------------------------------------------

class ReceiptAttachment : public ::google::protobuf::Message {
 public:
  ReceiptAttachment();
  virtual ~ReceiptAttachment();

  ReceiptAttachment(const ReceiptAttachment& from);

  inline ReceiptAttachment& operator=(const ReceiptAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiptAttachment& default_instance();

  void Swap(ReceiptAttachment* other);

  // implements Message ----------------------------------------------

  ReceiptAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceiptAttachment& from);
  void MergeFrom(const ReceiptAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ParentEntityId = 1;
  inline bool has_parententityid() const;
  inline void clear_parententityid();
  static const int kParentEntityIdFieldNumber = 1;
  inline const ::std::string& parententityid() const;
  inline void set_parententityid(const ::std::string& value);
  inline void set_parententityid(const char* value);
  inline void set_parententityid(const char* value, size_t size);
  inline ::std::string* mutable_parententityid();
  inline ::std::string* release_parententityid();
  inline void set_allocated_parententityid(::std::string* parententityid);

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // repeated string Labels = 4;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 4;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ReceiptAttachment)
 private:
  inline void set_has_parententityid();
  inline void clear_has_parententityid();
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* parententityid_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static ReceiptAttachment* default_instance_;
};
// -------------------------------------------------------------------

class CorrectionRequestAttachment : public ::google::protobuf::Message {
 public:
  CorrectionRequestAttachment();
  virtual ~CorrectionRequestAttachment();

  CorrectionRequestAttachment(const CorrectionRequestAttachment& from);

  inline CorrectionRequestAttachment& operator=(const CorrectionRequestAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CorrectionRequestAttachment& default_instance();

  void Swap(CorrectionRequestAttachment* other);

  // implements Message ----------------------------------------------

  CorrectionRequestAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CorrectionRequestAttachment& from);
  void MergeFrom(const CorrectionRequestAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ParentEntityId = 1;
  inline bool has_parententityid() const;
  inline void clear_parententityid();
  static const int kParentEntityIdFieldNumber = 1;
  inline const ::std::string& parententityid() const;
  inline void set_parententityid(const ::std::string& value);
  inline void set_parententityid(const char* value);
  inline void set_parententityid(const char* value, size_t size);
  inline ::std::string* mutable_parententityid();
  inline ::std::string* release_parententityid();
  inline void set_allocated_parententityid(::std::string* parententityid);

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // repeated string Labels = 4;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 4;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.CorrectionRequestAttachment)
 private:
  inline void set_has_parententityid();
  inline void clear_has_parententityid();
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* parententityid_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static CorrectionRequestAttachment* default_instance_;
};
// -------------------------------------------------------------------

class DocumentSignature : public ::google::protobuf::Message {
 public:
  DocumentSignature();
  virtual ~DocumentSignature();

  DocumentSignature(const DocumentSignature& from);

  inline DocumentSignature& operator=(const DocumentSignature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentSignature& default_instance();

  void Swap(DocumentSignature* other);

  // implements Message ----------------------------------------------

  DocumentSignature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentSignature& from);
  void MergeFrom(const DocumentSignature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ParentEntityId = 1;
  inline bool has_parententityid() const;
  inline void clear_parententityid();
  static const int kParentEntityIdFieldNumber = 1;
  inline const ::std::string& parententityid() const;
  inline void set_parententityid(const ::std::string& value);
  inline void set_parententityid(const char* value);
  inline void set_parententityid(const char* value, size_t size);
  inline ::std::string* mutable_parententityid();
  inline ::std::string* release_parententityid();
  inline void set_allocated_parententityid(::std::string* parententityid);

  // optional bytes Signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // optional bool SignWithTestSignature = 4 [default = false];
  inline bool has_signwithtestsignature() const;
  inline void clear_signwithtestsignature();
  static const int kSignWithTestSignatureFieldNumber = 4;
  inline bool signwithtestsignature() const;
  inline void set_signwithtestsignature(bool value);

  // optional bool IsApprovementSignature = 5 [default = false];
  inline bool has_isapprovementsignature() const;
  inline void clear_isapprovementsignature();
  static const int kIsApprovementSignatureFieldNumber = 5;
  inline bool isapprovementsignature() const;
  inline void set_isapprovementsignature(bool value);

  // optional string SignatureNameOnShelf = 6;
  inline bool has_signaturenameonshelf() const;
  inline void clear_signaturenameonshelf();
  static const int kSignatureNameOnShelfFieldNumber = 6;
  inline const ::std::string& signaturenameonshelf() const;
  inline void set_signaturenameonshelf(const ::std::string& value);
  inline void set_signaturenameonshelf(const char* value);
  inline void set_signaturenameonshelf(const char* value, size_t size);
  inline ::std::string* mutable_signaturenameonshelf();
  inline ::std::string* release_signaturenameonshelf();
  inline void set_allocated_signaturenameonshelf(::std::string* signaturenameonshelf);

  // optional string PatchedContentId = 7;
  inline bool has_patchedcontentid() const;
  inline void clear_patchedcontentid();
  static const int kPatchedContentIdFieldNumber = 7;
  inline const ::std::string& patchedcontentid() const;
  inline void set_patchedcontentid(const ::std::string& value);
  inline void set_patchedcontentid(const char* value);
  inline void set_patchedcontentid(const char* value, size_t size);
  inline ::std::string* mutable_patchedcontentid();
  inline ::std::string* release_patchedcontentid();
  inline void set_allocated_patchedcontentid(::std::string* patchedcontentid);

  // repeated string Labels = 8;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 8;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.DocumentSignature)
 private:
  inline void set_has_parententityid();
  inline void clear_has_parententityid();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_signwithtestsignature();
  inline void clear_has_signwithtestsignature();
  inline void set_has_isapprovementsignature();
  inline void clear_has_isapprovementsignature();
  inline void set_has_signaturenameonshelf();
  inline void clear_has_signaturenameonshelf();
  inline void set_has_patchedcontentid();
  inline void clear_has_patchedcontentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* parententityid_;
  ::std::string* signature_;
  ::std::string* signaturenameonshelf_;
  ::std::string* patchedcontentid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  bool signwithtestsignature_;
  bool isapprovementsignature_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static DocumentSignature* default_instance_;
};
// -------------------------------------------------------------------

class DocumentSenderSignature : public ::google::protobuf::Message {
 public:
  DocumentSenderSignature();
  virtual ~DocumentSenderSignature();

  DocumentSenderSignature(const DocumentSenderSignature& from);

  inline DocumentSenderSignature& operator=(const DocumentSenderSignature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentSenderSignature& default_instance();

  void Swap(DocumentSenderSignature* other);

  // implements Message ----------------------------------------------

  DocumentSenderSignature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentSenderSignature& from);
  void MergeFrom(const DocumentSenderSignature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ParentEntityId = 1;
  inline bool has_parententityid() const;
  inline void clear_parententityid();
  static const int kParentEntityIdFieldNumber = 1;
  inline const ::std::string& parententityid() const;
  inline void set_parententityid(const ::std::string& value);
  inline void set_parententityid(const char* value);
  inline void set_parententityid(const char* value, size_t size);
  inline ::std::string* mutable_parententityid();
  inline ::std::string* release_parententityid();
  inline void set_allocated_parententityid(::std::string* parententityid);

  // optional bytes Signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // optional bool SignWithTestSignature = 4 [default = false];
  inline bool has_signwithtestsignature() const;
  inline void clear_signwithtestsignature();
  static const int kSignWithTestSignatureFieldNumber = 4;
  inline bool signwithtestsignature() const;
  inline void set_signwithtestsignature(bool value);

  // optional string PatchedContentId = 5;
  inline bool has_patchedcontentid() const;
  inline void clear_patchedcontentid();
  static const int kPatchedContentIdFieldNumber = 5;
  inline const ::std::string& patchedcontentid() const;
  inline void set_patchedcontentid(const ::std::string& value);
  inline void set_patchedcontentid(const char* value);
  inline void set_patchedcontentid(const char* value, size_t size);
  inline ::std::string* mutable_patchedcontentid();
  inline ::std::string* release_patchedcontentid();
  inline void set_allocated_patchedcontentid(::std::string* patchedcontentid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.DocumentSenderSignature)
 private:
  inline void set_has_parententityid();
  inline void clear_has_parententityid();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_signwithtestsignature();
  inline void clear_has_signwithtestsignature();
  inline void set_has_patchedcontentid();
  inline void clear_has_patchedcontentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* parententityid_;
  ::std::string* signature_;
  ::std::string* patchedcontentid_;
  bool signwithtestsignature_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static DocumentSenderSignature* default_instance_;
};
// -------------------------------------------------------------------

class RequestedSignatureRejection : public ::google::protobuf::Message {
 public:
  RequestedSignatureRejection();
  virtual ~RequestedSignatureRejection();

  RequestedSignatureRejection(const RequestedSignatureRejection& from);

  inline RequestedSignatureRejection& operator=(const RequestedSignatureRejection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestedSignatureRejection& default_instance();

  void Swap(RequestedSignatureRejection* other);

  // implements Message ----------------------------------------------

  RequestedSignatureRejection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestedSignatureRejection& from);
  void MergeFrom(const RequestedSignatureRejection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ParentEntityId = 1;
  inline bool has_parententityid() const;
  inline void clear_parententityid();
  static const int kParentEntityIdFieldNumber = 1;
  inline const ::std::string& parententityid() const;
  inline void set_parententityid(const ::std::string& value);
  inline void set_parententityid(const char* value);
  inline void set_parententityid(const char* value, size_t size);
  inline ::std::string* mutable_parententityid();
  inline ::std::string* release_parententityid();
  inline void set_allocated_parententityid(::std::string* parententityid);

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // repeated string Labels = 3;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 3;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.RequestedSignatureRejection)
 private:
  inline void set_has_parententityid();
  inline void clear_has_parententityid();
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* parententityid_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static RequestedSignatureRejection* default_instance_;
};
// -------------------------------------------------------------------

class SignedContent : public ::google::protobuf::Message {
 public:
  SignedContent();
  virtual ~SignedContent();

  SignedContent(const SignedContent& from);

  inline SignedContent& operator=(const SignedContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignedContent& default_instance();

  void Swap(SignedContent* other);

  // implements Message ----------------------------------------------

  SignedContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignedContent& from);
  void MergeFrom(const SignedContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes Content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional bytes Signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // optional string NameOnShelf = 4;
  inline bool has_nameonshelf() const;
  inline void clear_nameonshelf();
  static const int kNameOnShelfFieldNumber = 4;
  inline const ::std::string& nameonshelf() const;
  inline void set_nameonshelf(const ::std::string& value);
  inline void set_nameonshelf(const char* value);
  inline void set_nameonshelf(const char* value, size_t size);
  inline ::std::string* mutable_nameonshelf();
  inline ::std::string* release_nameonshelf();
  inline void set_allocated_nameonshelf(::std::string* nameonshelf);

  // optional bool SignWithTestSignature = 5 [default = false];
  inline bool has_signwithtestsignature() const;
  inline void clear_signwithtestsignature();
  static const int kSignWithTestSignatureFieldNumber = 5;
  inline bool signwithtestsignature() const;
  inline void set_signwithtestsignature(bool value);

  // optional string SignatureNameOnShelf = 6;
  inline bool has_signaturenameonshelf() const;
  inline void clear_signaturenameonshelf();
  static const int kSignatureNameOnShelfFieldNumber = 6;
  inline const ::std::string& signaturenameonshelf() const;
  inline void set_signaturenameonshelf(const ::std::string& value);
  inline void set_signaturenameonshelf(const char* value);
  inline void set_signaturenameonshelf(const char* value, size_t size);
  inline ::std::string* mutable_signaturenameonshelf();
  inline ::std::string* release_signaturenameonshelf();
  inline void set_allocated_signaturenameonshelf(::std::string* signaturenameonshelf);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.SignedContent)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_nameonshelf();
  inline void clear_has_nameonshelf();
  inline void set_has_signwithtestsignature();
  inline void clear_has_signwithtestsignature();
  inline void set_has_signaturenameonshelf();
  inline void clear_has_signaturenameonshelf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  ::std::string* signature_;
  ::std::string* nameonshelf_;
  ::std::string* signaturenameonshelf_;
  bool signwithtestsignature_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static SignedContent* default_instance_;
};
// -------------------------------------------------------------------

class DraftToSend : public ::google::protobuf::Message {
 public:
  DraftToSend();
  virtual ~DraftToSend();

  DraftToSend(const DraftToSend& from);

  inline DraftToSend& operator=(const DraftToSend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DraftToSend& default_instance();

  void Swap(DraftToSend* other);

  // implements Message ----------------------------------------------

  DraftToSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DraftToSend& from);
  void MergeFrom(const DraftToSend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // required string DraftId = 2;
  inline bool has_draftid() const;
  inline void clear_draftid();
  static const int kDraftIdFieldNumber = 2;
  inline const ::std::string& draftid() const;
  inline void set_draftid(const ::std::string& value);
  inline void set_draftid(const char* value);
  inline void set_draftid(const char* value, size_t size);
  inline ::std::string* mutable_draftid();
  inline ::std::string* release_draftid();
  inline void set_allocated_draftid(::std::string* draftid);

  // optional string ToBoxId = 3;
  inline bool has_toboxid() const;
  inline void clear_toboxid();
  static const int kToBoxIdFieldNumber = 3;
  inline const ::std::string& toboxid() const;
  inline void set_toboxid(const ::std::string& value);
  inline void set_toboxid(const char* value);
  inline void set_toboxid(const char* value, size_t size);
  inline ::std::string* mutable_toboxid();
  inline ::std::string* release_toboxid();
  inline void set_allocated_toboxid(::std::string* toboxid);

  // optional string ToDepartmentId = 4;
  inline bool has_todepartmentid() const;
  inline void clear_todepartmentid();
  static const int kToDepartmentIdFieldNumber = 4;
  inline const ::std::string& todepartmentid() const;
  inline void set_todepartmentid(const ::std::string& value);
  inline void set_todepartmentid(const char* value);
  inline void set_todepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_todepartmentid();
  inline ::std::string* release_todepartmentid();
  inline void set_allocated_todepartmentid(::std::string* todepartmentid);

  // repeated .Diadoc.Api.Proto.Events.DocumentSenderSignature DocumentSignatures = 5;
  inline int documentsignatures_size() const;
  inline void clear_documentsignatures();
  static const int kDocumentSignaturesFieldNumber = 5;
  inline const ::Diadoc::Api::Proto::Events::DocumentSenderSignature& documentsignatures(int index) const;
  inline ::Diadoc::Api::Proto::Events::DocumentSenderSignature* mutable_documentsignatures(int index);
  inline ::Diadoc::Api::Proto::Events::DocumentSenderSignature* add_documentsignatures();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSenderSignature >&
      documentsignatures() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSenderSignature >*
      mutable_documentsignatures();

  // optional string ProxyBoxId = 6;
  inline bool has_proxyboxid() const;
  inline void clear_proxyboxid();
  static const int kProxyBoxIdFieldNumber = 6;
  inline const ::std::string& proxyboxid() const;
  inline void set_proxyboxid(const ::std::string& value);
  inline void set_proxyboxid(const char* value);
  inline void set_proxyboxid(const char* value, size_t size);
  inline ::std::string* mutable_proxyboxid();
  inline ::std::string* release_proxyboxid();
  inline void set_allocated_proxyboxid(::std::string* proxyboxid);

  // optional string ProxyDepartmentId = 7;
  inline bool has_proxydepartmentid() const;
  inline void clear_proxydepartmentid();
  static const int kProxyDepartmentIdFieldNumber = 7;
  inline const ::std::string& proxydepartmentid() const;
  inline void set_proxydepartmentid(const ::std::string& value);
  inline void set_proxydepartmentid(const char* value);
  inline void set_proxydepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_proxydepartmentid();
  inline ::std::string* release_proxydepartmentid();
  inline void set_allocated_proxydepartmentid(::std::string* proxydepartmentid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.DraftToSend)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_draftid();
  inline void clear_has_draftid();
  inline void set_has_toboxid();
  inline void clear_has_toboxid();
  inline void set_has_todepartmentid();
  inline void clear_has_todepartmentid();
  inline void set_has_proxyboxid();
  inline void clear_has_proxyboxid();
  inline void set_has_proxydepartmentid();
  inline void clear_has_proxydepartmentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* boxid_;
  ::std::string* draftid_;
  ::std::string* toboxid_;
  ::std::string* todepartmentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSenderSignature > documentsignatures_;
  ::std::string* proxyboxid_;
  ::std::string* proxydepartmentid_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static DraftToSend* default_instance_;
};
// -------------------------------------------------------------------

class PrepareDocumentsToSignRequest : public ::google::protobuf::Message {
 public:
  PrepareDocumentsToSignRequest();
  virtual ~PrepareDocumentsToSignRequest();

  PrepareDocumentsToSignRequest(const PrepareDocumentsToSignRequest& from);

  inline PrepareDocumentsToSignRequest& operator=(const PrepareDocumentsToSignRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareDocumentsToSignRequest& default_instance();

  void Swap(PrepareDocumentsToSignRequest* other);

  // implements Message ----------------------------------------------

  PrepareDocumentsToSignRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrepareDocumentsToSignRequest& from);
  void MergeFrom(const PrepareDocumentsToSignRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // repeated .Diadoc.Api.Proto.Events.DraftDocumentToPatch DraftDocuments = 2;
  inline int draftdocuments_size() const;
  inline void clear_draftdocuments();
  static const int kDraftDocumentsFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Events::DraftDocumentToPatch& draftdocuments(int index) const;
  inline ::Diadoc::Api::Proto::Events::DraftDocumentToPatch* mutable_draftdocuments(int index);
  inline ::Diadoc::Api::Proto::Events::DraftDocumentToPatch* add_draftdocuments();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DraftDocumentToPatch >&
      draftdocuments() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DraftDocumentToPatch >*
      mutable_draftdocuments();

  // repeated .Diadoc.Api.Proto.Events.DocumentToPatch Documents = 3;
  inline int documents_size() const;
  inline void clear_documents();
  static const int kDocumentsFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Events::DocumentToPatch& documents(int index) const;
  inline ::Diadoc::Api::Proto::Events::DocumentToPatch* mutable_documents(int index);
  inline ::Diadoc::Api::Proto::Events::DocumentToPatch* add_documents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentToPatch >&
      documents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentToPatch >*
      mutable_documents();

  // repeated .Diadoc.Api.Proto.Events.ContentToPatch Contents = 4;
  inline int contents_size() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Events::ContentToPatch& contents(int index) const;
  inline ::Diadoc::Api::Proto::Events::ContentToPatch* mutable_contents(int index);
  inline ::Diadoc::Api::Proto::Events::ContentToPatch* add_contents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ContentToPatch >&
      contents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ContentToPatch >*
      mutable_contents();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* boxid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DraftDocumentToPatch > draftdocuments_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentToPatch > documents_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ContentToPatch > contents_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static PrepareDocumentsToSignRequest* default_instance_;
};
// -------------------------------------------------------------------

class DraftDocumentToPatch : public ::google::protobuf::Message {
 public:
  DraftDocumentToPatch();
  virtual ~DraftDocumentToPatch();

  DraftDocumentToPatch(const DraftDocumentToPatch& from);

  inline DraftDocumentToPatch& operator=(const DraftDocumentToPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DraftDocumentToPatch& default_instance();

  void Swap(DraftDocumentToPatch* other);

  // implements Message ----------------------------------------------

  DraftDocumentToPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DraftDocumentToPatch& from);
  void MergeFrom(const DraftDocumentToPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  inline bool has_documentid() const;
  inline void clear_documentid();
  static const int kDocumentIdFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::DocumentId& documentid() const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_documentid();
  inline ::Diadoc::Api::Proto::DocumentId* release_documentid();
  inline void set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid);

  // optional string ToBoxId = 2;
  inline bool has_toboxid() const;
  inline void clear_toboxid();
  static const int kToBoxIdFieldNumber = 2;
  inline const ::std::string& toboxid() const;
  inline void set_toboxid(const ::std::string& value);
  inline void set_toboxid(const char* value);
  inline void set_toboxid(const char* value, size_t size);
  inline ::std::string* mutable_toboxid();
  inline ::std::string* release_toboxid();
  inline void set_allocated_toboxid(::std::string* toboxid);

  // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 3;
  inline bool has_signer() const;
  inline void clear_signer();
  static const int kSignerFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Invoicing::Signer& signer() const;
  inline ::Diadoc::Api::Proto::Invoicing::Signer* mutable_signer();
  inline ::Diadoc::Api::Proto::Invoicing::Signer* release_signer();
  inline void set_allocated_signer(::Diadoc::Api::Proto::Invoicing::Signer* signer);

  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 4;
  inline int extendedsigner_size() const;
  inline void clear_extendedsigner();
  static const int kExtendedSignerFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner& extendedsigner(int index) const;
  inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* mutable_extendedsigner(int index);
  inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* add_extendedsigner();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >&
      extendedsigner() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >*
      mutable_extendedsigner();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.DraftDocumentToPatch)
 private:
  inline void set_has_documentid();
  inline void clear_has_documentid();
  inline void set_has_toboxid();
  inline void clear_has_toboxid();
  inline void set_has_signer();
  inline void clear_has_signer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::DocumentId* documentid_;
  ::std::string* toboxid_;
  ::Diadoc::Api::Proto::Invoicing::Signer* signer_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner > extendedsigner_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static DraftDocumentToPatch* default_instance_;
};
// -------------------------------------------------------------------

class ContentToPatch : public ::google::protobuf::Message {
 public:
  ContentToPatch();
  virtual ~ContentToPatch();

  ContentToPatch(const ContentToPatch& from);

  inline ContentToPatch& operator=(const ContentToPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentToPatch& default_instance();

  void Swap(ContentToPatch* other);

  // implements Message ----------------------------------------------

  ContentToPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentToPatch& from);
  void MergeFrom(const ContentToPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string TypeNamedId = 1;
  inline bool has_typenamedid() const;
  inline void clear_typenamedid();
  static const int kTypeNamedIdFieldNumber = 1;
  inline const ::std::string& typenamedid() const;
  inline void set_typenamedid(const ::std::string& value);
  inline void set_typenamedid(const char* value);
  inline void set_typenamedid(const char* value, size_t size);
  inline ::std::string* mutable_typenamedid();
  inline ::std::string* release_typenamedid();
  inline void set_allocated_typenamedid(::std::string* typenamedid);

  // required string Function = 2;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 2;
  inline const ::std::string& function() const;
  inline void set_function(const ::std::string& value);
  inline void set_function(const char* value);
  inline void set_function(const char* value, size_t size);
  inline ::std::string* mutable_function();
  inline ::std::string* release_function();
  inline void set_allocated_function(::std::string* function);

  // required string Version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // required .Diadoc.Api.Proto.Events.UnsignedContent Content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::Diadoc::Api::Proto::Events::UnsignedContent& content() const;
  inline ::Diadoc::Api::Proto::Events::UnsignedContent* mutable_content();
  inline ::Diadoc::Api::Proto::Events::UnsignedContent* release_content();
  inline void set_allocated_content(::Diadoc::Api::Proto::Events::UnsignedContent* content);

  // optional string ToBoxId = 5;
  inline bool has_toboxid() const;
  inline void clear_toboxid();
  static const int kToBoxIdFieldNumber = 5;
  inline const ::std::string& toboxid() const;
  inline void set_toboxid(const ::std::string& value);
  inline void set_toboxid(const char* value);
  inline void set_toboxid(const char* value, size_t size);
  inline ::std::string* mutable_toboxid();
  inline ::std::string* release_toboxid();
  inline void set_allocated_toboxid(::std::string* toboxid);

  // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 6;
  inline bool has_signer() const;
  inline void clear_signer();
  static const int kSignerFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Invoicing::Signer& signer() const;
  inline ::Diadoc::Api::Proto::Invoicing::Signer* mutable_signer();
  inline ::Diadoc::Api::Proto::Invoicing::Signer* release_signer();
  inline void set_allocated_signer(::Diadoc::Api::Proto::Invoicing::Signer* signer);

  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 7;
  inline int extendedsigner_size() const;
  inline void clear_extendedsigner();
  static const int kExtendedSignerFieldNumber = 7;
  inline const ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner& extendedsigner(int index) const;
  inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* mutable_extendedsigner(int index);
  inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* add_extendedsigner();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >&
      extendedsigner() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >*
      mutable_extendedsigner();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ContentToPatch)
 private:
  inline void set_has_typenamedid();
  inline void clear_has_typenamedid();
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_toboxid();
  inline void clear_has_toboxid();
  inline void set_has_signer();
  inline void clear_has_signer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* typenamedid_;
  ::std::string* function_;
  ::std::string* version_;
  ::Diadoc::Api::Proto::Events::UnsignedContent* content_;
  ::std::string* toboxid_;
  ::Diadoc::Api::Proto::Invoicing::Signer* signer_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner > extendedsigner_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static ContentToPatch* default_instance_;
};
// -------------------------------------------------------------------

class DocumentToPatch : public ::google::protobuf::Message {
 public:
  DocumentToPatch();
  virtual ~DocumentToPatch();

  DocumentToPatch(const DocumentToPatch& from);

  inline DocumentToPatch& operator=(const DocumentToPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentToPatch& default_instance();

  void Swap(DocumentToPatch* other);

  // implements Message ----------------------------------------------

  DocumentToPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentToPatch& from);
  void MergeFrom(const DocumentToPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  inline bool has_documentid() const;
  inline void clear_documentid();
  static const int kDocumentIdFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::DocumentId& documentid() const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_documentid();
  inline ::Diadoc::Api::Proto::DocumentId* release_documentid();
  inline void set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid);

  // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 2;
  inline bool has_signer() const;
  inline void clear_signer();
  static const int kSignerFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Invoicing::Signer& signer() const;
  inline ::Diadoc::Api::Proto::Invoicing::Signer* mutable_signer();
  inline ::Diadoc::Api::Proto::Invoicing::Signer* release_signer();
  inline void set_allocated_signer(::Diadoc::Api::Proto::Invoicing::Signer* signer);

  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 3;
  inline int extendedsigner_size() const;
  inline void clear_extendedsigner();
  static const int kExtendedSignerFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner& extendedsigner(int index) const;
  inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* mutable_extendedsigner(int index);
  inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* add_extendedsigner();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >&
      extendedsigner() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >*
      mutable_extendedsigner();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.DocumentToPatch)
 private:
  inline void set_has_documentid();
  inline void clear_has_documentid();
  inline void set_has_signer();
  inline void clear_has_signer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::DocumentId* documentid_;
  ::Diadoc::Api::Proto::Invoicing::Signer* signer_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner > extendedsigner_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static DocumentToPatch* default_instance_;
};
// -------------------------------------------------------------------

class DocumentPatchedContent : public ::google::protobuf::Message {
 public:
  DocumentPatchedContent();
  virtual ~DocumentPatchedContent();

  DocumentPatchedContent(const DocumentPatchedContent& from);

  inline DocumentPatchedContent& operator=(const DocumentPatchedContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentPatchedContent& default_instance();

  void Swap(DocumentPatchedContent* other);

  // implements Message ----------------------------------------------

  DocumentPatchedContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentPatchedContent& from);
  void MergeFrom(const DocumentPatchedContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  inline bool has_documentid() const;
  inline void clear_documentid();
  static const int kDocumentIdFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::DocumentId& documentid() const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_documentid();
  inline ::Diadoc::Api::Proto::DocumentId* release_documentid();
  inline void set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid);

  // required string PatchedContentId = 2;
  inline bool has_patchedcontentid() const;
  inline void clear_patchedcontentid();
  static const int kPatchedContentIdFieldNumber = 2;
  inline const ::std::string& patchedcontentid() const;
  inline void set_patchedcontentid(const ::std::string& value);
  inline void set_patchedcontentid(const char* value);
  inline void set_patchedcontentid(const char* value, size_t size);
  inline ::std::string* mutable_patchedcontentid();
  inline ::std::string* release_patchedcontentid();
  inline void set_allocated_patchedcontentid(::std::string* patchedcontentid);

  // optional bytes Content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.DocumentPatchedContent)
 private:
  inline void set_has_documentid();
  inline void clear_has_documentid();
  inline void set_has_patchedcontentid();
  inline void clear_has_patchedcontentid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::DocumentId* documentid_;
  ::std::string* patchedcontentid_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static DocumentPatchedContent* default_instance_;
};
// -------------------------------------------------------------------

class PrepareDocumentsToSignResponse : public ::google::protobuf::Message {
 public:
  PrepareDocumentsToSignResponse();
  virtual ~PrepareDocumentsToSignResponse();

  PrepareDocumentsToSignResponse(const PrepareDocumentsToSignResponse& from);

  inline PrepareDocumentsToSignResponse& operator=(const PrepareDocumentsToSignResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareDocumentsToSignResponse& default_instance();

  void Swap(PrepareDocumentsToSignResponse* other);

  // implements Message ----------------------------------------------

  PrepareDocumentsToSignResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrepareDocumentsToSignResponse& from);
  void MergeFrom(const PrepareDocumentsToSignResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Diadoc.Api.Proto.Events.DocumentPatchedContent DocumentPatchedContents = 1;
  inline int documentpatchedcontents_size() const;
  inline void clear_documentpatchedcontents();
  static const int kDocumentPatchedContentsFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::DocumentPatchedContent& documentpatchedcontents(int index) const;
  inline ::Diadoc::Api::Proto::Events::DocumentPatchedContent* mutable_documentpatchedcontents(int index);
  inline ::Diadoc::Api::Proto::Events::DocumentPatchedContent* add_documentpatchedcontents();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentPatchedContent >&
      documentpatchedcontents() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentPatchedContent >*
      mutable_documentpatchedcontents();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentPatchedContent > documentpatchedcontents_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static PrepareDocumentsToSignResponse* default_instance_;
};
// -------------------------------------------------------------------

class MessageToSend : public ::google::protobuf::Message {
 public:
  MessageToSend();
  virtual ~MessageToSend();

  MessageToSend(const MessageToSend& from);

  inline MessageToSend& operator=(const MessageToSend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageToSend& default_instance();

  void Swap(MessageToSend* other);

  // implements Message ----------------------------------------------

  MessageToSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageToSend& from);
  void MergeFrom(const MessageToSend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // required string MessageId = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 2;
  inline const ::std::string& messageid() const;
  inline void set_messageid(const ::std::string& value);
  inline void set_messageid(const char* value);
  inline void set_messageid(const char* value, size_t size);
  inline ::std::string* mutable_messageid();
  inline ::std::string* release_messageid();
  inline void set_allocated_messageid(::std::string* messageid);

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 3;
  inline int documentsignatures_size() const;
  inline void clear_documentsignatures();
  static const int kDocumentSignaturesFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Events::DocumentSignature& documentsignatures(int index) const;
  inline ::Diadoc::Api::Proto::Events::DocumentSignature* mutable_documentsignatures(int index);
  inline ::Diadoc::Api::Proto::Events::DocumentSignature* add_documentsignatures();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSignature >&
      documentsignatures() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSignature >*
      mutable_documentsignatures();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.MessageToSend)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_messageid();
  inline void clear_has_messageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* boxid_;
  ::std::string* messageid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSignature > documentsignatures_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static MessageToSend* default_instance_;
};
// -------------------------------------------------------------------

class RevocationRequestAttachment : public ::google::protobuf::Message {
 public:
  RevocationRequestAttachment();
  virtual ~RevocationRequestAttachment();

  RevocationRequestAttachment(const RevocationRequestAttachment& from);

  inline RevocationRequestAttachment& operator=(const RevocationRequestAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RevocationRequestAttachment& default_instance();

  void Swap(RevocationRequestAttachment* other);

  // implements Message ----------------------------------------------

  RevocationRequestAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RevocationRequestAttachment& from);
  void MergeFrom(const RevocationRequestAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ParentEntityId = 1;
  inline bool has_parententityid() const;
  inline void clear_parententityid();
  static const int kParentEntityIdFieldNumber = 1;
  inline const ::std::string& parententityid() const;
  inline void set_parententityid(const ::std::string& value);
  inline void set_parententityid(const char* value);
  inline void set_parententityid(const char* value, size_t size);
  inline ::std::string* mutable_parententityid();
  inline ::std::string* release_parententityid();
  inline void set_allocated_parententityid(::std::string* parententityid);

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // repeated string Labels = 3;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 3;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.RevocationRequestAttachment)
 private:
  inline void set_has_parententityid();
  inline void clear_has_parententityid();
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* parententityid_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static RevocationRequestAttachment* default_instance_;
};
// -------------------------------------------------------------------

class XmlSignatureRejectionAttachment : public ::google::protobuf::Message {
 public:
  XmlSignatureRejectionAttachment();
  virtual ~XmlSignatureRejectionAttachment();

  XmlSignatureRejectionAttachment(const XmlSignatureRejectionAttachment& from);

  inline XmlSignatureRejectionAttachment& operator=(const XmlSignatureRejectionAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const XmlSignatureRejectionAttachment& default_instance();

  void Swap(XmlSignatureRejectionAttachment* other);

  // implements Message ----------------------------------------------

  XmlSignatureRejectionAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const XmlSignatureRejectionAttachment& from);
  void MergeFrom(const XmlSignatureRejectionAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ParentEntityId = 1;
  inline bool has_parententityid() const;
  inline void clear_parententityid();
  static const int kParentEntityIdFieldNumber = 1;
  inline const ::std::string& parententityid() const;
  inline void set_parententityid(const ::std::string& value);
  inline void set_parententityid(const char* value);
  inline void set_parententityid(const char* value, size_t size);
  inline ::std::string* mutable_parententityid();
  inline ::std::string* release_parententityid();
  inline void set_allocated_parententityid(::std::string* parententityid);

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  inline bool has_signedcontent() const;
  inline void clear_signedcontent();
  static const int kSignedContentFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::Events::SignedContent& signedcontent() const;
  inline ::Diadoc::Api::Proto::Events::SignedContent* mutable_signedcontent();
  inline ::Diadoc::Api::Proto::Events::SignedContent* release_signedcontent();
  inline void set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent);

  // repeated string Labels = 3;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 3;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment)
 private:
  inline void set_has_parententityid();
  inline void clear_has_parententityid();
  inline void set_has_signedcontent();
  inline void clear_has_signedcontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* parententityid_;
  ::Diadoc::Api::Proto::Events::SignedContent* signedcontent_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static XmlSignatureRejectionAttachment* default_instance_;
};
// -------------------------------------------------------------------

class RoamingNotificationToPost : public ::google::protobuf::Message {
 public:
  RoamingNotificationToPost();
  virtual ~RoamingNotificationToPost();

  RoamingNotificationToPost(const RoamingNotificationToPost& from);

  inline RoamingNotificationToPost& operator=(const RoamingNotificationToPost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoamingNotificationToPost& default_instance();

  void Swap(RoamingNotificationToPost* other);

  // implements Message ----------------------------------------------

  RoamingNotificationToPost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoamingNotificationToPost& from);
  void MergeFrom(const RoamingNotificationToPost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // required string EventId = 2;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 2;
  inline const ::std::string& eventid() const;
  inline void set_eventid(const ::std::string& value);
  inline void set_eventid(const char* value);
  inline void set_eventid(const char* value, size_t size);
  inline ::std::string* mutable_eventid();
  inline ::std::string* release_eventid();
  inline void set_allocated_eventid(::std::string* eventid);

  // required bool Success = 3;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 3;
  inline bool success() const;
  inline void set_success(bool value);

  // optional string Description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.RoamingNotificationToPost)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* boxid_;
  ::std::string* eventid_;
  ::std::string* description_;
  bool success_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static RoamingNotificationToPost* default_instance_;
};
// -------------------------------------------------------------------

class CustomDataPatch : public ::google::protobuf::Message {
 public:
  CustomDataPatch();
  virtual ~CustomDataPatch();

  CustomDataPatch(const CustomDataPatch& from);

  inline CustomDataPatch& operator=(const CustomDataPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomDataPatch& default_instance();

  void Swap(CustomDataPatch* other);

  // implements Message ----------------------------------------------

  CustomDataPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CustomDataPatch& from);
  void MergeFrom(const CustomDataPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ParentEntityId = 1;
  inline bool has_parententityid() const;
  inline void clear_parententityid();
  static const int kParentEntityIdFieldNumber = 1;
  inline const ::std::string& parententityid() const;
  inline void set_parententityid(const ::std::string& value);
  inline void set_parententityid(const char* value);
  inline void set_parententityid(const char* value, size_t size);
  inline ::std::string* mutable_parententityid();
  inline ::std::string* release_parententityid();
  inline void set_allocated_parententityid(::std::string* parententityid);

  // required .Diadoc.Api.Proto.Events.CustomDataPatchOperation Operation = 2;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 2;
  inline ::Diadoc::Api::Proto::Events::CustomDataPatchOperation operation() const;
  inline void set_operation(::Diadoc::Api::Proto::Events::CustomDataPatchOperation value);

  // required string Key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string Value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.CustomDataPatch)
 private:
  inline void set_has_parententityid();
  inline void clear_has_parententityid();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* parententityid_;
  ::std::string* key_;
  ::std::string* value_;
  int operation_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static CustomDataPatch* default_instance_;
};
// -------------------------------------------------------------------

class EditDocumentPacketCommand : public ::google::protobuf::Message {
 public:
  EditDocumentPacketCommand();
  virtual ~EditDocumentPacketCommand();

  EditDocumentPacketCommand(const EditDocumentPacketCommand& from);

  inline EditDocumentPacketCommand& operator=(const EditDocumentPacketCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EditDocumentPacketCommand& default_instance();

  void Swap(EditDocumentPacketCommand* other);

  // implements Message ----------------------------------------------

  EditDocumentPacketCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EditDocumentPacketCommand& from);
  void MergeFrom(const EditDocumentPacketCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string DocumentId = 1;
  inline bool has_documentid() const;
  inline void clear_documentid();
  static const int kDocumentIdFieldNumber = 1;
  inline const ::std::string& documentid() const;
  inline void set_documentid(const ::std::string& value);
  inline void set_documentid(const char* value);
  inline void set_documentid(const char* value, size_t size);
  inline ::std::string* mutable_documentid();
  inline ::std::string* release_documentid();
  inline void set_allocated_documentid(::std::string* documentid);

  // repeated .Diadoc.Api.Proto.DocumentId AddDocumentsToPacket = 2;
  inline int adddocumentstopacket_size() const;
  inline void clear_adddocumentstopacket();
  static const int kAddDocumentsToPacketFieldNumber = 2;
  inline const ::Diadoc::Api::Proto::DocumentId& adddocumentstopacket(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_adddocumentstopacket(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_adddocumentstopacket();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      adddocumentstopacket() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_adddocumentstopacket();

  // repeated .Diadoc.Api.Proto.DocumentId RemoveDocumentsFromPacket = 3;
  inline int removedocumentsfrompacket_size() const;
  inline void clear_removedocumentsfrompacket();
  static const int kRemoveDocumentsFromPacketFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::DocumentId& removedocumentsfrompacket(int index) const;
  inline ::Diadoc::Api::Proto::DocumentId* mutable_removedocumentsfrompacket(int index);
  inline ::Diadoc::Api::Proto::DocumentId* add_removedocumentsfrompacket();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
      removedocumentsfrompacket() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
      mutable_removedocumentsfrompacket();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.EditDocumentPacketCommand)
 private:
  inline void set_has_documentid();
  inline void clear_has_documentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* documentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > adddocumentstopacket_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId > removedocumentsfrompacket_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static EditDocumentPacketCommand* default_instance_;
};
// -------------------------------------------------------------------

class ResolutionRouteRemoval : public ::google::protobuf::Message {
 public:
  ResolutionRouteRemoval();
  virtual ~ResolutionRouteRemoval();

  ResolutionRouteRemoval(const ResolutionRouteRemoval& from);

  inline ResolutionRouteRemoval& operator=(const ResolutionRouteRemoval& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResolutionRouteRemoval& default_instance();

  void Swap(ResolutionRouteRemoval* other);

  // implements Message ----------------------------------------------

  ResolutionRouteRemoval* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResolutionRouteRemoval& from);
  void MergeFrom(const ResolutionRouteRemoval& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ParentEntityId = 1;
  inline bool has_parententityid() const;
  inline void clear_parententityid();
  static const int kParentEntityIdFieldNumber = 1;
  inline const ::std::string& parententityid() const;
  inline void set_parententityid(const ::std::string& value);
  inline void set_parententityid(const char* value);
  inline void set_parententityid(const char* value, size_t size);
  inline ::std::string* mutable_parententityid();
  inline ::std::string* release_parententityid();
  inline void set_allocated_parententityid(::std::string* parententityid);

  // required string RouteId = 2;
  inline bool has_routeid() const;
  inline void clear_routeid();
  static const int kRouteIdFieldNumber = 2;
  inline const ::std::string& routeid() const;
  inline void set_routeid(const ::std::string& value);
  inline void set_routeid(const char* value);
  inline void set_routeid(const char* value, size_t size);
  inline ::std::string* mutable_routeid();
  inline ::std::string* release_routeid();
  inline void set_allocated_routeid(::std::string* routeid);

  // optional string Comment = 3 [default = ""];
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // repeated string Labels = 4;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 4;
  inline const ::std::string& labels(int index) const;
  inline ::std::string* mutable_labels(int index);
  inline void set_labels(int index, const ::std::string& value);
  inline void set_labels(int index, const char* value);
  inline void set_labels(int index, const char* value, size_t size);
  inline ::std::string* add_labels();
  inline void add_labels(const ::std::string& value);
  inline void add_labels(const char* value);
  inline void add_labels(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_labels();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.ResolutionRouteRemoval)
 private:
  inline void set_has_parententityid();
  inline void clear_has_parententityid();
  inline void set_has_routeid();
  inline void clear_has_routeid();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* parententityid_;
  ::std::string* routeid_;
  ::std::string* comment_;
  ::google::protobuf::RepeatedPtrField< ::std::string> labels_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static ResolutionRouteRemoval* default_instance_;
};
// -------------------------------------------------------------------

class TemplateToPost : public ::google::protobuf::Message {
 public:
  TemplateToPost();
  virtual ~TemplateToPost();

  TemplateToPost(const TemplateToPost& from);

  inline TemplateToPost& operator=(const TemplateToPost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TemplateToPost& default_instance();

  void Swap(TemplateToPost* other);

  // implements Message ----------------------------------------------

  TemplateToPost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemplateToPost& from);
  void MergeFrom(const TemplateToPost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string FromBoxId = 1;
  inline bool has_fromboxid() const;
  inline void clear_fromboxid();
  static const int kFromBoxIdFieldNumber = 1;
  inline const ::std::string& fromboxid() const;
  inline void set_fromboxid(const ::std::string& value);
  inline void set_fromboxid(const char* value);
  inline void set_fromboxid(const char* value, size_t size);
  inline ::std::string* mutable_fromboxid();
  inline ::std::string* release_fromboxid();
  inline void set_allocated_fromboxid(::std::string* fromboxid);

  // required string ToBoxId = 2;
  inline bool has_toboxid() const;
  inline void clear_toboxid();
  static const int kToBoxIdFieldNumber = 2;
  inline const ::std::string& toboxid() const;
  inline void set_toboxid(const ::std::string& value);
  inline void set_toboxid(const char* value);
  inline void set_toboxid(const char* value, size_t size);
  inline ::std::string* mutable_toboxid();
  inline ::std::string* release_toboxid();
  inline void set_allocated_toboxid(::std::string* toboxid);

  // required string MessageFromBoxId = 3;
  inline bool has_messagefromboxid() const;
  inline void clear_messagefromboxid();
  static const int kMessageFromBoxIdFieldNumber = 3;
  inline const ::std::string& messagefromboxid() const;
  inline void set_messagefromboxid(const ::std::string& value);
  inline void set_messagefromboxid(const char* value);
  inline void set_messagefromboxid(const char* value, size_t size);
  inline ::std::string* mutable_messagefromboxid();
  inline ::std::string* release_messagefromboxid();
  inline void set_allocated_messagefromboxid(::std::string* messagefromboxid);

  // required string MessageToBoxId = 4;
  inline bool has_messagetoboxid() const;
  inline void clear_messagetoboxid();
  static const int kMessageToBoxIdFieldNumber = 4;
  inline const ::std::string& messagetoboxid() const;
  inline void set_messagetoboxid(const ::std::string& value);
  inline void set_messagetoboxid(const char* value);
  inline void set_messagetoboxid(const char* value, size_t size);
  inline ::std::string* mutable_messagetoboxid();
  inline ::std::string* release_messagetoboxid();
  inline void set_allocated_messagetoboxid(::std::string* messagetoboxid);

  // optional string MessageToDepartmentId = 5;
  inline bool has_messagetodepartmentid() const;
  inline void clear_messagetodepartmentid();
  static const int kMessageToDepartmentIdFieldNumber = 5;
  inline const ::std::string& messagetodepartmentid() const;
  inline void set_messagetodepartmentid(const ::std::string& value);
  inline void set_messagetodepartmentid(const char* value);
  inline void set_messagetodepartmentid(const char* value, size_t size);
  inline ::std::string* mutable_messagetodepartmentid();
  inline ::std::string* release_messagetodepartmentid();
  inline void set_allocated_messagetodepartmentid(::std::string* messagetodepartmentid);

  // repeated .Diadoc.Api.Proto.Events.TemplateDocumentAttachment DocumentAttachments = 6;
  inline int documentattachments_size() const;
  inline void clear_documentattachments();
  static const int kDocumentAttachmentsFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Events::TemplateDocumentAttachment& documentattachments(int index) const;
  inline ::Diadoc::Api::Proto::Events::TemplateDocumentAttachment* mutable_documentattachments(int index);
  inline ::Diadoc::Api::Proto::Events::TemplateDocumentAttachment* add_documentattachments();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::TemplateDocumentAttachment >&
      documentattachments() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::TemplateDocumentAttachment >*
      mutable_documentattachments();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.TemplateToPost)
 private:
  inline void set_has_fromboxid();
  inline void clear_has_fromboxid();
  inline void set_has_toboxid();
  inline void clear_has_toboxid();
  inline void set_has_messagefromboxid();
  inline void clear_has_messagefromboxid();
  inline void set_has_messagetoboxid();
  inline void clear_has_messagetoboxid();
  inline void set_has_messagetodepartmentid();
  inline void clear_has_messagetodepartmentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fromboxid_;
  ::std::string* toboxid_;
  ::std::string* messagefromboxid_;
  ::std::string* messagetoboxid_;
  ::std::string* messagetodepartmentid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::TemplateDocumentAttachment > documentattachments_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static TemplateToPost* default_instance_;
};
// -------------------------------------------------------------------

class TemplateDocumentAttachment : public ::google::protobuf::Message {
 public:
  TemplateDocumentAttachment();
  virtual ~TemplateDocumentAttachment();

  TemplateDocumentAttachment(const TemplateDocumentAttachment& from);

  inline TemplateDocumentAttachment& operator=(const TemplateDocumentAttachment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TemplateDocumentAttachment& default_instance();

  void Swap(TemplateDocumentAttachment* other);

  // implements Message ----------------------------------------------

  TemplateDocumentAttachment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemplateDocumentAttachment& from);
  void MergeFrom(const TemplateDocumentAttachment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Diadoc.Api.Proto.Events.UnsignedContent UnsignedContent = 1;
  inline bool has_unsignedcontent() const;
  inline void clear_unsignedcontent();
  static const int kUnsignedContentFieldNumber = 1;
  inline const ::Diadoc::Api::Proto::Events::UnsignedContent& unsignedcontent() const;
  inline ::Diadoc::Api::Proto::Events::UnsignedContent* mutable_unsignedcontent();
  inline ::Diadoc::Api::Proto::Events::UnsignedContent* release_unsignedcontent();
  inline void set_allocated_unsignedcontent(::Diadoc::Api::Proto::Events::UnsignedContent* unsignedcontent);

  // optional string Comment = 2;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 2;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // required string TypeNamedId = 3;
  inline bool has_typenamedid() const;
  inline void clear_typenamedid();
  static const int kTypeNamedIdFieldNumber = 3;
  inline const ::std::string& typenamedid() const;
  inline void set_typenamedid(const ::std::string& value);
  inline void set_typenamedid(const char* value);
  inline void set_typenamedid(const char* value, size_t size);
  inline ::std::string* mutable_typenamedid();
  inline ::std::string* release_typenamedid();
  inline void set_allocated_typenamedid(::std::string* typenamedid);

  // optional string Function = 4;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 4;
  inline const ::std::string& function() const;
  inline void set_function(const ::std::string& value);
  inline void set_function(const char* value);
  inline void set_function(const char* value, size_t size);
  inline ::std::string* mutable_function();
  inline ::std::string* release_function();
  inline void set_allocated_function(::std::string* function);

  // optional string Version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 6;
  inline int metadata_size() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 6;
  inline const ::Diadoc::Api::Proto::Events::MetadataItem& metadata(int index) const;
  inline ::Diadoc::Api::Proto::Events::MetadataItem* mutable_metadata(int index);
  inline ::Diadoc::Api::Proto::Events::MetadataItem* add_metadata();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >&
      metadata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >*
      mutable_metadata();

  // optional int32 WorkflowId = 7;
  inline bool has_workflowid() const;
  inline void clear_workflowid();
  static const int kWorkflowIdFieldNumber = 7;
  inline ::google::protobuf::int32 workflowid() const;
  inline void set_workflowid(::google::protobuf::int32 value);

  // optional string CustomDocumentId = 8;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 8;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // optional string EditingSettingId = 9;
  inline bool has_editingsettingid() const;
  inline void clear_editingsettingid();
  static const int kEditingSettingIdFieldNumber = 9;
  inline const ::std::string& editingsettingid() const;
  inline void set_editingsettingid(const ::std::string& value);
  inline void set_editingsettingid(const char* value);
  inline void set_editingsettingid(const char* value, size_t size);
  inline ::std::string* mutable_editingsettingid();
  inline ::std::string* release_editingsettingid();
  inline void set_allocated_editingsettingid(::std::string* editingsettingid);

  // optional bool NeedRecipientSignature = 10 [default = false];
  inline bool has_needrecipientsignature() const;
  inline void clear_needrecipientsignature();
  static const int kNeedRecipientSignatureFieldNumber = 10;
  inline bool needrecipientsignature() const;
  inline void set_needrecipientsignature(bool value);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.TemplateDocumentAttachment)
 private:
  inline void set_has_unsignedcontent();
  inline void clear_has_unsignedcontent();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_typenamedid();
  inline void clear_has_typenamedid();
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_workflowid();
  inline void clear_has_workflowid();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();
  inline void set_has_editingsettingid();
  inline void clear_has_editingsettingid();
  inline void set_has_needrecipientsignature();
  inline void clear_has_needrecipientsignature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Diadoc::Api::Proto::Events::UnsignedContent* unsignedcontent_;
  ::std::string* comment_;
  ::std::string* typenamedid_;
  ::std::string* function_;
  ::std::string* version_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem > metadata_;
  ::std::string* customdocumentid_;
  ::google::protobuf::int32 workflowid_;
  bool needrecipientsignature_;
  ::std::string* editingsettingid_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static TemplateDocumentAttachment* default_instance_;
};
// -------------------------------------------------------------------

class UnsignedContent : public ::google::protobuf::Message {
 public:
  UnsignedContent();
  virtual ~UnsignedContent();

  UnsignedContent(const UnsignedContent& from);

  inline UnsignedContent& operator=(const UnsignedContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsignedContent& default_instance();

  void Swap(UnsignedContent* other);

  // implements Message ----------------------------------------------

  UnsignedContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnsignedContent& from);
  void MergeFrom(const UnsignedContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes Content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string NameOnShelf = 2;
  inline bool has_nameonshelf() const;
  inline void clear_nameonshelf();
  static const int kNameOnShelfFieldNumber = 2;
  inline const ::std::string& nameonshelf() const;
  inline void set_nameonshelf(const ::std::string& value);
  inline void set_nameonshelf(const char* value);
  inline void set_nameonshelf(const char* value, size_t size);
  inline ::std::string* mutable_nameonshelf();
  inline ::std::string* release_nameonshelf();
  inline void set_allocated_nameonshelf(::std::string* nameonshelf);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.UnsignedContent)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_nameonshelf();
  inline void clear_has_nameonshelf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  ::std::string* nameonshelf_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static UnsignedContent* default_instance_;
};
// -------------------------------------------------------------------

class TemplateTransformationToPost : public ::google::protobuf::Message {
 public:
  TemplateTransformationToPost();
  virtual ~TemplateTransformationToPost();

  TemplateTransformationToPost(const TemplateTransformationToPost& from);

  inline TemplateTransformationToPost& operator=(const TemplateTransformationToPost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TemplateTransformationToPost& default_instance();

  void Swap(TemplateTransformationToPost* other);

  // implements Message ----------------------------------------------

  TemplateTransformationToPost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TemplateTransformationToPost& from);
  void MergeFrom(const TemplateTransformationToPost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  inline const ::std::string& boxid() const;
  inline void set_boxid(const ::std::string& value);
  inline void set_boxid(const char* value);
  inline void set_boxid(const char* value, size_t size);
  inline ::std::string* mutable_boxid();
  inline ::std::string* release_boxid();
  inline void set_allocated_boxid(::std::string* boxid);

  // required string TemplateId = 2;
  inline bool has_templateid() const;
  inline void clear_templateid();
  static const int kTemplateIdFieldNumber = 2;
  inline const ::std::string& templateid() const;
  inline void set_templateid(const ::std::string& value);
  inline void set_templateid(const char* value);
  inline void set_templateid(const char* value, size_t size);
  inline ::std::string* mutable_templateid();
  inline ::std::string* release_templateid();
  inline void set_allocated_templateid(::std::string* templateid);

  // repeated .Diadoc.Api.Proto.Events.DocumentTransformation DocumentTransformations = 3;
  inline int documenttransformations_size() const;
  inline void clear_documenttransformations();
  static const int kDocumentTransformationsFieldNumber = 3;
  inline const ::Diadoc::Api::Proto::Events::DocumentTransformation& documenttransformations(int index) const;
  inline ::Diadoc::Api::Proto::Events::DocumentTransformation* mutable_documenttransformations(int index);
  inline ::Diadoc::Api::Proto::Events::DocumentTransformation* add_documenttransformations();
  inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentTransformation >&
      documenttransformations() const;
  inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentTransformation >*
      mutable_documenttransformations();

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.TemplateTransformationToPost)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_templateid();
  inline void clear_has_templateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* boxid_;
  ::std::string* templateid_;
  ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentTransformation > documenttransformations_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static TemplateTransformationToPost* default_instance_;
};
// -------------------------------------------------------------------

class DocumentTransformation : public ::google::protobuf::Message {
 public:
  DocumentTransformation();
  virtual ~DocumentTransformation();

  DocumentTransformation(const DocumentTransformation& from);

  inline DocumentTransformation& operator=(const DocumentTransformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentTransformation& default_instance();

  void Swap(DocumentTransformation* other);

  // implements Message ----------------------------------------------

  DocumentTransformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DocumentTransformation& from);
  void MergeFrom(const DocumentTransformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string DocumentId = 1;
  inline bool has_documentid() const;
  inline void clear_documentid();
  static const int kDocumentIdFieldNumber = 1;
  inline const ::std::string& documentid() const;
  inline void set_documentid(const ::std::string& value);
  inline void set_documentid(const char* value);
  inline void set_documentid(const char* value, size_t size);
  inline ::std::string* mutable_documentid();
  inline ::std::string* release_documentid();
  inline void set_allocated_documentid(::std::string* documentid);

  // optional string CustomDocumentId = 2;
  inline bool has_customdocumentid() const;
  inline void clear_customdocumentid();
  static const int kCustomDocumentIdFieldNumber = 2;
  inline const ::std::string& customdocumentid() const;
  inline void set_customdocumentid(const ::std::string& value);
  inline void set_customdocumentid(const char* value);
  inline void set_customdocumentid(const char* value, size_t size);
  inline ::std::string* mutable_customdocumentid();
  inline ::std::string* release_customdocumentid();
  inline void set_allocated_customdocumentid(::std::string* customdocumentid);

  // @@protoc_insertion_point(class_scope:Diadoc.Api.Proto.Events.DocumentTransformation)
 private:
  inline void set_has_documentid();
  inline void clear_has_documentid();
  inline void set_has_customdocumentid();
  inline void clear_has_customdocumentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* documentid_;
  ::std::string* customdocumentid_;
  friend void  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  friend void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto();

  void InitAsDefaultInstance();
  static DocumentTransformation* default_instance_;
};
// ===================================================================


// ===================================================================

// MessageToPost

// required string FromBoxId = 1;
inline bool MessageToPost::has_fromboxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageToPost::set_has_fromboxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageToPost::clear_has_fromboxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageToPost::clear_fromboxid() {
  if (fromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromboxid_->clear();
  }
  clear_has_fromboxid();
}
inline const ::std::string& MessageToPost::fromboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.FromBoxId)
  return *fromboxid_;
}
inline void MessageToPost::set_fromboxid(const ::std::string& value) {
  set_has_fromboxid();
  if (fromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromboxid_ = new ::std::string;
  }
  fromboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.FromBoxId)
}
inline void MessageToPost::set_fromboxid(const char* value) {
  set_has_fromboxid();
  if (fromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromboxid_ = new ::std::string;
  }
  fromboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.MessageToPost.FromBoxId)
}
inline void MessageToPost::set_fromboxid(const char* value, size_t size) {
  set_has_fromboxid();
  if (fromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromboxid_ = new ::std::string;
  }
  fromboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.MessageToPost.FromBoxId)
}
inline ::std::string* MessageToPost::mutable_fromboxid() {
  set_has_fromboxid();
  if (fromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.FromBoxId)
  return fromboxid_;
}
inline ::std::string* MessageToPost::release_fromboxid() {
  clear_has_fromboxid();
  if (fromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fromboxid_;
    fromboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageToPost::set_allocated_fromboxid(::std::string* fromboxid) {
  if (fromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromboxid_;
  }
  if (fromboxid) {
    set_has_fromboxid();
    fromboxid_ = fromboxid;
  } else {
    clear_has_fromboxid();
    fromboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.MessageToPost.FromBoxId)
}

// optional string ToBoxId = 2;
inline bool MessageToPost::has_toboxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageToPost::set_has_toboxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageToPost::clear_has_toboxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageToPost::clear_toboxid() {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_->clear();
  }
  clear_has_toboxid();
}
inline const ::std::string& MessageToPost::toboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.ToBoxId)
  return *toboxid_;
}
inline void MessageToPost::set_toboxid(const ::std::string& value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.ToBoxId)
}
inline void MessageToPost::set_toboxid(const char* value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.MessageToPost.ToBoxId)
}
inline void MessageToPost::set_toboxid(const char* value, size_t size) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.MessageToPost.ToBoxId)
}
inline ::std::string* MessageToPost::mutable_toboxid() {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.ToBoxId)
  return toboxid_;
}
inline ::std::string* MessageToPost::release_toboxid() {
  clear_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = toboxid_;
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageToPost::set_allocated_toboxid(::std::string* toboxid) {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toboxid_;
  }
  if (toboxid) {
    set_has_toboxid();
    toboxid_ = toboxid;
  } else {
    clear_has_toboxid();
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.MessageToPost.ToBoxId)
}

// repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment Invoices = 3;
inline int MessageToPost::invoices_size() const {
  return invoices_.size();
}
inline void MessageToPost::clear_invoices() {
  invoices_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::XmlDocumentAttachment& MessageToPost::invoices(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.Invoices)
  return invoices_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* MessageToPost::mutable_invoices(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.Invoices)
  return invoices_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* MessageToPost::add_invoices() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.Invoices)
  return invoices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >&
MessageToPost::invoices() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.Invoices)
  return invoices_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >*
MessageToPost::mutable_invoices() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.Invoices)
  return &invoices_;
}

// repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment NonformalizedDocuments = 4;
inline int MessageToPost::nonformalizeddocuments_size() const {
  return nonformalizeddocuments_.size();
}
inline void MessageToPost::clear_nonformalizeddocuments() {
  nonformalizeddocuments_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::NonformalizedAttachment& MessageToPost::nonformalizeddocuments(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.NonformalizedDocuments)
  return nonformalizeddocuments_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::NonformalizedAttachment* MessageToPost::mutable_nonformalizeddocuments(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.NonformalizedDocuments)
  return nonformalizeddocuments_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::NonformalizedAttachment* MessageToPost::add_nonformalizeddocuments() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.NonformalizedDocuments)
  return nonformalizeddocuments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment >&
MessageToPost::nonformalizeddocuments() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.NonformalizedDocuments)
  return nonformalizeddocuments_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment >*
MessageToPost::mutable_nonformalizeddocuments() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.NonformalizedDocuments)
  return &nonformalizeddocuments_;
}

// repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment Torg12Documents = 5;
inline int MessageToPost::torg12documents_size() const {
  return torg12documents_.size();
}
inline void MessageToPost::clear_torg12documents() {
  torg12documents_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::BasicDocumentAttachment& MessageToPost::torg12documents(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.Torg12Documents)
  return torg12documents_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::BasicDocumentAttachment* MessageToPost::mutable_torg12documents(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.Torg12Documents)
  return torg12documents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::BasicDocumentAttachment* MessageToPost::add_torg12documents() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.Torg12Documents)
  return torg12documents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::BasicDocumentAttachment >&
MessageToPost::torg12documents() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.Torg12Documents)
  return torg12documents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::BasicDocumentAttachment >*
MessageToPost::mutable_torg12documents() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.Torg12Documents)
  return &torg12documents_;
}

// repeated .Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment AcceptanceCertificates = 7;
inline int MessageToPost::acceptancecertificates_size() const {
  return acceptancecertificates_.size();
}
inline void MessageToPost::clear_acceptancecertificates() {
  acceptancecertificates_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::AcceptanceCertificateAttachment& MessageToPost::acceptancecertificates(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.AcceptanceCertificates)
  return acceptancecertificates_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::AcceptanceCertificateAttachment* MessageToPost::mutable_acceptancecertificates(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.AcceptanceCertificates)
  return acceptancecertificates_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::AcceptanceCertificateAttachment* MessageToPost::add_acceptancecertificates() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.AcceptanceCertificates)
  return acceptancecertificates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::AcceptanceCertificateAttachment >&
MessageToPost::acceptancecertificates() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.AcceptanceCertificates)
  return acceptancecertificates_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::AcceptanceCertificateAttachment >*
MessageToPost::mutable_acceptancecertificates() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.AcceptanceCertificates)
  return &acceptancecertificates_;
}

// repeated .Diadoc.Api.Proto.Events.StructuredDataAttachment StructuredDataAttachments = 8;
inline int MessageToPost::structureddataattachments_size() const {
  return structureddataattachments_.size();
}
inline void MessageToPost::clear_structureddataattachments() {
  structureddataattachments_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::StructuredDataAttachment& MessageToPost::structureddataattachments(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.StructuredDataAttachments)
  return structureddataattachments_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::StructuredDataAttachment* MessageToPost::mutable_structureddataattachments(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.StructuredDataAttachments)
  return structureddataattachments_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::StructuredDataAttachment* MessageToPost::add_structureddataattachments() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.StructuredDataAttachments)
  return structureddataattachments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::StructuredDataAttachment >&
MessageToPost::structureddataattachments() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.StructuredDataAttachments)
  return structureddataattachments_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::StructuredDataAttachment >*
MessageToPost::mutable_structureddataattachments() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.StructuredDataAttachments)
  return &structureddataattachments_;
}

// repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment ProformaInvoices = 9;
inline int MessageToPost::proformainvoices_size() const {
  return proformainvoices_.size();
}
inline void MessageToPost::clear_proformainvoices() {
  proformainvoices_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::BasicDocumentAttachment& MessageToPost::proformainvoices(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.ProformaInvoices)
  return proformainvoices_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::BasicDocumentAttachment* MessageToPost::mutable_proformainvoices(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.ProformaInvoices)
  return proformainvoices_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::BasicDocumentAttachment* MessageToPost::add_proformainvoices() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.ProformaInvoices)
  return proformainvoices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::BasicDocumentAttachment >&
MessageToPost::proformainvoices() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.ProformaInvoices)
  return proformainvoices_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::BasicDocumentAttachment >*
MessageToPost::mutable_proformainvoices() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.ProformaInvoices)
  return &proformainvoices_;
}

// repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlTorg12SellerTitles = 10;
inline int MessageToPost::xmltorg12sellertitles_size() const {
  return xmltorg12sellertitles_.size();
}
inline void MessageToPost::clear_xmltorg12sellertitles() {
  xmltorg12sellertitles_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::XmlDocumentAttachment& MessageToPost::xmltorg12sellertitles(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.XmlTorg12SellerTitles)
  return xmltorg12sellertitles_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* MessageToPost::mutable_xmltorg12sellertitles(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.XmlTorg12SellerTitles)
  return xmltorg12sellertitles_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* MessageToPost::add_xmltorg12sellertitles() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.XmlTorg12SellerTitles)
  return xmltorg12sellertitles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >&
MessageToPost::xmltorg12sellertitles() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.XmlTorg12SellerTitles)
  return xmltorg12sellertitles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >*
MessageToPost::mutable_xmltorg12sellertitles() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.XmlTorg12SellerTitles)
  return &xmltorg12sellertitles_;
}

// repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlAcceptanceCertificateSellerTitles = 11;
inline int MessageToPost::xmlacceptancecertificatesellertitles_size() const {
  return xmlacceptancecertificatesellertitles_.size();
}
inline void MessageToPost::clear_xmlacceptancecertificatesellertitles() {
  xmlacceptancecertificatesellertitles_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::XmlDocumentAttachment& MessageToPost::xmlacceptancecertificatesellertitles(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.XmlAcceptanceCertificateSellerTitles)
  return xmlacceptancecertificatesellertitles_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* MessageToPost::mutable_xmlacceptancecertificatesellertitles(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.XmlAcceptanceCertificateSellerTitles)
  return xmlacceptancecertificatesellertitles_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* MessageToPost::add_xmlacceptancecertificatesellertitles() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.XmlAcceptanceCertificateSellerTitles)
  return xmlacceptancecertificatesellertitles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >&
MessageToPost::xmlacceptancecertificatesellertitles() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.XmlAcceptanceCertificateSellerTitles)
  return xmlacceptancecertificatesellertitles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >*
MessageToPost::mutable_xmlacceptancecertificatesellertitles() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.XmlAcceptanceCertificateSellerTitles)
  return &xmlacceptancecertificatesellertitles_;
}

// optional string ToDepartmentId = 12;
inline bool MessageToPost::has_todepartmentid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MessageToPost::set_has_todepartmentid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MessageToPost::clear_has_todepartmentid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MessageToPost::clear_todepartmentid() {
  if (todepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_->clear();
  }
  clear_has_todepartmentid();
}
inline const ::std::string& MessageToPost::todepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.ToDepartmentId)
  return *todepartmentid_;
}
inline void MessageToPost::set_todepartmentid(const ::std::string& value) {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_ = new ::std::string;
  }
  todepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.ToDepartmentId)
}
inline void MessageToPost::set_todepartmentid(const char* value) {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_ = new ::std::string;
  }
  todepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.MessageToPost.ToDepartmentId)
}
inline void MessageToPost::set_todepartmentid(const char* value, size_t size) {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_ = new ::std::string;
  }
  todepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.MessageToPost.ToDepartmentId)
}
inline ::std::string* MessageToPost::mutable_todepartmentid() {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.ToDepartmentId)
  return todepartmentid_;
}
inline ::std::string* MessageToPost::release_todepartmentid() {
  clear_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = todepartmentid_;
    todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageToPost::set_allocated_todepartmentid(::std::string* todepartmentid) {
  if (todepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete todepartmentid_;
  }
  if (todepartmentid) {
    set_has_todepartmentid();
    todepartmentid_ = todepartmentid;
  } else {
    clear_has_todepartmentid();
    todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.MessageToPost.ToDepartmentId)
}

// optional bool IsDraft = 13 [default = false];
inline bool MessageToPost::has_isdraft() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MessageToPost::set_has_isdraft() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MessageToPost::clear_has_isdraft() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MessageToPost::clear_isdraft() {
  isdraft_ = false;
  clear_has_isdraft();
}
inline bool MessageToPost::isdraft() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.IsDraft)
  return isdraft_;
}
inline void MessageToPost::set_isdraft(bool value) {
  set_has_isdraft();
  isdraft_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.IsDraft)
}

// optional bool LockDraft = 14 [default = false];
inline bool MessageToPost::has_lockdraft() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MessageToPost::set_has_lockdraft() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MessageToPost::clear_has_lockdraft() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MessageToPost::clear_lockdraft() {
  lockdraft_ = false;
  clear_has_lockdraft();
}
inline bool MessageToPost::lockdraft() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.LockDraft)
  return lockdraft_;
}
inline void MessageToPost::set_lockdraft(bool value) {
  set_has_lockdraft();
  lockdraft_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.LockDraft)
}

// optional bool StrictDraftValidation = 15 [default = true];
inline bool MessageToPost::has_strictdraftvalidation() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MessageToPost::set_has_strictdraftvalidation() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MessageToPost::clear_has_strictdraftvalidation() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MessageToPost::clear_strictdraftvalidation() {
  strictdraftvalidation_ = true;
  clear_has_strictdraftvalidation();
}
inline bool MessageToPost::strictdraftvalidation() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.StrictDraftValidation)
  return strictdraftvalidation_;
}
inline void MessageToPost::set_strictdraftvalidation(bool value) {
  set_has_strictdraftvalidation();
  strictdraftvalidation_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.StrictDraftValidation)
}

// optional bool IsInternal = 16 [default = false];
inline bool MessageToPost::has_isinternal() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MessageToPost::set_has_isinternal() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MessageToPost::clear_has_isinternal() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MessageToPost::clear_isinternal() {
  isinternal_ = false;
  clear_has_isinternal();
}
inline bool MessageToPost::isinternal() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.IsInternal)
  return isinternal_;
}
inline void MessageToPost::set_isinternal(bool value) {
  set_has_isinternal();
  isinternal_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.IsInternal)
}

// optional string FromDepartmentId = 17;
inline bool MessageToPost::has_fromdepartmentid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MessageToPost::set_has_fromdepartmentid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MessageToPost::clear_has_fromdepartmentid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MessageToPost::clear_fromdepartmentid() {
  if (fromdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromdepartmentid_->clear();
  }
  clear_has_fromdepartmentid();
}
inline const ::std::string& MessageToPost::fromdepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.FromDepartmentId)
  return *fromdepartmentid_;
}
inline void MessageToPost::set_fromdepartmentid(const ::std::string& value) {
  set_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromdepartmentid_ = new ::std::string;
  }
  fromdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.FromDepartmentId)
}
inline void MessageToPost::set_fromdepartmentid(const char* value) {
  set_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromdepartmentid_ = new ::std::string;
  }
  fromdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.MessageToPost.FromDepartmentId)
}
inline void MessageToPost::set_fromdepartmentid(const char* value, size_t size) {
  set_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromdepartmentid_ = new ::std::string;
  }
  fromdepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.MessageToPost.FromDepartmentId)
}
inline ::std::string* MessageToPost::mutable_fromdepartmentid() {
  set_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromdepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.FromDepartmentId)
  return fromdepartmentid_;
}
inline ::std::string* MessageToPost::release_fromdepartmentid() {
  clear_has_fromdepartmentid();
  if (fromdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fromdepartmentid_;
    fromdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageToPost::set_allocated_fromdepartmentid(::std::string* fromdepartmentid) {
  if (fromdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromdepartmentid_;
  }
  if (fromdepartmentid) {
    set_has_fromdepartmentid();
    fromdepartmentid_ = fromdepartmentid;
  } else {
    clear_has_fromdepartmentid();
    fromdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.MessageToPost.FromDepartmentId)
}

// optional bool DelaySend = 18 [default = false];
inline bool MessageToPost::has_delaysend() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MessageToPost::set_has_delaysend() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MessageToPost::clear_has_delaysend() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MessageToPost::clear_delaysend() {
  delaysend_ = false;
  clear_has_delaysend();
}
inline bool MessageToPost::delaysend() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.DelaySend)
  return delaysend_;
}
inline void MessageToPost::set_delaysend(bool value) {
  set_has_delaysend();
  delaysend_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.DelaySend)
}

// repeated .Diadoc.Api.Proto.Events.PriceListAttachment PriceLists = 19;
inline int MessageToPost::pricelists_size() const {
  return pricelists_.size();
}
inline void MessageToPost::clear_pricelists() {
  pricelists_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::PriceListAttachment& MessageToPost::pricelists(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.PriceLists)
  return pricelists_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::PriceListAttachment* MessageToPost::mutable_pricelists(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.PriceLists)
  return pricelists_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::PriceListAttachment* MessageToPost::add_pricelists() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.PriceLists)
  return pricelists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::PriceListAttachment >&
MessageToPost::pricelists() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.PriceLists)
  return pricelists_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::PriceListAttachment >*
MessageToPost::mutable_pricelists() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.PriceLists)
  return &pricelists_;
}

// repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment PriceListAgreements = 20;
inline int MessageToPost::pricelistagreements_size() const {
  return pricelistagreements_.size();
}
inline void MessageToPost::clear_pricelistagreements() {
  pricelistagreements_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::NonformalizedAttachment& MessageToPost::pricelistagreements(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.PriceListAgreements)
  return pricelistagreements_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::NonformalizedAttachment* MessageToPost::mutable_pricelistagreements(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.PriceListAgreements)
  return pricelistagreements_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::NonformalizedAttachment* MessageToPost::add_pricelistagreements() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.PriceListAgreements)
  return pricelistagreements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment >&
MessageToPost::pricelistagreements() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.PriceListAgreements)
  return pricelistagreements_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment >*
MessageToPost::mutable_pricelistagreements() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.PriceListAgreements)
  return &pricelistagreements_;
}

// repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment CertificateRegistries = 21;
inline int MessageToPost::certificateregistries_size() const {
  return certificateregistries_.size();
}
inline void MessageToPost::clear_certificateregistries() {
  certificateregistries_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::NonformalizedAttachment& MessageToPost::certificateregistries(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.CertificateRegistries)
  return certificateregistries_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::NonformalizedAttachment* MessageToPost::mutable_certificateregistries(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.CertificateRegistries)
  return certificateregistries_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::NonformalizedAttachment* MessageToPost::add_certificateregistries() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.CertificateRegistries)
  return certificateregistries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment >&
MessageToPost::certificateregistries() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.CertificateRegistries)
  return certificateregistries_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::NonformalizedAttachment >*
MessageToPost::mutable_certificateregistries() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.CertificateRegistries)
  return &certificateregistries_;
}

// repeated .Diadoc.Api.Proto.Events.ReconciliationActAttachment ReconciliationActs = 22;
inline int MessageToPost::reconciliationacts_size() const {
  return reconciliationacts_.size();
}
inline void MessageToPost::clear_reconciliationacts() {
  reconciliationacts_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ReconciliationActAttachment& MessageToPost::reconciliationacts(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.ReconciliationActs)
  return reconciliationacts_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ReconciliationActAttachment* MessageToPost::mutable_reconciliationacts(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.ReconciliationActs)
  return reconciliationacts_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ReconciliationActAttachment* MessageToPost::add_reconciliationacts() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.ReconciliationActs)
  return reconciliationacts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReconciliationActAttachment >&
MessageToPost::reconciliationacts() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.ReconciliationActs)
  return reconciliationacts_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReconciliationActAttachment >*
MessageToPost::mutable_reconciliationacts() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.ReconciliationActs)
  return &reconciliationacts_;
}

// repeated .Diadoc.Api.Proto.Events.ContractAttachment Contracts = 23;
inline int MessageToPost::contracts_size() const {
  return contracts_.size();
}
inline void MessageToPost::clear_contracts() {
  contracts_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ContractAttachment& MessageToPost::contracts(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.Contracts)
  return contracts_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ContractAttachment* MessageToPost::mutable_contracts(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.Contracts)
  return contracts_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ContractAttachment* MessageToPost::add_contracts() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.Contracts)
  return contracts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ContractAttachment >&
MessageToPost::contracts() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.Contracts)
  return contracts_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ContractAttachment >*
MessageToPost::mutable_contracts() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.Contracts)
  return &contracts_;
}

// repeated .Diadoc.Api.Proto.Events.Torg13Attachment Torg13Documents = 24;
inline int MessageToPost::torg13documents_size() const {
  return torg13documents_.size();
}
inline void MessageToPost::clear_torg13documents() {
  torg13documents_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::Torg13Attachment& MessageToPost::torg13documents(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.Torg13Documents)
  return torg13documents_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::Torg13Attachment* MessageToPost::mutable_torg13documents(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.Torg13Documents)
  return torg13documents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::Torg13Attachment* MessageToPost::add_torg13documents() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.Torg13Documents)
  return torg13documents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::Torg13Attachment >&
MessageToPost::torg13documents() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.Torg13Documents)
  return torg13documents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::Torg13Attachment >*
MessageToPost::mutable_torg13documents() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.Torg13Documents)
  return &torg13documents_;
}

// repeated .Diadoc.Api.Proto.Events.ServiceDetailsAttachment ServiceDetailsDocuments = 25;
inline int MessageToPost::servicedetailsdocuments_size() const {
  return servicedetailsdocuments_.size();
}
inline void MessageToPost::clear_servicedetailsdocuments() {
  servicedetailsdocuments_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ServiceDetailsAttachment& MessageToPost::servicedetailsdocuments(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.ServiceDetailsDocuments)
  return servicedetailsdocuments_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ServiceDetailsAttachment* MessageToPost::mutable_servicedetailsdocuments(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.ServiceDetailsDocuments)
  return servicedetailsdocuments_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ServiceDetailsAttachment* MessageToPost::add_servicedetailsdocuments() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.ServiceDetailsDocuments)
  return servicedetailsdocuments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ServiceDetailsAttachment >&
MessageToPost::servicedetailsdocuments() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.ServiceDetailsDocuments)
  return servicedetailsdocuments_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ServiceDetailsAttachment >*
MessageToPost::mutable_servicedetailsdocuments() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.ServiceDetailsDocuments)
  return &servicedetailsdocuments_;
}

// optional string ProxyBoxId = 26;
inline bool MessageToPost::has_proxyboxid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MessageToPost::set_has_proxyboxid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MessageToPost::clear_has_proxyboxid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MessageToPost::clear_proxyboxid() {
  if (proxyboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyboxid_->clear();
  }
  clear_has_proxyboxid();
}
inline const ::std::string& MessageToPost::proxyboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.ProxyBoxId)
  return *proxyboxid_;
}
inline void MessageToPost::set_proxyboxid(const ::std::string& value) {
  set_has_proxyboxid();
  if (proxyboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyboxid_ = new ::std::string;
  }
  proxyboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.ProxyBoxId)
}
inline void MessageToPost::set_proxyboxid(const char* value) {
  set_has_proxyboxid();
  if (proxyboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyboxid_ = new ::std::string;
  }
  proxyboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.MessageToPost.ProxyBoxId)
}
inline void MessageToPost::set_proxyboxid(const char* value, size_t size) {
  set_has_proxyboxid();
  if (proxyboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyboxid_ = new ::std::string;
  }
  proxyboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.MessageToPost.ProxyBoxId)
}
inline ::std::string* MessageToPost::mutable_proxyboxid() {
  set_has_proxyboxid();
  if (proxyboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.ProxyBoxId)
  return proxyboxid_;
}
inline ::std::string* MessageToPost::release_proxyboxid() {
  clear_has_proxyboxid();
  if (proxyboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyboxid_;
    proxyboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageToPost::set_allocated_proxyboxid(::std::string* proxyboxid) {
  if (proxyboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyboxid_;
  }
  if (proxyboxid) {
    set_has_proxyboxid();
    proxyboxid_ = proxyboxid;
  } else {
    clear_has_proxyboxid();
    proxyboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.MessageToPost.ProxyBoxId)
}

// optional string ProxyDepartmentId = 27;
inline bool MessageToPost::has_proxydepartmentid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MessageToPost::set_has_proxydepartmentid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MessageToPost::clear_has_proxydepartmentid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MessageToPost::clear_proxydepartmentid() {
  if (proxydepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxydepartmentid_->clear();
  }
  clear_has_proxydepartmentid();
}
inline const ::std::string& MessageToPost::proxydepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.ProxyDepartmentId)
  return *proxydepartmentid_;
}
inline void MessageToPost::set_proxydepartmentid(const ::std::string& value) {
  set_has_proxydepartmentid();
  if (proxydepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxydepartmentid_ = new ::std::string;
  }
  proxydepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.ProxyDepartmentId)
}
inline void MessageToPost::set_proxydepartmentid(const char* value) {
  set_has_proxydepartmentid();
  if (proxydepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxydepartmentid_ = new ::std::string;
  }
  proxydepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.MessageToPost.ProxyDepartmentId)
}
inline void MessageToPost::set_proxydepartmentid(const char* value, size_t size) {
  set_has_proxydepartmentid();
  if (proxydepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxydepartmentid_ = new ::std::string;
  }
  proxydepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.MessageToPost.ProxyDepartmentId)
}
inline ::std::string* MessageToPost::mutable_proxydepartmentid() {
  set_has_proxydepartmentid();
  if (proxydepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxydepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.ProxyDepartmentId)
  return proxydepartmentid_;
}
inline ::std::string* MessageToPost::release_proxydepartmentid() {
  clear_has_proxydepartmentid();
  if (proxydepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxydepartmentid_;
    proxydepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageToPost::set_allocated_proxydepartmentid(::std::string* proxydepartmentid) {
  if (proxydepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxydepartmentid_;
  }
  if (proxydepartmentid) {
    set_has_proxydepartmentid();
    proxydepartmentid_ = proxydepartmentid;
  } else {
    clear_has_proxydepartmentid();
    proxydepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.MessageToPost.ProxyDepartmentId)
}

// repeated .Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment EncryptedInvoices = 28;
inline int MessageToPost::encryptedinvoices_size() const {
  return encryptedinvoices_.size();
}
inline void MessageToPost::clear_encryptedinvoices() {
  encryptedinvoices_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::EncryptedInvoiceAttachment& MessageToPost::encryptedinvoices(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.EncryptedInvoices)
  return encryptedinvoices_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::EncryptedInvoiceAttachment* MessageToPost::mutable_encryptedinvoices(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.EncryptedInvoices)
  return encryptedinvoices_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::EncryptedInvoiceAttachment* MessageToPost::add_encryptedinvoices() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.EncryptedInvoices)
  return encryptedinvoices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedInvoiceAttachment >&
MessageToPost::encryptedinvoices() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.EncryptedInvoices)
  return encryptedinvoices_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedInvoiceAttachment >*
MessageToPost::mutable_encryptedinvoices() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.EncryptedInvoices)
  return &encryptedinvoices_;
}

// repeated .Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment EncryptedXmlTorg12SellerTitles = 29;
inline int MessageToPost::encryptedxmltorg12sellertitles_size() const {
  return encryptedxmltorg12sellertitles_.size();
}
inline void MessageToPost::clear_encryptedxmltorg12sellertitles() {
  encryptedxmltorg12sellertitles_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment& MessageToPost::encryptedxmltorg12sellertitles(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.EncryptedXmlTorg12SellerTitles)
  return encryptedxmltorg12sellertitles_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment* MessageToPost::mutable_encryptedxmltorg12sellertitles(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.EncryptedXmlTorg12SellerTitles)
  return encryptedxmltorg12sellertitles_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment* MessageToPost::add_encryptedxmltorg12sellertitles() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.EncryptedXmlTorg12SellerTitles)
  return encryptedxmltorg12sellertitles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment >&
MessageToPost::encryptedxmltorg12sellertitles() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.EncryptedXmlTorg12SellerTitles)
  return encryptedxmltorg12sellertitles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment >*
MessageToPost::mutable_encryptedxmltorg12sellertitles() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.EncryptedXmlTorg12SellerTitles)
  return &encryptedxmltorg12sellertitles_;
}

// repeated .Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment EncryptedXmlAcceptanceCertificateSellerTitles = 30;
inline int MessageToPost::encryptedxmlacceptancecertificatesellertitles_size() const {
  return encryptedxmlacceptancecertificatesellertitles_.size();
}
inline void MessageToPost::clear_encryptedxmlacceptancecertificatesellertitles() {
  encryptedxmlacceptancecertificatesellertitles_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment& MessageToPost::encryptedxmlacceptancecertificatesellertitles(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.EncryptedXmlAcceptanceCertificateSellerTitles)
  return encryptedxmlacceptancecertificatesellertitles_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment* MessageToPost::mutable_encryptedxmlacceptancecertificatesellertitles(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.EncryptedXmlAcceptanceCertificateSellerTitles)
  return encryptedxmlacceptancecertificatesellertitles_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment* MessageToPost::add_encryptedxmlacceptancecertificatesellertitles() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.EncryptedXmlAcceptanceCertificateSellerTitles)
  return encryptedxmlacceptancecertificatesellertitles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment >&
MessageToPost::encryptedxmlacceptancecertificatesellertitles() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.EncryptedXmlAcceptanceCertificateSellerTitles)
  return encryptedxmlacceptancecertificatesellertitles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EncryptedXmlDocumentAttachment >*
MessageToPost::mutable_encryptedxmlacceptancecertificatesellertitles() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.EncryptedXmlAcceptanceCertificateSellerTitles)
  return &encryptedxmlacceptancecertificatesellertitles_;
}

// repeated .Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment SupplementaryAgreements = 31;
inline int MessageToPost::supplementaryagreements_size() const {
  return supplementaryagreements_.size();
}
inline void MessageToPost::clear_supplementaryagreements() {
  supplementaryagreements_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::SupplementaryAgreementAttachment& MessageToPost::supplementaryagreements(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.SupplementaryAgreements)
  return supplementaryagreements_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::SupplementaryAgreementAttachment* MessageToPost::mutable_supplementaryagreements(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.SupplementaryAgreements)
  return supplementaryagreements_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::SupplementaryAgreementAttachment* MessageToPost::add_supplementaryagreements() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.SupplementaryAgreements)
  return supplementaryagreements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::SupplementaryAgreementAttachment >&
MessageToPost::supplementaryagreements() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.SupplementaryAgreements)
  return supplementaryagreements_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::SupplementaryAgreementAttachment >*
MessageToPost::mutable_supplementaryagreements() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.SupplementaryAgreements)
  return &supplementaryagreements_;
}

// optional bool LockPacket = 32 [default = false];
inline bool MessageToPost::has_lockpacket() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void MessageToPost::set_has_lockpacket() {
  _has_bits_[0] |= 0x40000000u;
}
inline void MessageToPost::clear_has_lockpacket() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void MessageToPost::clear_lockpacket() {
  lockpacket_ = false;
  clear_has_lockpacket();
}
inline bool MessageToPost::lockpacket() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.LockPacket)
  return lockpacket_;
}
inline void MessageToPost::set_lockpacket(bool value) {
  set_has_lockpacket();
  lockpacket_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.LockPacket)
}

// repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment UniversalTransferDocumentSellerTitles = 33;
inline int MessageToPost::universaltransferdocumentsellertitles_size() const {
  return universaltransferdocumentsellertitles_.size();
}
inline void MessageToPost::clear_universaltransferdocumentsellertitles() {
  universaltransferdocumentsellertitles_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::XmlDocumentAttachment& MessageToPost::universaltransferdocumentsellertitles(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.UniversalTransferDocumentSellerTitles)
  return universaltransferdocumentsellertitles_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* MessageToPost::mutable_universaltransferdocumentsellertitles(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.UniversalTransferDocumentSellerTitles)
  return universaltransferdocumentsellertitles_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::XmlDocumentAttachment* MessageToPost::add_universaltransferdocumentsellertitles() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.UniversalTransferDocumentSellerTitles)
  return universaltransferdocumentsellertitles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >&
MessageToPost::universaltransferdocumentsellertitles() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.UniversalTransferDocumentSellerTitles)
  return universaltransferdocumentsellertitles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlDocumentAttachment >*
MessageToPost::mutable_universaltransferdocumentsellertitles() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.UniversalTransferDocumentSellerTitles)
  return &universaltransferdocumentsellertitles_;
}

// repeated .Diadoc.Api.Proto.Events.DocumentAttachment DocumentAttachments = 34;
inline int MessageToPost::documentattachments_size() const {
  return documentattachments_.size();
}
inline void MessageToPost::clear_documentattachments() {
  documentattachments_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::DocumentAttachment& MessageToPost::documentattachments(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.DocumentAttachments)
  return documentattachments_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentAttachment* MessageToPost::mutable_documentattachments(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToPost.DocumentAttachments)
  return documentattachments_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentAttachment* MessageToPost::add_documentattachments() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToPost.DocumentAttachments)
  return documentattachments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentAttachment >&
MessageToPost::documentattachments() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToPost.DocumentAttachments)
  return documentattachments_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentAttachment >*
MessageToPost::mutable_documentattachments() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToPost.DocumentAttachments)
  return &documentattachments_;
}

// optional .Diadoc.Api.Proto.LockMode LockMode = 35 [default = None];
inline bool MessageToPost::has_lockmode() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void MessageToPost::set_has_lockmode() {
  _has_bits_[1] |= 0x00000002u;
}
inline void MessageToPost::clear_has_lockmode() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void MessageToPost::clear_lockmode() {
  lockmode_ = 1;
  clear_has_lockmode();
}
inline ::Diadoc::Api::Proto::LockMode MessageToPost::lockmode() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToPost.LockMode)
  return static_cast< ::Diadoc::Api::Proto::LockMode >(lockmode_);
}
inline void MessageToPost::set_lockmode(::Diadoc::Api::Proto::LockMode value) {
  assert(::Diadoc::Api::Proto::LockMode_IsValid(value));
  set_has_lockmode();
  lockmode_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToPost.LockMode)
}

// -------------------------------------------------------------------

// EncryptedXmlDocumentAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool EncryptedXmlDocumentAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncryptedXmlDocumentAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncryptedXmlDocumentAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncryptedXmlDocumentAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& EncryptedXmlDocumentAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* EncryptedXmlDocumentAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* EncryptedXmlDocumentAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void EncryptedXmlDocumentAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.SignedContent)
}

// optional string Comment = 3;
inline bool EncryptedXmlDocumentAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncryptedXmlDocumentAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EncryptedXmlDocumentAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EncryptedXmlDocumentAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& EncryptedXmlDocumentAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.Comment)
  return *comment_;
}
inline void EncryptedXmlDocumentAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.Comment)
}
inline void EncryptedXmlDocumentAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.Comment)
}
inline void EncryptedXmlDocumentAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.Comment)
}
inline ::std::string* EncryptedXmlDocumentAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.Comment)
  return comment_;
}
inline ::std::string* EncryptedXmlDocumentAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncryptedXmlDocumentAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.Comment)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
inline int EncryptedXmlDocumentAttachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void EncryptedXmlDocumentAttachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& EncryptedXmlDocumentAttachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* EncryptedXmlDocumentAttachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* EncryptedXmlDocumentAttachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
EncryptedXmlDocumentAttachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
EncryptedXmlDocumentAttachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
inline int EncryptedXmlDocumentAttachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void EncryptedXmlDocumentAttachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& EncryptedXmlDocumentAttachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* EncryptedXmlDocumentAttachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* EncryptedXmlDocumentAttachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
EncryptedXmlDocumentAttachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
EncryptedXmlDocumentAttachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// optional string CustomDocumentId = 6;
inline bool EncryptedXmlDocumentAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EncryptedXmlDocumentAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EncryptedXmlDocumentAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EncryptedXmlDocumentAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& EncryptedXmlDocumentAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void EncryptedXmlDocumentAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.CustomDocumentId)
}
inline void EncryptedXmlDocumentAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.CustomDocumentId)
}
inline void EncryptedXmlDocumentAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.CustomDocumentId)
}
inline ::std::string* EncryptedXmlDocumentAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* EncryptedXmlDocumentAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncryptedXmlDocumentAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.CustomDocumentId)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 7;
inline int EncryptedXmlDocumentAttachment::customdata_size() const {
  return customdata_.size();
}
inline void EncryptedXmlDocumentAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& EncryptedXmlDocumentAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* EncryptedXmlDocumentAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* EncryptedXmlDocumentAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
EncryptedXmlDocumentAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
EncryptedXmlDocumentAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.CustomData)
  return &customdata_;
}

// required .Diadoc.Api.Proto.Events.EncryptedDocumentMetadata Metadata = 8;
inline bool EncryptedXmlDocumentAttachment::has_metadata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EncryptedXmlDocumentAttachment::set_has_metadata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EncryptedXmlDocumentAttachment::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EncryptedXmlDocumentAttachment::clear_metadata() {
  if (metadata_ != NULL) metadata_->::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata::Clear();
  clear_has_metadata();
}
inline const ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata& EncryptedXmlDocumentAttachment::metadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* EncryptedXmlDocumentAttachment::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) metadata_ = new ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.Metadata)
  return metadata_;
}
inline ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* EncryptedXmlDocumentAttachment::release_metadata() {
  clear_has_metadata();
  ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void EncryptedXmlDocumentAttachment::set_allocated_metadata(::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.Metadata)
}

// required .Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata XmlBasicMetadata = 9;
inline bool EncryptedXmlDocumentAttachment::has_xmlbasicmetadata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EncryptedXmlDocumentAttachment::set_has_xmlbasicmetadata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EncryptedXmlDocumentAttachment::clear_has_xmlbasicmetadata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EncryptedXmlDocumentAttachment::clear_xmlbasicmetadata() {
  if (xmlbasicmetadata_ != NULL) xmlbasicmetadata_->::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata::Clear();
  clear_has_xmlbasicmetadata();
}
inline const ::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata& EncryptedXmlDocumentAttachment::xmlbasicmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.XmlBasicMetadata)
  return xmlbasicmetadata_ != NULL ? *xmlbasicmetadata_ : *default_instance_->xmlbasicmetadata_;
}
inline ::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata* EncryptedXmlDocumentAttachment::mutable_xmlbasicmetadata() {
  set_has_xmlbasicmetadata();
  if (xmlbasicmetadata_ == NULL) xmlbasicmetadata_ = new ::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.XmlBasicMetadata)
  return xmlbasicmetadata_;
}
inline ::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata* EncryptedXmlDocumentAttachment::release_xmlbasicmetadata() {
  clear_has_xmlbasicmetadata();
  ::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata* temp = xmlbasicmetadata_;
  xmlbasicmetadata_ = NULL;
  return temp;
}
inline void EncryptedXmlDocumentAttachment::set_allocated_xmlbasicmetadata(::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata* xmlbasicmetadata) {
  delete xmlbasicmetadata_;
  xmlbasicmetadata_ = xmlbasicmetadata;
  if (xmlbasicmetadata) {
    set_has_xmlbasicmetadata();
  } else {
    clear_has_xmlbasicmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment.XmlBasicMetadata)
}

// -------------------------------------------------------------------

// EncryptedInvoiceAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool EncryptedInvoiceAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncryptedInvoiceAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncryptedInvoiceAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncryptedInvoiceAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& EncryptedInvoiceAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* EncryptedInvoiceAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* EncryptedInvoiceAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void EncryptedInvoiceAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.SignedContent)
}

// optional string Comment = 3;
inline bool EncryptedInvoiceAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncryptedInvoiceAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EncryptedInvoiceAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EncryptedInvoiceAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& EncryptedInvoiceAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.Comment)
  return *comment_;
}
inline void EncryptedInvoiceAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.Comment)
}
inline void EncryptedInvoiceAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.Comment)
}
inline void EncryptedInvoiceAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.Comment)
}
inline ::std::string* EncryptedInvoiceAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.Comment)
  return comment_;
}
inline ::std::string* EncryptedInvoiceAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncryptedInvoiceAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.Comment)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
inline int EncryptedInvoiceAttachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void EncryptedInvoiceAttachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& EncryptedInvoiceAttachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* EncryptedInvoiceAttachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* EncryptedInvoiceAttachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
EncryptedInvoiceAttachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
EncryptedInvoiceAttachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
inline int EncryptedInvoiceAttachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void EncryptedInvoiceAttachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& EncryptedInvoiceAttachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* EncryptedInvoiceAttachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* EncryptedInvoiceAttachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
EncryptedInvoiceAttachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
EncryptedInvoiceAttachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// optional string CustomDocumentId = 6;
inline bool EncryptedInvoiceAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EncryptedInvoiceAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EncryptedInvoiceAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EncryptedInvoiceAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& EncryptedInvoiceAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void EncryptedInvoiceAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.CustomDocumentId)
}
inline void EncryptedInvoiceAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.CustomDocumentId)
}
inline void EncryptedInvoiceAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.CustomDocumentId)
}
inline ::std::string* EncryptedInvoiceAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* EncryptedInvoiceAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncryptedInvoiceAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.CustomDocumentId)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 7;
inline int EncryptedInvoiceAttachment::customdata_size() const {
  return customdata_.size();
}
inline void EncryptedInvoiceAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& EncryptedInvoiceAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* EncryptedInvoiceAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* EncryptedInvoiceAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
EncryptedInvoiceAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
EncryptedInvoiceAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.CustomData)
  return &customdata_;
}

// required .Diadoc.Api.Proto.Events.EncryptedDocumentMetadata Metadata = 8;
inline bool EncryptedInvoiceAttachment::has_metadata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EncryptedInvoiceAttachment::set_has_metadata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EncryptedInvoiceAttachment::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EncryptedInvoiceAttachment::clear_metadata() {
  if (metadata_ != NULL) metadata_->::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata::Clear();
  clear_has_metadata();
}
inline const ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata& EncryptedInvoiceAttachment::metadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.Metadata)
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* EncryptedInvoiceAttachment::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) metadata_ = new ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.Metadata)
  return metadata_;
}
inline ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* EncryptedInvoiceAttachment::release_metadata() {
  clear_has_metadata();
  ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void EncryptedInvoiceAttachment::set_allocated_metadata(::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.Metadata)
}

// optional .Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata InvoiceMetadata = 9;
inline bool EncryptedInvoiceAttachment::has_invoicemetadata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EncryptedInvoiceAttachment::set_has_invoicemetadata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EncryptedInvoiceAttachment::clear_has_invoicemetadata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EncryptedInvoiceAttachment::clear_invoicemetadata() {
  if (invoicemetadata_ != NULL) invoicemetadata_->::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata::Clear();
  clear_has_invoicemetadata();
}
inline const ::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata& EncryptedInvoiceAttachment::invoicemetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.InvoiceMetadata)
  return invoicemetadata_ != NULL ? *invoicemetadata_ : *default_instance_->invoicemetadata_;
}
inline ::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata* EncryptedInvoiceAttachment::mutable_invoicemetadata() {
  set_has_invoicemetadata();
  if (invoicemetadata_ == NULL) invoicemetadata_ = new ::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.InvoiceMetadata)
  return invoicemetadata_;
}
inline ::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata* EncryptedInvoiceAttachment::release_invoicemetadata() {
  clear_has_invoicemetadata();
  ::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata* temp = invoicemetadata_;
  invoicemetadata_ = NULL;
  return temp;
}
inline void EncryptedInvoiceAttachment::set_allocated_invoicemetadata(::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata* invoicemetadata) {
  delete invoicemetadata_;
  invoicemetadata_ = invoicemetadata;
  if (invoicemetadata) {
    set_has_invoicemetadata();
  } else {
    clear_has_invoicemetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.InvoiceMetadata)
}

// optional .Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata InvoiceCorrectionMetadata = 10;
inline bool EncryptedInvoiceAttachment::has_invoicecorrectionmetadata() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EncryptedInvoiceAttachment::set_has_invoicecorrectionmetadata() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EncryptedInvoiceAttachment::clear_has_invoicecorrectionmetadata() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EncryptedInvoiceAttachment::clear_invoicecorrectionmetadata() {
  if (invoicecorrectionmetadata_ != NULL) invoicecorrectionmetadata_->::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata::Clear();
  clear_has_invoicecorrectionmetadata();
}
inline const ::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata& EncryptedInvoiceAttachment::invoicecorrectionmetadata() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.InvoiceCorrectionMetadata)
  return invoicecorrectionmetadata_ != NULL ? *invoicecorrectionmetadata_ : *default_instance_->invoicecorrectionmetadata_;
}
inline ::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata* EncryptedInvoiceAttachment::mutable_invoicecorrectionmetadata() {
  set_has_invoicecorrectionmetadata();
  if (invoicecorrectionmetadata_ == NULL) invoicecorrectionmetadata_ = new ::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.InvoiceCorrectionMetadata)
  return invoicecorrectionmetadata_;
}
inline ::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata* EncryptedInvoiceAttachment::release_invoicecorrectionmetadata() {
  clear_has_invoicecorrectionmetadata();
  ::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata* temp = invoicecorrectionmetadata_;
  invoicecorrectionmetadata_ = NULL;
  return temp;
}
inline void EncryptedInvoiceAttachment::set_allocated_invoicecorrectionmetadata(::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata* invoicecorrectionmetadata) {
  delete invoicecorrectionmetadata_;
  invoicecorrectionmetadata_ = invoicecorrectionmetadata;
  if (invoicecorrectionmetadata) {
    set_has_invoicecorrectionmetadata();
  } else {
    clear_has_invoicecorrectionmetadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment.InvoiceCorrectionMetadata)
}

// -------------------------------------------------------------------

// EncryptedDocumentMetadata

// required string FileId = 1;
inline bool EncryptedDocumentMetadata::has_fileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncryptedDocumentMetadata::set_has_fileid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncryptedDocumentMetadata::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncryptedDocumentMetadata::clear_fileid() {
  if (fileid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileid_->clear();
  }
  clear_has_fileid();
}
inline const ::std::string& EncryptedDocumentMetadata::fileid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.FileId)
  return *fileid_;
}
inline void EncryptedDocumentMetadata::set_fileid(const ::std::string& value) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.FileId)
}
inline void EncryptedDocumentMetadata::set_fileid(const char* value) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.FileId)
}
inline void EncryptedDocumentMetadata::set_fileid(const char* value, size_t size) {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileid_ = new ::std::string;
  }
  fileid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.FileId)
}
inline ::std::string* EncryptedDocumentMetadata::mutable_fileid() {
  set_has_fileid();
  if (fileid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.FileId)
  return fileid_;
}
inline ::std::string* EncryptedDocumentMetadata::release_fileid() {
  clear_has_fileid();
  if (fileid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fileid_;
    fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncryptedDocumentMetadata::set_allocated_fileid(::std::string* fileid) {
  if (fileid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fileid_;
  }
  if (fileid) {
    set_has_fileid();
    fileid_ = fileid;
  } else {
    clear_has_fileid();
    fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.FileId)
}

// required string BuyerFnsParticipantId = 2;
inline bool EncryptedDocumentMetadata::has_buyerfnsparticipantid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncryptedDocumentMetadata::set_has_buyerfnsparticipantid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EncryptedDocumentMetadata::clear_has_buyerfnsparticipantid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EncryptedDocumentMetadata::clear_buyerfnsparticipantid() {
  if (buyerfnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyerfnsparticipantid_->clear();
  }
  clear_has_buyerfnsparticipantid();
}
inline const ::std::string& EncryptedDocumentMetadata::buyerfnsparticipantid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.BuyerFnsParticipantId)
  return *buyerfnsparticipantid_;
}
inline void EncryptedDocumentMetadata::set_buyerfnsparticipantid(const ::std::string& value) {
  set_has_buyerfnsparticipantid();
  if (buyerfnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyerfnsparticipantid_ = new ::std::string;
  }
  buyerfnsparticipantid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.BuyerFnsParticipantId)
}
inline void EncryptedDocumentMetadata::set_buyerfnsparticipantid(const char* value) {
  set_has_buyerfnsparticipantid();
  if (buyerfnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyerfnsparticipantid_ = new ::std::string;
  }
  buyerfnsparticipantid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.BuyerFnsParticipantId)
}
inline void EncryptedDocumentMetadata::set_buyerfnsparticipantid(const char* value, size_t size) {
  set_has_buyerfnsparticipantid();
  if (buyerfnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyerfnsparticipantid_ = new ::std::string;
  }
  buyerfnsparticipantid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.BuyerFnsParticipantId)
}
inline ::std::string* EncryptedDocumentMetadata::mutable_buyerfnsparticipantid() {
  set_has_buyerfnsparticipantid();
  if (buyerfnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyerfnsparticipantid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.BuyerFnsParticipantId)
  return buyerfnsparticipantid_;
}
inline ::std::string* EncryptedDocumentMetadata::release_buyerfnsparticipantid() {
  clear_has_buyerfnsparticipantid();
  if (buyerfnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = buyerfnsparticipantid_;
    buyerfnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncryptedDocumentMetadata::set_allocated_buyerfnsparticipantid(::std::string* buyerfnsparticipantid) {
  if (buyerfnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyerfnsparticipantid_;
  }
  if (buyerfnsparticipantid) {
    set_has_buyerfnsparticipantid();
    buyerfnsparticipantid_ = buyerfnsparticipantid;
  } else {
    clear_has_buyerfnsparticipantid();
    buyerfnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.BuyerFnsParticipantId)
}

// required string SenderFnsParticipantId = 3;
inline bool EncryptedDocumentMetadata::has_senderfnsparticipantid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EncryptedDocumentMetadata::set_has_senderfnsparticipantid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EncryptedDocumentMetadata::clear_has_senderfnsparticipantid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EncryptedDocumentMetadata::clear_senderfnsparticipantid() {
  if (senderfnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderfnsparticipantid_->clear();
  }
  clear_has_senderfnsparticipantid();
}
inline const ::std::string& EncryptedDocumentMetadata::senderfnsparticipantid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.SenderFnsParticipantId)
  return *senderfnsparticipantid_;
}
inline void EncryptedDocumentMetadata::set_senderfnsparticipantid(const ::std::string& value) {
  set_has_senderfnsparticipantid();
  if (senderfnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderfnsparticipantid_ = new ::std::string;
  }
  senderfnsparticipantid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.SenderFnsParticipantId)
}
inline void EncryptedDocumentMetadata::set_senderfnsparticipantid(const char* value) {
  set_has_senderfnsparticipantid();
  if (senderfnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderfnsparticipantid_ = new ::std::string;
  }
  senderfnsparticipantid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.SenderFnsParticipantId)
}
inline void EncryptedDocumentMetadata::set_senderfnsparticipantid(const char* value, size_t size) {
  set_has_senderfnsparticipantid();
  if (senderfnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderfnsparticipantid_ = new ::std::string;
  }
  senderfnsparticipantid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.SenderFnsParticipantId)
}
inline ::std::string* EncryptedDocumentMetadata::mutable_senderfnsparticipantid() {
  set_has_senderfnsparticipantid();
  if (senderfnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderfnsparticipantid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.SenderFnsParticipantId)
  return senderfnsparticipantid_;
}
inline ::std::string* EncryptedDocumentMetadata::release_senderfnsparticipantid() {
  clear_has_senderfnsparticipantid();
  if (senderfnsparticipantid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = senderfnsparticipantid_;
    senderfnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncryptedDocumentMetadata::set_allocated_senderfnsparticipantid(::std::string* senderfnsparticipantid) {
  if (senderfnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete senderfnsparticipantid_;
  }
  if (senderfnsparticipantid) {
    set_has_senderfnsparticipantid();
    senderfnsparticipantid_ = senderfnsparticipantid;
  } else {
    clear_has_senderfnsparticipantid();
    senderfnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.SenderFnsParticipantId)
}

// required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 4;
inline bool EncryptedDocumentMetadata::has_documentdateandnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EncryptedDocumentMetadata::set_has_documentdateandnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EncryptedDocumentMetadata::clear_has_documentdateandnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EncryptedDocumentMetadata::clear_documentdateandnumber() {
  if (documentdateandnumber_ != NULL) documentdateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
  clear_has_documentdateandnumber();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber& EncryptedDocumentMetadata::documentdateandnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.DocumentDateAndNumber)
  return documentdateandnumber_ != NULL ? *documentdateandnumber_ : *default_instance_->documentdateandnumber_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* EncryptedDocumentMetadata::mutable_documentdateandnumber() {
  set_has_documentdateandnumber();
  if (documentdateandnumber_ == NULL) documentdateandnumber_ = new ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.DocumentDateAndNumber)
  return documentdateandnumber_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* EncryptedDocumentMetadata::release_documentdateandnumber() {
  clear_has_documentdateandnumber();
  ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* temp = documentdateandnumber_;
  documentdateandnumber_ = NULL;
  return temp;
}
inline void EncryptedDocumentMetadata::set_allocated_documentdateandnumber(::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* documentdateandnumber) {
  delete documentdateandnumber_;
  documentdateandnumber_ = documentdateandnumber;
  if (documentdateandnumber) {
    set_has_documentdateandnumber();
  } else {
    clear_has_documentdateandnumber();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata.DocumentDateAndNumber)
}

// -------------------------------------------------------------------

// EncryptedXmlBasicDocumentMetadata

// required string FormationDate = 1;
inline bool EncryptedXmlBasicDocumentMetadata::has_formationdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncryptedXmlBasicDocumentMetadata::set_has_formationdate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncryptedXmlBasicDocumentMetadata::clear_has_formationdate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncryptedXmlBasicDocumentMetadata::clear_formationdate() {
  if (formationdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formationdate_->clear();
  }
  clear_has_formationdate();
}
inline const ::std::string& EncryptedXmlBasicDocumentMetadata::formationdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.FormationDate)
  return *formationdate_;
}
inline void EncryptedXmlBasicDocumentMetadata::set_formationdate(const ::std::string& value) {
  set_has_formationdate();
  if (formationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formationdate_ = new ::std::string;
  }
  formationdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.FormationDate)
}
inline void EncryptedXmlBasicDocumentMetadata::set_formationdate(const char* value) {
  set_has_formationdate();
  if (formationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formationdate_ = new ::std::string;
  }
  formationdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.FormationDate)
}
inline void EncryptedXmlBasicDocumentMetadata::set_formationdate(const char* value, size_t size) {
  set_has_formationdate();
  if (formationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formationdate_ = new ::std::string;
  }
  formationdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.FormationDate)
}
inline ::std::string* EncryptedXmlBasicDocumentMetadata::mutable_formationdate() {
  set_has_formationdate();
  if (formationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formationdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.FormationDate)
  return formationdate_;
}
inline ::std::string* EncryptedXmlBasicDocumentMetadata::release_formationdate() {
  clear_has_formationdate();
  if (formationdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = formationdate_;
    formationdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncryptedXmlBasicDocumentMetadata::set_allocated_formationdate(::std::string* formationdate) {
  if (formationdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete formationdate_;
  }
  if (formationdate) {
    set_has_formationdate();
    formationdate_ = formationdate;
  } else {
    clear_has_formationdate();
    formationdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.FormationDate)
}

// required string FormationTime = 2;
inline bool EncryptedXmlBasicDocumentMetadata::has_formationtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncryptedXmlBasicDocumentMetadata::set_has_formationtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EncryptedXmlBasicDocumentMetadata::clear_has_formationtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EncryptedXmlBasicDocumentMetadata::clear_formationtime() {
  if (formationtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formationtime_->clear();
  }
  clear_has_formationtime();
}
inline const ::std::string& EncryptedXmlBasicDocumentMetadata::formationtime() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.FormationTime)
  return *formationtime_;
}
inline void EncryptedXmlBasicDocumentMetadata::set_formationtime(const ::std::string& value) {
  set_has_formationtime();
  if (formationtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formationtime_ = new ::std::string;
  }
  formationtime_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.FormationTime)
}
inline void EncryptedXmlBasicDocumentMetadata::set_formationtime(const char* value) {
  set_has_formationtime();
  if (formationtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formationtime_ = new ::std::string;
  }
  formationtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.FormationTime)
}
inline void EncryptedXmlBasicDocumentMetadata::set_formationtime(const char* value, size_t size) {
  set_has_formationtime();
  if (formationtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formationtime_ = new ::std::string;
  }
  formationtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.FormationTime)
}
inline ::std::string* EncryptedXmlBasicDocumentMetadata::mutable_formationtime() {
  set_has_formationtime();
  if (formationtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formationtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.FormationTime)
  return formationtime_;
}
inline ::std::string* EncryptedXmlBasicDocumentMetadata::release_formationtime() {
  clear_has_formationtime();
  if (formationtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = formationtime_;
    formationtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncryptedXmlBasicDocumentMetadata::set_allocated_formationtime(::std::string* formationtime) {
  if (formationtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete formationtime_;
  }
  if (formationtime) {
    set_has_formationtime();
    formationtime_ = formationtime;
  } else {
    clear_has_formationtime();
    formationtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.FormationTime)
}

// optional string DocumentName = 3;
inline bool EncryptedXmlBasicDocumentMetadata::has_documentname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EncryptedXmlBasicDocumentMetadata::set_has_documentname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EncryptedXmlBasicDocumentMetadata::clear_has_documentname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EncryptedXmlBasicDocumentMetadata::clear_documentname() {
  if (documentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentname_->clear();
  }
  clear_has_documentname();
}
inline const ::std::string& EncryptedXmlBasicDocumentMetadata::documentname() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.DocumentName)
  return *documentname_;
}
inline void EncryptedXmlBasicDocumentMetadata::set_documentname(const ::std::string& value) {
  set_has_documentname();
  if (documentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentname_ = new ::std::string;
  }
  documentname_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.DocumentName)
}
inline void EncryptedXmlBasicDocumentMetadata::set_documentname(const char* value) {
  set_has_documentname();
  if (documentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentname_ = new ::std::string;
  }
  documentname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.DocumentName)
}
inline void EncryptedXmlBasicDocumentMetadata::set_documentname(const char* value, size_t size) {
  set_has_documentname();
  if (documentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentname_ = new ::std::string;
  }
  documentname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.DocumentName)
}
inline ::std::string* EncryptedXmlBasicDocumentMetadata::mutable_documentname() {
  set_has_documentname();
  if (documentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.DocumentName)
  return documentname_;
}
inline ::std::string* EncryptedXmlBasicDocumentMetadata::release_documentname() {
  clear_has_documentname();
  if (documentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentname_;
    documentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncryptedXmlBasicDocumentMetadata::set_allocated_documentname(::std::string* documentname) {
  if (documentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentname_;
  }
  if (documentname) {
    set_has_documentname();
    documentname_ = documentname;
  } else {
    clear_has_documentname();
    documentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata.DocumentName)
}

// -------------------------------------------------------------------

// EncryptedInvoiceMetadata

// optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber RevisionDateAndNumber = 1;
inline bool EncryptedInvoiceMetadata::has_revisiondateandnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncryptedInvoiceMetadata::set_has_revisiondateandnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncryptedInvoiceMetadata::clear_has_revisiondateandnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncryptedInvoiceMetadata::clear_revisiondateandnumber() {
  if (revisiondateandnumber_ != NULL) revisiondateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
  clear_has_revisiondateandnumber();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber& EncryptedInvoiceMetadata::revisiondateandnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata.RevisionDateAndNumber)
  return revisiondateandnumber_ != NULL ? *revisiondateandnumber_ : *default_instance_->revisiondateandnumber_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* EncryptedInvoiceMetadata::mutable_revisiondateandnumber() {
  set_has_revisiondateandnumber();
  if (revisiondateandnumber_ == NULL) revisiondateandnumber_ = new ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata.RevisionDateAndNumber)
  return revisiondateandnumber_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* EncryptedInvoiceMetadata::release_revisiondateandnumber() {
  clear_has_revisiondateandnumber();
  ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* temp = revisiondateandnumber_;
  revisiondateandnumber_ = NULL;
  return temp;
}
inline void EncryptedInvoiceMetadata::set_allocated_revisiondateandnumber(::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* revisiondateandnumber) {
  delete revisiondateandnumber_;
  revisiondateandnumber_ = revisiondateandnumber;
  if (revisiondateandnumber) {
    set_has_revisiondateandnumber();
  } else {
    clear_has_revisiondateandnumber();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata.RevisionDateAndNumber)
}

// -------------------------------------------------------------------

// EncryptedInvoiceCorrectionMetadata

// required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 1;
inline bool EncryptedInvoiceCorrectionMetadata::has_originalinvoicedateandnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncryptedInvoiceCorrectionMetadata::set_has_originalinvoicedateandnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncryptedInvoiceCorrectionMetadata::clear_has_originalinvoicedateandnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncryptedInvoiceCorrectionMetadata::clear_originalinvoicedateandnumber() {
  if (originalinvoicedateandnumber_ != NULL) originalinvoicedateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
  clear_has_originalinvoicedateandnumber();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber& EncryptedInvoiceCorrectionMetadata::originalinvoicedateandnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata.OriginalInvoiceDateAndNumber)
  return originalinvoicedateandnumber_ != NULL ? *originalinvoicedateandnumber_ : *default_instance_->originalinvoicedateandnumber_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* EncryptedInvoiceCorrectionMetadata::mutable_originalinvoicedateandnumber() {
  set_has_originalinvoicedateandnumber();
  if (originalinvoicedateandnumber_ == NULL) originalinvoicedateandnumber_ = new ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata.OriginalInvoiceDateAndNumber)
  return originalinvoicedateandnumber_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* EncryptedInvoiceCorrectionMetadata::release_originalinvoicedateandnumber() {
  clear_has_originalinvoicedateandnumber();
  ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* temp = originalinvoicedateandnumber_;
  originalinvoicedateandnumber_ = NULL;
  return temp;
}
inline void EncryptedInvoiceCorrectionMetadata::set_allocated_originalinvoicedateandnumber(::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* originalinvoicedateandnumber) {
  delete originalinvoicedateandnumber_;
  originalinvoicedateandnumber_ = originalinvoicedateandnumber;
  if (originalinvoicedateandnumber) {
    set_has_originalinvoicedateandnumber();
  } else {
    clear_has_originalinvoicedateandnumber();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata.OriginalInvoiceDateAndNumber)
}

// optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceRevisionDateAndNumber = 2;
inline bool EncryptedInvoiceCorrectionMetadata::has_originalinvoicerevisiondateandnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncryptedInvoiceCorrectionMetadata::set_has_originalinvoicerevisiondateandnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EncryptedInvoiceCorrectionMetadata::clear_has_originalinvoicerevisiondateandnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EncryptedInvoiceCorrectionMetadata::clear_originalinvoicerevisiondateandnumber() {
  if (originalinvoicerevisiondateandnumber_ != NULL) originalinvoicerevisiondateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
  clear_has_originalinvoicerevisiondateandnumber();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber& EncryptedInvoiceCorrectionMetadata::originalinvoicerevisiondateandnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata.OriginalInvoiceRevisionDateAndNumber)
  return originalinvoicerevisiondateandnumber_ != NULL ? *originalinvoicerevisiondateandnumber_ : *default_instance_->originalinvoicerevisiondateandnumber_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* EncryptedInvoiceCorrectionMetadata::mutable_originalinvoicerevisiondateandnumber() {
  set_has_originalinvoicerevisiondateandnumber();
  if (originalinvoicerevisiondateandnumber_ == NULL) originalinvoicerevisiondateandnumber_ = new ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata.OriginalInvoiceRevisionDateAndNumber)
  return originalinvoicerevisiondateandnumber_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* EncryptedInvoiceCorrectionMetadata::release_originalinvoicerevisiondateandnumber() {
  clear_has_originalinvoicerevisiondateandnumber();
  ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* temp = originalinvoicerevisiondateandnumber_;
  originalinvoicerevisiondateandnumber_ = NULL;
  return temp;
}
inline void EncryptedInvoiceCorrectionMetadata::set_allocated_originalinvoicerevisiondateandnumber(::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* originalinvoicerevisiondateandnumber) {
  delete originalinvoicerevisiondateandnumber_;
  originalinvoicerevisiondateandnumber_ = originalinvoicerevisiondateandnumber;
  if (originalinvoicerevisiondateandnumber) {
    set_has_originalinvoicerevisiondateandnumber();
  } else {
    clear_has_originalinvoicerevisiondateandnumber();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata.OriginalInvoiceRevisionDateAndNumber)
}

// optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber InvoiceCorrectionRevisionDateAndNumber = 3;
inline bool EncryptedInvoiceCorrectionMetadata::has_invoicecorrectionrevisiondateandnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EncryptedInvoiceCorrectionMetadata::set_has_invoicecorrectionrevisiondateandnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EncryptedInvoiceCorrectionMetadata::clear_has_invoicecorrectionrevisiondateandnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EncryptedInvoiceCorrectionMetadata::clear_invoicecorrectionrevisiondateandnumber() {
  if (invoicecorrectionrevisiondateandnumber_ != NULL) invoicecorrectionrevisiondateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
  clear_has_invoicecorrectionrevisiondateandnumber();
}
inline const ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber& EncryptedInvoiceCorrectionMetadata::invoicecorrectionrevisiondateandnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata.InvoiceCorrectionRevisionDateAndNumber)
  return invoicecorrectionrevisiondateandnumber_ != NULL ? *invoicecorrectionrevisiondateandnumber_ : *default_instance_->invoicecorrectionrevisiondateandnumber_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* EncryptedInvoiceCorrectionMetadata::mutable_invoicecorrectionrevisiondateandnumber() {
  set_has_invoicecorrectionrevisiondateandnumber();
  if (invoicecorrectionrevisiondateandnumber_ == NULL) invoicecorrectionrevisiondateandnumber_ = new ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata.InvoiceCorrectionRevisionDateAndNumber)
  return invoicecorrectionrevisiondateandnumber_;
}
inline ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* EncryptedInvoiceCorrectionMetadata::release_invoicecorrectionrevisiondateandnumber() {
  clear_has_invoicecorrectionrevisiondateandnumber();
  ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* temp = invoicecorrectionrevisiondateandnumber_;
  invoicecorrectionrevisiondateandnumber_ = NULL;
  return temp;
}
inline void EncryptedInvoiceCorrectionMetadata::set_allocated_invoicecorrectionrevisiondateandnumber(::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber* invoicecorrectionrevisiondateandnumber) {
  delete invoicecorrectionrevisiondateandnumber_;
  invoicecorrectionrevisiondateandnumber_ = invoicecorrectionrevisiondateandnumber;
  if (invoicecorrectionrevisiondateandnumber) {
    set_has_invoicecorrectionrevisiondateandnumber();
  } else {
    clear_has_invoicecorrectionrevisiondateandnumber();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata.InvoiceCorrectionRevisionDateAndNumber)
}

// -------------------------------------------------------------------

// XmlDocumentAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool XmlDocumentAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XmlDocumentAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void XmlDocumentAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void XmlDocumentAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& XmlDocumentAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.XmlDocumentAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* XmlDocumentAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.XmlDocumentAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* XmlDocumentAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void XmlDocumentAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.XmlDocumentAttachment.SignedContent)
}

// optional string Comment = 3;
inline bool XmlDocumentAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XmlDocumentAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void XmlDocumentAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void XmlDocumentAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& XmlDocumentAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.XmlDocumentAttachment.Comment)
  return *comment_;
}
inline void XmlDocumentAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.XmlDocumentAttachment.Comment)
}
inline void XmlDocumentAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.XmlDocumentAttachment.Comment)
}
inline void XmlDocumentAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.XmlDocumentAttachment.Comment)
}
inline ::std::string* XmlDocumentAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.XmlDocumentAttachment.Comment)
  return comment_;
}
inline ::std::string* XmlDocumentAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void XmlDocumentAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.XmlDocumentAttachment.Comment)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
inline int XmlDocumentAttachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void XmlDocumentAttachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& XmlDocumentAttachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.XmlDocumentAttachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* XmlDocumentAttachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.XmlDocumentAttachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* XmlDocumentAttachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.XmlDocumentAttachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
XmlDocumentAttachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.XmlDocumentAttachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
XmlDocumentAttachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.XmlDocumentAttachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
inline int XmlDocumentAttachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void XmlDocumentAttachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& XmlDocumentAttachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.XmlDocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* XmlDocumentAttachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.XmlDocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* XmlDocumentAttachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.XmlDocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
XmlDocumentAttachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.XmlDocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
XmlDocumentAttachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.XmlDocumentAttachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// optional string CustomDocumentId = 6;
inline bool XmlDocumentAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void XmlDocumentAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void XmlDocumentAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void XmlDocumentAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& XmlDocumentAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.XmlDocumentAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void XmlDocumentAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.XmlDocumentAttachment.CustomDocumentId)
}
inline void XmlDocumentAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.XmlDocumentAttachment.CustomDocumentId)
}
inline void XmlDocumentAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.XmlDocumentAttachment.CustomDocumentId)
}
inline ::std::string* XmlDocumentAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.XmlDocumentAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* XmlDocumentAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void XmlDocumentAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.XmlDocumentAttachment.CustomDocumentId)
}

// optional bool NeedReceipt = 7 [default = false];
inline bool XmlDocumentAttachment::has_needreceipt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void XmlDocumentAttachment::set_has_needreceipt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void XmlDocumentAttachment::clear_has_needreceipt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void XmlDocumentAttachment::clear_needreceipt() {
  needreceipt_ = false;
  clear_has_needreceipt();
}
inline bool XmlDocumentAttachment::needreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.XmlDocumentAttachment.NeedReceipt)
  return needreceipt_;
}
inline void XmlDocumentAttachment::set_needreceipt(bool value) {
  set_has_needreceipt();
  needreceipt_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.XmlDocumentAttachment.NeedReceipt)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 8;
inline int XmlDocumentAttachment::customdata_size() const {
  return customdata_.size();
}
inline void XmlDocumentAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& XmlDocumentAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.XmlDocumentAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* XmlDocumentAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.XmlDocumentAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* XmlDocumentAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.XmlDocumentAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
XmlDocumentAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.XmlDocumentAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
XmlDocumentAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.XmlDocumentAttachment.CustomData)
  return &customdata_;
}

// -------------------------------------------------------------------

// NonformalizedAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool NonformalizedAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NonformalizedAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NonformalizedAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NonformalizedAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& NonformalizedAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.NonformalizedAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* NonformalizedAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.NonformalizedAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* NonformalizedAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void NonformalizedAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.NonformalizedAttachment.SignedContent)
}

// required string FileName = 2;
inline bool NonformalizedAttachment::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NonformalizedAttachment::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NonformalizedAttachment::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NonformalizedAttachment::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& NonformalizedAttachment::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.NonformalizedAttachment.FileName)
  return *filename_;
}
inline void NonformalizedAttachment::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.NonformalizedAttachment.FileName)
}
inline void NonformalizedAttachment::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.NonformalizedAttachment.FileName)
}
inline void NonformalizedAttachment::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.NonformalizedAttachment.FileName)
}
inline ::std::string* NonformalizedAttachment::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.NonformalizedAttachment.FileName)
  return filename_;
}
inline ::std::string* NonformalizedAttachment::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NonformalizedAttachment::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.NonformalizedAttachment.FileName)
}

// optional string Comment = 3;
inline bool NonformalizedAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NonformalizedAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NonformalizedAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NonformalizedAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& NonformalizedAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.NonformalizedAttachment.Comment)
  return *comment_;
}
inline void NonformalizedAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.NonformalizedAttachment.Comment)
}
inline void NonformalizedAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.NonformalizedAttachment.Comment)
}
inline void NonformalizedAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.NonformalizedAttachment.Comment)
}
inline ::std::string* NonformalizedAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.NonformalizedAttachment.Comment)
  return comment_;
}
inline ::std::string* NonformalizedAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NonformalizedAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.NonformalizedAttachment.Comment)
}

// optional bool NeedRecipientSignature = 4 [default = false];
inline bool NonformalizedAttachment::has_needrecipientsignature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NonformalizedAttachment::set_has_needrecipientsignature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NonformalizedAttachment::clear_has_needrecipientsignature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NonformalizedAttachment::clear_needrecipientsignature() {
  needrecipientsignature_ = false;
  clear_has_needrecipientsignature();
}
inline bool NonformalizedAttachment::needrecipientsignature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.NonformalizedAttachment.NeedRecipientSignature)
  return needrecipientsignature_;
}
inline void NonformalizedAttachment::set_needrecipientsignature(bool value) {
  set_has_needrecipientsignature();
  needrecipientsignature_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.NonformalizedAttachment.NeedRecipientSignature)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
inline int NonformalizedAttachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void NonformalizedAttachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& NonformalizedAttachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.NonformalizedAttachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* NonformalizedAttachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.NonformalizedAttachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* NonformalizedAttachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.NonformalizedAttachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
NonformalizedAttachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.NonformalizedAttachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
NonformalizedAttachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.NonformalizedAttachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
inline int NonformalizedAttachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void NonformalizedAttachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& NonformalizedAttachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.NonformalizedAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* NonformalizedAttachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.NonformalizedAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* NonformalizedAttachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.NonformalizedAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
NonformalizedAttachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.NonformalizedAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
NonformalizedAttachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.NonformalizedAttachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// optional string DocumentDate = 7;
inline bool NonformalizedAttachment::has_documentdate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NonformalizedAttachment::set_has_documentdate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NonformalizedAttachment::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NonformalizedAttachment::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& NonformalizedAttachment::documentdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.NonformalizedAttachment.DocumentDate)
  return *documentdate_;
}
inline void NonformalizedAttachment::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.NonformalizedAttachment.DocumentDate)
}
inline void NonformalizedAttachment::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.NonformalizedAttachment.DocumentDate)
}
inline void NonformalizedAttachment::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.NonformalizedAttachment.DocumentDate)
}
inline ::std::string* NonformalizedAttachment::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.NonformalizedAttachment.DocumentDate)
  return documentdate_;
}
inline ::std::string* NonformalizedAttachment::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NonformalizedAttachment::set_allocated_documentdate(::std::string* documentdate) {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentdate) {
    set_has_documentdate();
    documentdate_ = documentdate;
  } else {
    clear_has_documentdate();
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.NonformalizedAttachment.DocumentDate)
}

// optional string DocumentNumber = 8;
inline bool NonformalizedAttachment::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NonformalizedAttachment::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NonformalizedAttachment::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NonformalizedAttachment::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& NonformalizedAttachment::documentnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.NonformalizedAttachment.DocumentNumber)
  return *documentnumber_;
}
inline void NonformalizedAttachment::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.NonformalizedAttachment.DocumentNumber)
}
inline void NonformalizedAttachment::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.NonformalizedAttachment.DocumentNumber)
}
inline void NonformalizedAttachment::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.NonformalizedAttachment.DocumentNumber)
}
inline ::std::string* NonformalizedAttachment::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.NonformalizedAttachment.DocumentNumber)
  return documentnumber_;
}
inline ::std::string* NonformalizedAttachment::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NonformalizedAttachment::set_allocated_documentnumber(::std::string* documentnumber) {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documentnumber) {
    set_has_documentnumber();
    documentnumber_ = documentnumber;
  } else {
    clear_has_documentnumber();
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.NonformalizedAttachment.DocumentNumber)
}

// optional string CustomDocumentId = 9;
inline bool NonformalizedAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NonformalizedAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NonformalizedAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NonformalizedAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& NonformalizedAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.NonformalizedAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void NonformalizedAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.NonformalizedAttachment.CustomDocumentId)
}
inline void NonformalizedAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.NonformalizedAttachment.CustomDocumentId)
}
inline void NonformalizedAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.NonformalizedAttachment.CustomDocumentId)
}
inline ::std::string* NonformalizedAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.NonformalizedAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* NonformalizedAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NonformalizedAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.NonformalizedAttachment.CustomDocumentId)
}

// optional bool NeedReceipt = 10 [default = false];
inline bool NonformalizedAttachment::has_needreceipt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NonformalizedAttachment::set_has_needreceipt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NonformalizedAttachment::clear_has_needreceipt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NonformalizedAttachment::clear_needreceipt() {
  needreceipt_ = false;
  clear_has_needreceipt();
}
inline bool NonformalizedAttachment::needreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.NonformalizedAttachment.NeedReceipt)
  return needreceipt_;
}
inline void NonformalizedAttachment::set_needreceipt(bool value) {
  set_has_needreceipt();
  needreceipt_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.NonformalizedAttachment.NeedReceipt)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
inline int NonformalizedAttachment::customdata_size() const {
  return customdata_.size();
}
inline void NonformalizedAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& NonformalizedAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.NonformalizedAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* NonformalizedAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.NonformalizedAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* NonformalizedAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.NonformalizedAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
NonformalizedAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.NonformalizedAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
NonformalizedAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.NonformalizedAttachment.CustomData)
  return &customdata_;
}

// -------------------------------------------------------------------

// BasicDocumentAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool BasicDocumentAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicDocumentAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BasicDocumentAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BasicDocumentAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& BasicDocumentAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* BasicDocumentAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.BasicDocumentAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* BasicDocumentAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void BasicDocumentAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.BasicDocumentAttachment.SignedContent)
}

// required string FileName = 2;
inline bool BasicDocumentAttachment::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BasicDocumentAttachment::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BasicDocumentAttachment::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BasicDocumentAttachment::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& BasicDocumentAttachment::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.FileName)
  return *filename_;
}
inline void BasicDocumentAttachment::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.BasicDocumentAttachment.FileName)
}
inline void BasicDocumentAttachment::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.BasicDocumentAttachment.FileName)
}
inline void BasicDocumentAttachment::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.BasicDocumentAttachment.FileName)
}
inline ::std::string* BasicDocumentAttachment::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.BasicDocumentAttachment.FileName)
  return filename_;
}
inline ::std::string* BasicDocumentAttachment::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BasicDocumentAttachment::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.BasicDocumentAttachment.FileName)
}

// optional string Comment = 3;
inline bool BasicDocumentAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BasicDocumentAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BasicDocumentAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BasicDocumentAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& BasicDocumentAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Comment)
  return *comment_;
}
inline void BasicDocumentAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Comment)
}
inline void BasicDocumentAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Comment)
}
inline void BasicDocumentAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Comment)
}
inline ::std::string* BasicDocumentAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Comment)
  return comment_;
}
inline ::std::string* BasicDocumentAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BasicDocumentAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Comment)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
inline int BasicDocumentAttachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void BasicDocumentAttachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& BasicDocumentAttachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* BasicDocumentAttachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.BasicDocumentAttachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* BasicDocumentAttachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.BasicDocumentAttachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
BasicDocumentAttachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.BasicDocumentAttachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
BasicDocumentAttachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.BasicDocumentAttachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
inline int BasicDocumentAttachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void BasicDocumentAttachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& BasicDocumentAttachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* BasicDocumentAttachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.BasicDocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* BasicDocumentAttachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.BasicDocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
BasicDocumentAttachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.BasicDocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
BasicDocumentAttachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.BasicDocumentAttachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// required string DocumentDate = 6;
inline bool BasicDocumentAttachment::has_documentdate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BasicDocumentAttachment::set_has_documentdate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BasicDocumentAttachment::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BasicDocumentAttachment::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& BasicDocumentAttachment::documentdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.DocumentDate)
  return *documentdate_;
}
inline void BasicDocumentAttachment::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.BasicDocumentAttachment.DocumentDate)
}
inline void BasicDocumentAttachment::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.BasicDocumentAttachment.DocumentDate)
}
inline void BasicDocumentAttachment::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.BasicDocumentAttachment.DocumentDate)
}
inline ::std::string* BasicDocumentAttachment::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.BasicDocumentAttachment.DocumentDate)
  return documentdate_;
}
inline ::std::string* BasicDocumentAttachment::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BasicDocumentAttachment::set_allocated_documentdate(::std::string* documentdate) {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentdate) {
    set_has_documentdate();
    documentdate_ = documentdate;
  } else {
    clear_has_documentdate();
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.BasicDocumentAttachment.DocumentDate)
}

// required string DocumentNumber = 7;
inline bool BasicDocumentAttachment::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BasicDocumentAttachment::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BasicDocumentAttachment::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BasicDocumentAttachment::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& BasicDocumentAttachment::documentnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.DocumentNumber)
  return *documentnumber_;
}
inline void BasicDocumentAttachment::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.BasicDocumentAttachment.DocumentNumber)
}
inline void BasicDocumentAttachment::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.BasicDocumentAttachment.DocumentNumber)
}
inline void BasicDocumentAttachment::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.BasicDocumentAttachment.DocumentNumber)
}
inline ::std::string* BasicDocumentAttachment::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.BasicDocumentAttachment.DocumentNumber)
  return documentnumber_;
}
inline ::std::string* BasicDocumentAttachment::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BasicDocumentAttachment::set_allocated_documentnumber(::std::string* documentnumber) {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documentnumber) {
    set_has_documentnumber();
    documentnumber_ = documentnumber;
  } else {
    clear_has_documentnumber();
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.BasicDocumentAttachment.DocumentNumber)
}

// required string Total = 8;
inline bool BasicDocumentAttachment::has_total() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BasicDocumentAttachment::set_has_total() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BasicDocumentAttachment::clear_has_total() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BasicDocumentAttachment::clear_total() {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_->clear();
  }
  clear_has_total();
}
inline const ::std::string& BasicDocumentAttachment::total() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Total)
  return *total_;
}
inline void BasicDocumentAttachment::set_total(const ::std::string& value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Total)
}
inline void BasicDocumentAttachment::set_total(const char* value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Total)
}
inline void BasicDocumentAttachment::set_total(const char* value, size_t size) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Total)
}
inline ::std::string* BasicDocumentAttachment::mutable_total() {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Total)
  return total_;
}
inline ::std::string* BasicDocumentAttachment::release_total() {
  clear_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = total_;
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BasicDocumentAttachment::set_allocated_total(::std::string* total) {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (total) {
    set_has_total();
    total_ = total;
  } else {
    clear_has_total();
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Total)
}

// optional string CustomDocumentId = 9;
inline bool BasicDocumentAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BasicDocumentAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BasicDocumentAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BasicDocumentAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& BasicDocumentAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void BasicDocumentAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.BasicDocumentAttachment.CustomDocumentId)
}
inline void BasicDocumentAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.BasicDocumentAttachment.CustomDocumentId)
}
inline void BasicDocumentAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.BasicDocumentAttachment.CustomDocumentId)
}
inline ::std::string* BasicDocumentAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.BasicDocumentAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* BasicDocumentAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BasicDocumentAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.BasicDocumentAttachment.CustomDocumentId)
}

// optional string Vat = 10;
inline bool BasicDocumentAttachment::has_vat() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BasicDocumentAttachment::set_has_vat() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BasicDocumentAttachment::clear_has_vat() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BasicDocumentAttachment::clear_vat() {
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_->clear();
  }
  clear_has_vat();
}
inline const ::std::string& BasicDocumentAttachment::vat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Vat)
  return *vat_;
}
inline void BasicDocumentAttachment::set_vat(const ::std::string& value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Vat)
}
inline void BasicDocumentAttachment::set_vat(const char* value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Vat)
}
inline void BasicDocumentAttachment::set_vat(const char* value, size_t size) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_ = new ::std::string;
  }
  vat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Vat)
}
inline ::std::string* BasicDocumentAttachment::mutable_vat() {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Vat)
  return vat_;
}
inline ::std::string* BasicDocumentAttachment::release_vat() {
  clear_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vat_;
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BasicDocumentAttachment::set_allocated_vat(::std::string* vat) {
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (vat) {
    set_has_vat();
    vat_ = vat;
  } else {
    clear_has_vat();
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Vat)
}

// optional string Grounds = 11;
inline bool BasicDocumentAttachment::has_grounds() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BasicDocumentAttachment::set_has_grounds() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BasicDocumentAttachment::clear_has_grounds() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BasicDocumentAttachment::clear_grounds() {
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_->clear();
  }
  clear_has_grounds();
}
inline const ::std::string& BasicDocumentAttachment::grounds() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Grounds)
  return *grounds_;
}
inline void BasicDocumentAttachment::set_grounds(const ::std::string& value) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Grounds)
}
inline void BasicDocumentAttachment::set_grounds(const char* value) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Grounds)
}
inline void BasicDocumentAttachment::set_grounds(const char* value, size_t size) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Grounds)
}
inline ::std::string* BasicDocumentAttachment::mutable_grounds() {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Grounds)
  return grounds_;
}
inline ::std::string* BasicDocumentAttachment::release_grounds() {
  clear_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = grounds_;
    grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BasicDocumentAttachment::set_allocated_grounds(::std::string* grounds) {
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grounds_;
  }
  if (grounds) {
    set_has_grounds();
    grounds_ = grounds;
  } else {
    clear_has_grounds();
    grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.BasicDocumentAttachment.Grounds)
}

// optional bool NeedReceipt = 12 [default = false];
inline bool BasicDocumentAttachment::has_needreceipt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BasicDocumentAttachment::set_has_needreceipt() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BasicDocumentAttachment::clear_has_needreceipt() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BasicDocumentAttachment::clear_needreceipt() {
  needreceipt_ = false;
  clear_has_needreceipt();
}
inline bool BasicDocumentAttachment::needreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.NeedReceipt)
  return needreceipt_;
}
inline void BasicDocumentAttachment::set_needreceipt(bool value) {
  set_has_needreceipt();
  needreceipt_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.BasicDocumentAttachment.NeedReceipt)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
inline int BasicDocumentAttachment::customdata_size() const {
  return customdata_.size();
}
inline void BasicDocumentAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& BasicDocumentAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.BasicDocumentAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* BasicDocumentAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.BasicDocumentAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* BasicDocumentAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.BasicDocumentAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
BasicDocumentAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.BasicDocumentAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
BasicDocumentAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.BasicDocumentAttachment.CustomData)
  return &customdata_;
}

// -------------------------------------------------------------------

// Torg13Attachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool Torg13Attachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Torg13Attachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Torg13Attachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Torg13Attachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& Torg13Attachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.Torg13Attachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* Torg13Attachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.Torg13Attachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* Torg13Attachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void Torg13Attachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.Torg13Attachment.SignedContent)
}

// required string FileName = 2;
inline bool Torg13Attachment::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Torg13Attachment::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Torg13Attachment::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Torg13Attachment::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& Torg13Attachment::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.Torg13Attachment.FileName)
  return *filename_;
}
inline void Torg13Attachment::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.Torg13Attachment.FileName)
}
inline void Torg13Attachment::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.Torg13Attachment.FileName)
}
inline void Torg13Attachment::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.Torg13Attachment.FileName)
}
inline ::std::string* Torg13Attachment::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.Torg13Attachment.FileName)
  return filename_;
}
inline ::std::string* Torg13Attachment::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Torg13Attachment::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.Torg13Attachment.FileName)
}

// optional string Comment = 3;
inline bool Torg13Attachment::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Torg13Attachment::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Torg13Attachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Torg13Attachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& Torg13Attachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.Torg13Attachment.Comment)
  return *comment_;
}
inline void Torg13Attachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.Torg13Attachment.Comment)
}
inline void Torg13Attachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.Torg13Attachment.Comment)
}
inline void Torg13Attachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.Torg13Attachment.Comment)
}
inline ::std::string* Torg13Attachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.Torg13Attachment.Comment)
  return comment_;
}
inline ::std::string* Torg13Attachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Torg13Attachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.Torg13Attachment.Comment)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
inline int Torg13Attachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void Torg13Attachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& Torg13Attachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.Torg13Attachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* Torg13Attachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.Torg13Attachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* Torg13Attachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.Torg13Attachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
Torg13Attachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.Torg13Attachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
Torg13Attachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.Torg13Attachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
inline int Torg13Attachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void Torg13Attachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& Torg13Attachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.Torg13Attachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* Torg13Attachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.Torg13Attachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* Torg13Attachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.Torg13Attachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
Torg13Attachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.Torg13Attachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
Torg13Attachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.Torg13Attachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// required string DocumentDate = 6;
inline bool Torg13Attachment::has_documentdate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Torg13Attachment::set_has_documentdate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Torg13Attachment::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Torg13Attachment::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& Torg13Attachment::documentdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.Torg13Attachment.DocumentDate)
  return *documentdate_;
}
inline void Torg13Attachment::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.Torg13Attachment.DocumentDate)
}
inline void Torg13Attachment::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.Torg13Attachment.DocumentDate)
}
inline void Torg13Attachment::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.Torg13Attachment.DocumentDate)
}
inline ::std::string* Torg13Attachment::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.Torg13Attachment.DocumentDate)
  return documentdate_;
}
inline ::std::string* Torg13Attachment::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Torg13Attachment::set_allocated_documentdate(::std::string* documentdate) {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentdate) {
    set_has_documentdate();
    documentdate_ = documentdate;
  } else {
    clear_has_documentdate();
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.Torg13Attachment.DocumentDate)
}

// required string DocumentNumber = 7;
inline bool Torg13Attachment::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Torg13Attachment::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Torg13Attachment::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Torg13Attachment::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& Torg13Attachment::documentnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.Torg13Attachment.DocumentNumber)
  return *documentnumber_;
}
inline void Torg13Attachment::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.Torg13Attachment.DocumentNumber)
}
inline void Torg13Attachment::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.Torg13Attachment.DocumentNumber)
}
inline void Torg13Attachment::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.Torg13Attachment.DocumentNumber)
}
inline ::std::string* Torg13Attachment::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.Torg13Attachment.DocumentNumber)
  return documentnumber_;
}
inline ::std::string* Torg13Attachment::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Torg13Attachment::set_allocated_documentnumber(::std::string* documentnumber) {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documentnumber) {
    set_has_documentnumber();
    documentnumber_ = documentnumber;
  } else {
    clear_has_documentnumber();
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.Torg13Attachment.DocumentNumber)
}

// required string Total = 8;
inline bool Torg13Attachment::has_total() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Torg13Attachment::set_has_total() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Torg13Attachment::clear_has_total() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Torg13Attachment::clear_total() {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_->clear();
  }
  clear_has_total();
}
inline const ::std::string& Torg13Attachment::total() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.Torg13Attachment.Total)
  return *total_;
}
inline void Torg13Attachment::set_total(const ::std::string& value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.Torg13Attachment.Total)
}
inline void Torg13Attachment::set_total(const char* value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.Torg13Attachment.Total)
}
inline void Torg13Attachment::set_total(const char* value, size_t size) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.Torg13Attachment.Total)
}
inline ::std::string* Torg13Attachment::mutable_total() {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.Torg13Attachment.Total)
  return total_;
}
inline ::std::string* Torg13Attachment::release_total() {
  clear_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = total_;
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Torg13Attachment::set_allocated_total(::std::string* total) {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (total) {
    set_has_total();
    total_ = total;
  } else {
    clear_has_total();
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.Torg13Attachment.Total)
}

// optional string CustomDocumentId = 9;
inline bool Torg13Attachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Torg13Attachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Torg13Attachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Torg13Attachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& Torg13Attachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.Torg13Attachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void Torg13Attachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.Torg13Attachment.CustomDocumentId)
}
inline void Torg13Attachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.Torg13Attachment.CustomDocumentId)
}
inline void Torg13Attachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.Torg13Attachment.CustomDocumentId)
}
inline ::std::string* Torg13Attachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.Torg13Attachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* Torg13Attachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Torg13Attachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.Torg13Attachment.CustomDocumentId)
}

// optional string Grounds = 11;
inline bool Torg13Attachment::has_grounds() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Torg13Attachment::set_has_grounds() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Torg13Attachment::clear_has_grounds() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Torg13Attachment::clear_grounds() {
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_->clear();
  }
  clear_has_grounds();
}
inline const ::std::string& Torg13Attachment::grounds() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.Torg13Attachment.Grounds)
  return *grounds_;
}
inline void Torg13Attachment::set_grounds(const ::std::string& value) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.Torg13Attachment.Grounds)
}
inline void Torg13Attachment::set_grounds(const char* value) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.Torg13Attachment.Grounds)
}
inline void Torg13Attachment::set_grounds(const char* value, size_t size) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.Torg13Attachment.Grounds)
}
inline ::std::string* Torg13Attachment::mutable_grounds() {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.Torg13Attachment.Grounds)
  return grounds_;
}
inline ::std::string* Torg13Attachment::release_grounds() {
  clear_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = grounds_;
    grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Torg13Attachment::set_allocated_grounds(::std::string* grounds) {
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grounds_;
  }
  if (grounds) {
    set_has_grounds();
    grounds_ = grounds;
  } else {
    clear_has_grounds();
    grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.Torg13Attachment.Grounds)
}

// optional bool NeedReceipt = 12 [default = false];
inline bool Torg13Attachment::has_needreceipt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Torg13Attachment::set_has_needreceipt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Torg13Attachment::clear_has_needreceipt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Torg13Attachment::clear_needreceipt() {
  needreceipt_ = false;
  clear_has_needreceipt();
}
inline bool Torg13Attachment::needreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.Torg13Attachment.NeedReceipt)
  return needreceipt_;
}
inline void Torg13Attachment::set_needreceipt(bool value) {
  set_has_needreceipt();
  needreceipt_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.Torg13Attachment.NeedReceipt)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
inline int Torg13Attachment::customdata_size() const {
  return customdata_.size();
}
inline void Torg13Attachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& Torg13Attachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.Torg13Attachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* Torg13Attachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.Torg13Attachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* Torg13Attachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.Torg13Attachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
Torg13Attachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.Torg13Attachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
Torg13Attachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.Torg13Attachment.CustomData)
  return &customdata_;
}

// -------------------------------------------------------------------

// AcceptanceCertificateAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool AcceptanceCertificateAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcceptanceCertificateAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcceptanceCertificateAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcceptanceCertificateAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& AcceptanceCertificateAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* AcceptanceCertificateAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* AcceptanceCertificateAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void AcceptanceCertificateAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.SignedContent)
}

// required string FileName = 2;
inline bool AcceptanceCertificateAttachment::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcceptanceCertificateAttachment::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcceptanceCertificateAttachment::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcceptanceCertificateAttachment::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& AcceptanceCertificateAttachment::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.FileName)
  return *filename_;
}
inline void AcceptanceCertificateAttachment::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.FileName)
}
inline void AcceptanceCertificateAttachment::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.FileName)
}
inline void AcceptanceCertificateAttachment::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.FileName)
}
inline ::std::string* AcceptanceCertificateAttachment::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.FileName)
  return filename_;
}
inline ::std::string* AcceptanceCertificateAttachment::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificateAttachment::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.FileName)
}

// optional string Comment = 3;
inline bool AcceptanceCertificateAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AcceptanceCertificateAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AcceptanceCertificateAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AcceptanceCertificateAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& AcceptanceCertificateAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Comment)
  return *comment_;
}
inline void AcceptanceCertificateAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Comment)
}
inline void AcceptanceCertificateAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Comment)
}
inline void AcceptanceCertificateAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Comment)
}
inline ::std::string* AcceptanceCertificateAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Comment)
  return comment_;
}
inline ::std::string* AcceptanceCertificateAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificateAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Comment)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
inline int AcceptanceCertificateAttachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void AcceptanceCertificateAttachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& AcceptanceCertificateAttachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* AcceptanceCertificateAttachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* AcceptanceCertificateAttachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
AcceptanceCertificateAttachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
AcceptanceCertificateAttachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
inline int AcceptanceCertificateAttachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void AcceptanceCertificateAttachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& AcceptanceCertificateAttachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* AcceptanceCertificateAttachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* AcceptanceCertificateAttachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
AcceptanceCertificateAttachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
AcceptanceCertificateAttachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// required string DocumentDate = 6;
inline bool AcceptanceCertificateAttachment::has_documentdate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AcceptanceCertificateAttachment::set_has_documentdate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AcceptanceCertificateAttachment::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AcceptanceCertificateAttachment::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& AcceptanceCertificateAttachment::documentdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.DocumentDate)
  return *documentdate_;
}
inline void AcceptanceCertificateAttachment::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.DocumentDate)
}
inline void AcceptanceCertificateAttachment::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.DocumentDate)
}
inline void AcceptanceCertificateAttachment::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.DocumentDate)
}
inline ::std::string* AcceptanceCertificateAttachment::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.DocumentDate)
  return documentdate_;
}
inline ::std::string* AcceptanceCertificateAttachment::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificateAttachment::set_allocated_documentdate(::std::string* documentdate) {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentdate) {
    set_has_documentdate();
    documentdate_ = documentdate;
  } else {
    clear_has_documentdate();
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.DocumentDate)
}

// optional string DocumentNumber = 7 [default = ""];
inline bool AcceptanceCertificateAttachment::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AcceptanceCertificateAttachment::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AcceptanceCertificateAttachment::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AcceptanceCertificateAttachment::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& AcceptanceCertificateAttachment::documentnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.DocumentNumber)
  return *documentnumber_;
}
inline void AcceptanceCertificateAttachment::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.DocumentNumber)
}
inline void AcceptanceCertificateAttachment::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.DocumentNumber)
}
inline void AcceptanceCertificateAttachment::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.DocumentNumber)
}
inline ::std::string* AcceptanceCertificateAttachment::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.DocumentNumber)
  return documentnumber_;
}
inline ::std::string* AcceptanceCertificateAttachment::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificateAttachment::set_allocated_documentnumber(::std::string* documentnumber) {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documentnumber) {
    set_has_documentnumber();
    documentnumber_ = documentnumber;
  } else {
    clear_has_documentnumber();
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.DocumentNumber)
}

// required string Total = 8;
inline bool AcceptanceCertificateAttachment::has_total() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AcceptanceCertificateAttachment::set_has_total() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AcceptanceCertificateAttachment::clear_has_total() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AcceptanceCertificateAttachment::clear_total() {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_->clear();
  }
  clear_has_total();
}
inline const ::std::string& AcceptanceCertificateAttachment::total() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Total)
  return *total_;
}
inline void AcceptanceCertificateAttachment::set_total(const ::std::string& value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Total)
}
inline void AcceptanceCertificateAttachment::set_total(const char* value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Total)
}
inline void AcceptanceCertificateAttachment::set_total(const char* value, size_t size) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Total)
}
inline ::std::string* AcceptanceCertificateAttachment::mutable_total() {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Total)
  return total_;
}
inline ::std::string* AcceptanceCertificateAttachment::release_total() {
  clear_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = total_;
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificateAttachment::set_allocated_total(::std::string* total) {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (total) {
    set_has_total();
    total_ = total;
  } else {
    clear_has_total();
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Total)
}

// optional string CustomDocumentId = 9;
inline bool AcceptanceCertificateAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AcceptanceCertificateAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AcceptanceCertificateAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AcceptanceCertificateAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& AcceptanceCertificateAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void AcceptanceCertificateAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.CustomDocumentId)
}
inline void AcceptanceCertificateAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.CustomDocumentId)
}
inline void AcceptanceCertificateAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.CustomDocumentId)
}
inline ::std::string* AcceptanceCertificateAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* AcceptanceCertificateAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificateAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.CustomDocumentId)
}

// optional string Vat = 10;
inline bool AcceptanceCertificateAttachment::has_vat() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AcceptanceCertificateAttachment::set_has_vat() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AcceptanceCertificateAttachment::clear_has_vat() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AcceptanceCertificateAttachment::clear_vat() {
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_->clear();
  }
  clear_has_vat();
}
inline const ::std::string& AcceptanceCertificateAttachment::vat() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Vat)
  return *vat_;
}
inline void AcceptanceCertificateAttachment::set_vat(const ::std::string& value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Vat)
}
inline void AcceptanceCertificateAttachment::set_vat(const char* value) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_ = new ::std::string;
  }
  vat_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Vat)
}
inline void AcceptanceCertificateAttachment::set_vat(const char* value, size_t size) {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_ = new ::std::string;
  }
  vat_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Vat)
}
inline ::std::string* AcceptanceCertificateAttachment::mutable_vat() {
  set_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vat_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Vat)
  return vat_;
}
inline ::std::string* AcceptanceCertificateAttachment::release_vat() {
  clear_has_vat();
  if (vat_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vat_;
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificateAttachment::set_allocated_vat(::std::string* vat) {
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (vat) {
    set_has_vat();
    vat_ = vat;
  } else {
    clear_has_vat();
    vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Vat)
}

// optional string Grounds = 11;
inline bool AcceptanceCertificateAttachment::has_grounds() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AcceptanceCertificateAttachment::set_has_grounds() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AcceptanceCertificateAttachment::clear_has_grounds() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AcceptanceCertificateAttachment::clear_grounds() {
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_->clear();
  }
  clear_has_grounds();
}
inline const ::std::string& AcceptanceCertificateAttachment::grounds() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Grounds)
  return *grounds_;
}
inline void AcceptanceCertificateAttachment::set_grounds(const ::std::string& value) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Grounds)
}
inline void AcceptanceCertificateAttachment::set_grounds(const char* value) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Grounds)
}
inline void AcceptanceCertificateAttachment::set_grounds(const char* value, size_t size) {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_ = new ::std::string;
  }
  grounds_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Grounds)
}
inline ::std::string* AcceptanceCertificateAttachment::mutable_grounds() {
  set_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    grounds_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Grounds)
  return grounds_;
}
inline ::std::string* AcceptanceCertificateAttachment::release_grounds() {
  clear_has_grounds();
  if (grounds_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = grounds_;
    grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AcceptanceCertificateAttachment::set_allocated_grounds(::std::string* grounds) {
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grounds_;
  }
  if (grounds) {
    set_has_grounds();
    grounds_ = grounds;
  } else {
    clear_has_grounds();
    grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.Grounds)
}

// optional bool NeedReceipt = 12 [default = false];
inline bool AcceptanceCertificateAttachment::has_needreceipt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AcceptanceCertificateAttachment::set_has_needreceipt() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AcceptanceCertificateAttachment::clear_has_needreceipt() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AcceptanceCertificateAttachment::clear_needreceipt() {
  needreceipt_ = false;
  clear_has_needreceipt();
}
inline bool AcceptanceCertificateAttachment::needreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.NeedReceipt)
  return needreceipt_;
}
inline void AcceptanceCertificateAttachment::set_needreceipt(bool value) {
  set_has_needreceipt();
  needreceipt_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.NeedReceipt)
}

// optional bool NeedRecipientSignature = 13 [default = true];
inline bool AcceptanceCertificateAttachment::has_needrecipientsignature() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AcceptanceCertificateAttachment::set_has_needrecipientsignature() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AcceptanceCertificateAttachment::clear_has_needrecipientsignature() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AcceptanceCertificateAttachment::clear_needrecipientsignature() {
  needrecipientsignature_ = true;
  clear_has_needrecipientsignature();
}
inline bool AcceptanceCertificateAttachment::needrecipientsignature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.NeedRecipientSignature)
  return needrecipientsignature_;
}
inline void AcceptanceCertificateAttachment::set_needrecipientsignature(bool value) {
  set_has_needrecipientsignature();
  needrecipientsignature_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.NeedRecipientSignature)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 14;
inline int AcceptanceCertificateAttachment::customdata_size() const {
  return customdata_.size();
}
inline void AcceptanceCertificateAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& AcceptanceCertificateAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* AcceptanceCertificateAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* AcceptanceCertificateAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
AcceptanceCertificateAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
AcceptanceCertificateAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment.CustomData)
  return &customdata_;
}

// -------------------------------------------------------------------

// TrustConnectionRequestAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool TrustConnectionRequestAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrustConnectionRequestAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrustConnectionRequestAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrustConnectionRequestAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& TrustConnectionRequestAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* TrustConnectionRequestAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* TrustConnectionRequestAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void TrustConnectionRequestAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.SignedContent)
}

// required string FileName = 2;
inline bool TrustConnectionRequestAttachment::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrustConnectionRequestAttachment::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrustConnectionRequestAttachment::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrustConnectionRequestAttachment::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& TrustConnectionRequestAttachment::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.FileName)
  return *filename_;
}
inline void TrustConnectionRequestAttachment::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.FileName)
}
inline void TrustConnectionRequestAttachment::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.FileName)
}
inline void TrustConnectionRequestAttachment::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.FileName)
}
inline ::std::string* TrustConnectionRequestAttachment::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.FileName)
  return filename_;
}
inline ::std::string* TrustConnectionRequestAttachment::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TrustConnectionRequestAttachment::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.FileName)
}

// optional string Comment = 3;
inline bool TrustConnectionRequestAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrustConnectionRequestAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrustConnectionRequestAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrustConnectionRequestAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& TrustConnectionRequestAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.Comment)
  return *comment_;
}
inline void TrustConnectionRequestAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.Comment)
}
inline void TrustConnectionRequestAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.Comment)
}
inline void TrustConnectionRequestAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.Comment)
}
inline ::std::string* TrustConnectionRequestAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.Comment)
  return comment_;
}
inline ::std::string* TrustConnectionRequestAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TrustConnectionRequestAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.Comment)
}

// optional string CustomDocumentId = 4;
inline bool TrustConnectionRequestAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrustConnectionRequestAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrustConnectionRequestAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrustConnectionRequestAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& TrustConnectionRequestAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void TrustConnectionRequestAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.CustomDocumentId)
}
inline void TrustConnectionRequestAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.CustomDocumentId)
}
inline void TrustConnectionRequestAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.CustomDocumentId)
}
inline ::std::string* TrustConnectionRequestAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* TrustConnectionRequestAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TrustConnectionRequestAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.CustomDocumentId)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 5;
inline int TrustConnectionRequestAttachment::customdata_size() const {
  return customdata_.size();
}
inline void TrustConnectionRequestAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& TrustConnectionRequestAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* TrustConnectionRequestAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* TrustConnectionRequestAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
TrustConnectionRequestAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
TrustConnectionRequestAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment.CustomData)
  return &customdata_;
}

// -------------------------------------------------------------------

// StructuredDataAttachment

// required bytes Content = 1;
inline bool StructuredDataAttachment::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StructuredDataAttachment::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StructuredDataAttachment::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StructuredDataAttachment::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& StructuredDataAttachment::content() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.StructuredDataAttachment.Content)
  return *content_;
}
inline void StructuredDataAttachment::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.StructuredDataAttachment.Content)
}
inline void StructuredDataAttachment::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.StructuredDataAttachment.Content)
}
inline void StructuredDataAttachment::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.StructuredDataAttachment.Content)
}
inline ::std::string* StructuredDataAttachment::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.StructuredDataAttachment.Content)
  return content_;
}
inline ::std::string* StructuredDataAttachment::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StructuredDataAttachment::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.StructuredDataAttachment.Content)
}

// required string FileName = 2;
inline bool StructuredDataAttachment::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StructuredDataAttachment::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StructuredDataAttachment::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StructuredDataAttachment::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& StructuredDataAttachment::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.StructuredDataAttachment.FileName)
  return *filename_;
}
inline void StructuredDataAttachment::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.StructuredDataAttachment.FileName)
}
inline void StructuredDataAttachment::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.StructuredDataAttachment.FileName)
}
inline void StructuredDataAttachment::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.StructuredDataAttachment.FileName)
}
inline ::std::string* StructuredDataAttachment::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.StructuredDataAttachment.FileName)
  return filename_;
}
inline ::std::string* StructuredDataAttachment::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StructuredDataAttachment::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.StructuredDataAttachment.FileName)
}

// required string ParentCustomDocumentId = 3;
inline bool StructuredDataAttachment::has_parentcustomdocumentid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StructuredDataAttachment::set_has_parentcustomdocumentid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StructuredDataAttachment::clear_has_parentcustomdocumentid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StructuredDataAttachment::clear_parentcustomdocumentid() {
  if (parentcustomdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentcustomdocumentid_->clear();
  }
  clear_has_parentcustomdocumentid();
}
inline const ::std::string& StructuredDataAttachment::parentcustomdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.StructuredDataAttachment.ParentCustomDocumentId)
  return *parentcustomdocumentid_;
}
inline void StructuredDataAttachment::set_parentcustomdocumentid(const ::std::string& value) {
  set_has_parentcustomdocumentid();
  if (parentcustomdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentcustomdocumentid_ = new ::std::string;
  }
  parentcustomdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.StructuredDataAttachment.ParentCustomDocumentId)
}
inline void StructuredDataAttachment::set_parentcustomdocumentid(const char* value) {
  set_has_parentcustomdocumentid();
  if (parentcustomdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentcustomdocumentid_ = new ::std::string;
  }
  parentcustomdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.StructuredDataAttachment.ParentCustomDocumentId)
}
inline void StructuredDataAttachment::set_parentcustomdocumentid(const char* value, size_t size) {
  set_has_parentcustomdocumentid();
  if (parentcustomdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentcustomdocumentid_ = new ::std::string;
  }
  parentcustomdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.StructuredDataAttachment.ParentCustomDocumentId)
}
inline ::std::string* StructuredDataAttachment::mutable_parentcustomdocumentid() {
  set_has_parentcustomdocumentid();
  if (parentcustomdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parentcustomdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.StructuredDataAttachment.ParentCustomDocumentId)
  return parentcustomdocumentid_;
}
inline ::std::string* StructuredDataAttachment::release_parentcustomdocumentid() {
  clear_has_parentcustomdocumentid();
  if (parentcustomdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parentcustomdocumentid_;
    parentcustomdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StructuredDataAttachment::set_allocated_parentcustomdocumentid(::std::string* parentcustomdocumentid) {
  if (parentcustomdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parentcustomdocumentid_;
  }
  if (parentcustomdocumentid) {
    set_has_parentcustomdocumentid();
    parentcustomdocumentid_ = parentcustomdocumentid;
  } else {
    clear_has_parentcustomdocumentid();
    parentcustomdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.StructuredDataAttachment.ParentCustomDocumentId)
}

// -------------------------------------------------------------------

// PriceListAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool PriceListAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PriceListAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PriceListAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PriceListAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& PriceListAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* PriceListAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PriceListAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* PriceListAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void PriceListAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.PriceListAttachment.SignedContent)
}

// required string FileName = 2;
inline bool PriceListAttachment::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PriceListAttachment::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PriceListAttachment::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PriceListAttachment::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& PriceListAttachment::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.FileName)
  return *filename_;
}
inline void PriceListAttachment::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.PriceListAttachment.FileName)
}
inline void PriceListAttachment::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.PriceListAttachment.FileName)
}
inline void PriceListAttachment::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.PriceListAttachment.FileName)
}
inline ::std::string* PriceListAttachment::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PriceListAttachment.FileName)
  return filename_;
}
inline ::std::string* PriceListAttachment::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PriceListAttachment::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.PriceListAttachment.FileName)
}

// optional string Comment = 3;
inline bool PriceListAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PriceListAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PriceListAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PriceListAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& PriceListAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.Comment)
  return *comment_;
}
inline void PriceListAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.PriceListAttachment.Comment)
}
inline void PriceListAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.PriceListAttachment.Comment)
}
inline void PriceListAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.PriceListAttachment.Comment)
}
inline ::std::string* PriceListAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PriceListAttachment.Comment)
  return comment_;
}
inline ::std::string* PriceListAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PriceListAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.PriceListAttachment.Comment)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
inline int PriceListAttachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void PriceListAttachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& PriceListAttachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* PriceListAttachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PriceListAttachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* PriceListAttachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.PriceListAttachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
PriceListAttachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.PriceListAttachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
PriceListAttachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.PriceListAttachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
inline int PriceListAttachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void PriceListAttachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& PriceListAttachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* PriceListAttachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PriceListAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* PriceListAttachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.PriceListAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
PriceListAttachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.PriceListAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
PriceListAttachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.PriceListAttachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// optional string CustomDocumentId = 6;
inline bool PriceListAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PriceListAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PriceListAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PriceListAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& PriceListAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void PriceListAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.PriceListAttachment.CustomDocumentId)
}
inline void PriceListAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.PriceListAttachment.CustomDocumentId)
}
inline void PriceListAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.PriceListAttachment.CustomDocumentId)
}
inline ::std::string* PriceListAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PriceListAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* PriceListAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PriceListAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.PriceListAttachment.CustomDocumentId)
}

// required string DocumentDate = 7;
inline bool PriceListAttachment::has_documentdate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PriceListAttachment::set_has_documentdate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PriceListAttachment::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PriceListAttachment::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& PriceListAttachment::documentdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.DocumentDate)
  return *documentdate_;
}
inline void PriceListAttachment::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.PriceListAttachment.DocumentDate)
}
inline void PriceListAttachment::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.PriceListAttachment.DocumentDate)
}
inline void PriceListAttachment::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.PriceListAttachment.DocumentDate)
}
inline ::std::string* PriceListAttachment::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PriceListAttachment.DocumentDate)
  return documentdate_;
}
inline ::std::string* PriceListAttachment::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PriceListAttachment::set_allocated_documentdate(::std::string* documentdate) {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentdate) {
    set_has_documentdate();
    documentdate_ = documentdate;
  } else {
    clear_has_documentdate();
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.PriceListAttachment.DocumentDate)
}

// required string DocumentNumber = 8;
inline bool PriceListAttachment::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PriceListAttachment::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PriceListAttachment::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PriceListAttachment::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& PriceListAttachment::documentnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.DocumentNumber)
  return *documentnumber_;
}
inline void PriceListAttachment::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.PriceListAttachment.DocumentNumber)
}
inline void PriceListAttachment::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.PriceListAttachment.DocumentNumber)
}
inline void PriceListAttachment::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.PriceListAttachment.DocumentNumber)
}
inline ::std::string* PriceListAttachment::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PriceListAttachment.DocumentNumber)
  return documentnumber_;
}
inline ::std::string* PriceListAttachment::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PriceListAttachment::set_allocated_documentnumber(::std::string* documentnumber) {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documentnumber) {
    set_has_documentnumber();
    documentnumber_ = documentnumber;
  } else {
    clear_has_documentnumber();
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.PriceListAttachment.DocumentNumber)
}

// required string PriceListEffectiveDate = 9;
inline bool PriceListAttachment::has_pricelisteffectivedate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PriceListAttachment::set_has_pricelisteffectivedate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PriceListAttachment::clear_has_pricelisteffectivedate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PriceListAttachment::clear_pricelisteffectivedate() {
  if (pricelisteffectivedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricelisteffectivedate_->clear();
  }
  clear_has_pricelisteffectivedate();
}
inline const ::std::string& PriceListAttachment::pricelisteffectivedate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.PriceListEffectiveDate)
  return *pricelisteffectivedate_;
}
inline void PriceListAttachment::set_pricelisteffectivedate(const ::std::string& value) {
  set_has_pricelisteffectivedate();
  if (pricelisteffectivedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricelisteffectivedate_ = new ::std::string;
  }
  pricelisteffectivedate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.PriceListAttachment.PriceListEffectiveDate)
}
inline void PriceListAttachment::set_pricelisteffectivedate(const char* value) {
  set_has_pricelisteffectivedate();
  if (pricelisteffectivedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricelisteffectivedate_ = new ::std::string;
  }
  pricelisteffectivedate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.PriceListAttachment.PriceListEffectiveDate)
}
inline void PriceListAttachment::set_pricelisteffectivedate(const char* value, size_t size) {
  set_has_pricelisteffectivedate();
  if (pricelisteffectivedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricelisteffectivedate_ = new ::std::string;
  }
  pricelisteffectivedate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.PriceListAttachment.PriceListEffectiveDate)
}
inline ::std::string* PriceListAttachment::mutable_pricelisteffectivedate() {
  set_has_pricelisteffectivedate();
  if (pricelisteffectivedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pricelisteffectivedate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PriceListAttachment.PriceListEffectiveDate)
  return pricelisteffectivedate_;
}
inline ::std::string* PriceListAttachment::release_pricelisteffectivedate() {
  clear_has_pricelisteffectivedate();
  if (pricelisteffectivedate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pricelisteffectivedate_;
    pricelisteffectivedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PriceListAttachment::set_allocated_pricelisteffectivedate(::std::string* pricelisteffectivedate) {
  if (pricelisteffectivedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pricelisteffectivedate_;
  }
  if (pricelisteffectivedate) {
    set_has_pricelisteffectivedate();
    pricelisteffectivedate_ = pricelisteffectivedate;
  } else {
    clear_has_pricelisteffectivedate();
    pricelisteffectivedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.PriceListAttachment.PriceListEffectiveDate)
}

// required string ContractDocumentDate = 10;
inline bool PriceListAttachment::has_contractdocumentdate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PriceListAttachment::set_has_contractdocumentdate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PriceListAttachment::clear_has_contractdocumentdate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PriceListAttachment::clear_contractdocumentdate() {
  if (contractdocumentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdocumentdate_->clear();
  }
  clear_has_contractdocumentdate();
}
inline const ::std::string& PriceListAttachment::contractdocumentdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.ContractDocumentDate)
  return *contractdocumentdate_;
}
inline void PriceListAttachment::set_contractdocumentdate(const ::std::string& value) {
  set_has_contractdocumentdate();
  if (contractdocumentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdocumentdate_ = new ::std::string;
  }
  contractdocumentdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.PriceListAttachment.ContractDocumentDate)
}
inline void PriceListAttachment::set_contractdocumentdate(const char* value) {
  set_has_contractdocumentdate();
  if (contractdocumentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdocumentdate_ = new ::std::string;
  }
  contractdocumentdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.PriceListAttachment.ContractDocumentDate)
}
inline void PriceListAttachment::set_contractdocumentdate(const char* value, size_t size) {
  set_has_contractdocumentdate();
  if (contractdocumentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdocumentdate_ = new ::std::string;
  }
  contractdocumentdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.PriceListAttachment.ContractDocumentDate)
}
inline ::std::string* PriceListAttachment::mutable_contractdocumentdate() {
  set_has_contractdocumentdate();
  if (contractdocumentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdocumentdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PriceListAttachment.ContractDocumentDate)
  return contractdocumentdate_;
}
inline ::std::string* PriceListAttachment::release_contractdocumentdate() {
  clear_has_contractdocumentdate();
  if (contractdocumentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractdocumentdate_;
    contractdocumentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PriceListAttachment::set_allocated_contractdocumentdate(::std::string* contractdocumentdate) {
  if (contractdocumentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractdocumentdate_;
  }
  if (contractdocumentdate) {
    set_has_contractdocumentdate();
    contractdocumentdate_ = contractdocumentdate;
  } else {
    clear_has_contractdocumentdate();
    contractdocumentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.PriceListAttachment.ContractDocumentDate)
}

// required string ContractDocumentNumber = 11;
inline bool PriceListAttachment::has_contractdocumentnumber() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PriceListAttachment::set_has_contractdocumentnumber() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PriceListAttachment::clear_has_contractdocumentnumber() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PriceListAttachment::clear_contractdocumentnumber() {
  if (contractdocumentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdocumentnumber_->clear();
  }
  clear_has_contractdocumentnumber();
}
inline const ::std::string& PriceListAttachment::contractdocumentnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.ContractDocumentNumber)
  return *contractdocumentnumber_;
}
inline void PriceListAttachment::set_contractdocumentnumber(const ::std::string& value) {
  set_has_contractdocumentnumber();
  if (contractdocumentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdocumentnumber_ = new ::std::string;
  }
  contractdocumentnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.PriceListAttachment.ContractDocumentNumber)
}
inline void PriceListAttachment::set_contractdocumentnumber(const char* value) {
  set_has_contractdocumentnumber();
  if (contractdocumentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdocumentnumber_ = new ::std::string;
  }
  contractdocumentnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.PriceListAttachment.ContractDocumentNumber)
}
inline void PriceListAttachment::set_contractdocumentnumber(const char* value, size_t size) {
  set_has_contractdocumentnumber();
  if (contractdocumentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdocumentnumber_ = new ::std::string;
  }
  contractdocumentnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.PriceListAttachment.ContractDocumentNumber)
}
inline ::std::string* PriceListAttachment::mutable_contractdocumentnumber() {
  set_has_contractdocumentnumber();
  if (contractdocumentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdocumentnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PriceListAttachment.ContractDocumentNumber)
  return contractdocumentnumber_;
}
inline ::std::string* PriceListAttachment::release_contractdocumentnumber() {
  clear_has_contractdocumentnumber();
  if (contractdocumentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractdocumentnumber_;
    contractdocumentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PriceListAttachment::set_allocated_contractdocumentnumber(::std::string* contractdocumentnumber) {
  if (contractdocumentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractdocumentnumber_;
  }
  if (contractdocumentnumber) {
    set_has_contractdocumentnumber();
    contractdocumentnumber_ = contractdocumentnumber;
  } else {
    clear_has_contractdocumentnumber();
    contractdocumentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.PriceListAttachment.ContractDocumentNumber)
}

// optional bool NeedReceipt = 12 [default = false];
inline bool PriceListAttachment::has_needreceipt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PriceListAttachment::set_has_needreceipt() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PriceListAttachment::clear_has_needreceipt() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PriceListAttachment::clear_needreceipt() {
  needreceipt_ = false;
  clear_has_needreceipt();
}
inline bool PriceListAttachment::needreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.NeedReceipt)
  return needreceipt_;
}
inline void PriceListAttachment::set_needreceipt(bool value) {
  set_has_needreceipt();
  needreceipt_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.PriceListAttachment.NeedReceipt)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
inline int PriceListAttachment::customdata_size() const {
  return customdata_.size();
}
inline void PriceListAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& PriceListAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PriceListAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* PriceListAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PriceListAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* PriceListAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.PriceListAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
PriceListAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.PriceListAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
PriceListAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.PriceListAttachment.CustomData)
  return &customdata_;
}

// -------------------------------------------------------------------

// ReconciliationActAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool ReconciliationActAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReconciliationActAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReconciliationActAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReconciliationActAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& ReconciliationActAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReconciliationActAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* ReconciliationActAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ReconciliationActAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* ReconciliationActAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void ReconciliationActAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ReconciliationActAttachment.SignedContent)
}

// required string FileName = 2;
inline bool ReconciliationActAttachment::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReconciliationActAttachment::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReconciliationActAttachment::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReconciliationActAttachment::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& ReconciliationActAttachment::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReconciliationActAttachment.FileName)
  return *filename_;
}
inline void ReconciliationActAttachment::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ReconciliationActAttachment.FileName)
}
inline void ReconciliationActAttachment::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ReconciliationActAttachment.FileName)
}
inline void ReconciliationActAttachment::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ReconciliationActAttachment.FileName)
}
inline ::std::string* ReconciliationActAttachment::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ReconciliationActAttachment.FileName)
  return filename_;
}
inline ::std::string* ReconciliationActAttachment::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReconciliationActAttachment::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ReconciliationActAttachment.FileName)
}

// optional string Comment = 3;
inline bool ReconciliationActAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReconciliationActAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReconciliationActAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReconciliationActAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ReconciliationActAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReconciliationActAttachment.Comment)
  return *comment_;
}
inline void ReconciliationActAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ReconciliationActAttachment.Comment)
}
inline void ReconciliationActAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ReconciliationActAttachment.Comment)
}
inline void ReconciliationActAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ReconciliationActAttachment.Comment)
}
inline ::std::string* ReconciliationActAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ReconciliationActAttachment.Comment)
  return comment_;
}
inline ::std::string* ReconciliationActAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReconciliationActAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ReconciliationActAttachment.Comment)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
inline int ReconciliationActAttachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void ReconciliationActAttachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& ReconciliationActAttachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReconciliationActAttachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* ReconciliationActAttachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ReconciliationActAttachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* ReconciliationActAttachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ReconciliationActAttachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
ReconciliationActAttachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ReconciliationActAttachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
ReconciliationActAttachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ReconciliationActAttachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
inline int ReconciliationActAttachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void ReconciliationActAttachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& ReconciliationActAttachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReconciliationActAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* ReconciliationActAttachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ReconciliationActAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* ReconciliationActAttachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ReconciliationActAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
ReconciliationActAttachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ReconciliationActAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
ReconciliationActAttachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ReconciliationActAttachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// required string DocumentDate = 7;
inline bool ReconciliationActAttachment::has_documentdate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReconciliationActAttachment::set_has_documentdate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReconciliationActAttachment::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReconciliationActAttachment::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& ReconciliationActAttachment::documentdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReconciliationActAttachment.DocumentDate)
  return *documentdate_;
}
inline void ReconciliationActAttachment::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ReconciliationActAttachment.DocumentDate)
}
inline void ReconciliationActAttachment::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ReconciliationActAttachment.DocumentDate)
}
inline void ReconciliationActAttachment::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ReconciliationActAttachment.DocumentDate)
}
inline ::std::string* ReconciliationActAttachment::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ReconciliationActAttachment.DocumentDate)
  return documentdate_;
}
inline ::std::string* ReconciliationActAttachment::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReconciliationActAttachment::set_allocated_documentdate(::std::string* documentdate) {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentdate) {
    set_has_documentdate();
    documentdate_ = documentdate;
  } else {
    clear_has_documentdate();
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ReconciliationActAttachment.DocumentDate)
}

// optional string DocumentNumber = 8 [default = ""];
inline bool ReconciliationActAttachment::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReconciliationActAttachment::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReconciliationActAttachment::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReconciliationActAttachment::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& ReconciliationActAttachment::documentnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReconciliationActAttachment.DocumentNumber)
  return *documentnumber_;
}
inline void ReconciliationActAttachment::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ReconciliationActAttachment.DocumentNumber)
}
inline void ReconciliationActAttachment::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ReconciliationActAttachment.DocumentNumber)
}
inline void ReconciliationActAttachment::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ReconciliationActAttachment.DocumentNumber)
}
inline ::std::string* ReconciliationActAttachment::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ReconciliationActAttachment.DocumentNumber)
  return documentnumber_;
}
inline ::std::string* ReconciliationActAttachment::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReconciliationActAttachment::set_allocated_documentnumber(::std::string* documentnumber) {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documentnumber) {
    set_has_documentnumber();
    documentnumber_ = documentnumber;
  } else {
    clear_has_documentnumber();
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ReconciliationActAttachment.DocumentNumber)
}

// optional string CustomDocumentId = 9;
inline bool ReconciliationActAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReconciliationActAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReconciliationActAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReconciliationActAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& ReconciliationActAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReconciliationActAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void ReconciliationActAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ReconciliationActAttachment.CustomDocumentId)
}
inline void ReconciliationActAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ReconciliationActAttachment.CustomDocumentId)
}
inline void ReconciliationActAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ReconciliationActAttachment.CustomDocumentId)
}
inline ::std::string* ReconciliationActAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ReconciliationActAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* ReconciliationActAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReconciliationActAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ReconciliationActAttachment.CustomDocumentId)
}

// optional bool NeedReceipt = 10 [default = false];
inline bool ReconciliationActAttachment::has_needreceipt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReconciliationActAttachment::set_has_needreceipt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReconciliationActAttachment::clear_has_needreceipt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReconciliationActAttachment::clear_needreceipt() {
  needreceipt_ = false;
  clear_has_needreceipt();
}
inline bool ReconciliationActAttachment::needreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReconciliationActAttachment.NeedReceipt)
  return needreceipt_;
}
inline void ReconciliationActAttachment::set_needreceipt(bool value) {
  set_has_needreceipt();
  needreceipt_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ReconciliationActAttachment.NeedReceipt)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
inline int ReconciliationActAttachment::customdata_size() const {
  return customdata_.size();
}
inline void ReconciliationActAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& ReconciliationActAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReconciliationActAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* ReconciliationActAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ReconciliationActAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* ReconciliationActAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ReconciliationActAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
ReconciliationActAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ReconciliationActAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
ReconciliationActAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ReconciliationActAttachment.CustomData)
  return &customdata_;
}

// -------------------------------------------------------------------

// ContractAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool ContractAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContractAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContractAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContractAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& ContractAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContractAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* ContractAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContractAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* ContractAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void ContractAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContractAttachment.SignedContent)
}

// required string FileName = 2;
inline bool ContractAttachment::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContractAttachment::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContractAttachment::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContractAttachment::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& ContractAttachment::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContractAttachment.FileName)
  return *filename_;
}
inline void ContractAttachment::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ContractAttachment.FileName)
}
inline void ContractAttachment::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ContractAttachment.FileName)
}
inline void ContractAttachment::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ContractAttachment.FileName)
}
inline ::std::string* ContractAttachment::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContractAttachment.FileName)
  return filename_;
}
inline ::std::string* ContractAttachment::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractAttachment::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContractAttachment.FileName)
}

// optional string Comment = 3;
inline bool ContractAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContractAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContractAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContractAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ContractAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContractAttachment.Comment)
  return *comment_;
}
inline void ContractAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ContractAttachment.Comment)
}
inline void ContractAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ContractAttachment.Comment)
}
inline void ContractAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ContractAttachment.Comment)
}
inline ::std::string* ContractAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContractAttachment.Comment)
  return comment_;
}
inline ::std::string* ContractAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContractAttachment.Comment)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
inline int ContractAttachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void ContractAttachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& ContractAttachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContractAttachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* ContractAttachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContractAttachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* ContractAttachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ContractAttachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
ContractAttachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ContractAttachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
ContractAttachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ContractAttachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
inline int ContractAttachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void ContractAttachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& ContractAttachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContractAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* ContractAttachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContractAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* ContractAttachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ContractAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
ContractAttachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ContractAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
ContractAttachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ContractAttachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// optional string CustomDocumentId = 6;
inline bool ContractAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContractAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContractAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContractAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& ContractAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContractAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void ContractAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ContractAttachment.CustomDocumentId)
}
inline void ContractAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ContractAttachment.CustomDocumentId)
}
inline void ContractAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ContractAttachment.CustomDocumentId)
}
inline ::std::string* ContractAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContractAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* ContractAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContractAttachment.CustomDocumentId)
}

// required string DocumentDate = 7;
inline bool ContractAttachment::has_documentdate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContractAttachment::set_has_documentdate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContractAttachment::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContractAttachment::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& ContractAttachment::documentdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContractAttachment.DocumentDate)
  return *documentdate_;
}
inline void ContractAttachment::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ContractAttachment.DocumentDate)
}
inline void ContractAttachment::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ContractAttachment.DocumentDate)
}
inline void ContractAttachment::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ContractAttachment.DocumentDate)
}
inline ::std::string* ContractAttachment::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContractAttachment.DocumentDate)
  return documentdate_;
}
inline ::std::string* ContractAttachment::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractAttachment::set_allocated_documentdate(::std::string* documentdate) {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentdate) {
    set_has_documentdate();
    documentdate_ = documentdate;
  } else {
    clear_has_documentdate();
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContractAttachment.DocumentDate)
}

// required string DocumentNumber = 8;
inline bool ContractAttachment::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContractAttachment::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContractAttachment::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContractAttachment::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& ContractAttachment::documentnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContractAttachment.DocumentNumber)
  return *documentnumber_;
}
inline void ContractAttachment::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ContractAttachment.DocumentNumber)
}
inline void ContractAttachment::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ContractAttachment.DocumentNumber)
}
inline void ContractAttachment::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ContractAttachment.DocumentNumber)
}
inline ::std::string* ContractAttachment::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContractAttachment.DocumentNumber)
  return documentnumber_;
}
inline ::std::string* ContractAttachment::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractAttachment::set_allocated_documentnumber(::std::string* documentnumber) {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documentnumber) {
    set_has_documentnumber();
    documentnumber_ = documentnumber;
  } else {
    clear_has_documentnumber();
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContractAttachment.DocumentNumber)
}

// optional string ContractPrice = 9;
inline bool ContractAttachment::has_contractprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContractAttachment::set_has_contractprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContractAttachment::clear_has_contractprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContractAttachment::clear_contractprice() {
  if (contractprice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractprice_->clear();
  }
  clear_has_contractprice();
}
inline const ::std::string& ContractAttachment::contractprice() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContractAttachment.ContractPrice)
  return *contractprice_;
}
inline void ContractAttachment::set_contractprice(const ::std::string& value) {
  set_has_contractprice();
  if (contractprice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractprice_ = new ::std::string;
  }
  contractprice_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ContractAttachment.ContractPrice)
}
inline void ContractAttachment::set_contractprice(const char* value) {
  set_has_contractprice();
  if (contractprice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractprice_ = new ::std::string;
  }
  contractprice_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ContractAttachment.ContractPrice)
}
inline void ContractAttachment::set_contractprice(const char* value, size_t size) {
  set_has_contractprice();
  if (contractprice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractprice_ = new ::std::string;
  }
  contractprice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ContractAttachment.ContractPrice)
}
inline ::std::string* ContractAttachment::mutable_contractprice() {
  set_has_contractprice();
  if (contractprice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractprice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContractAttachment.ContractPrice)
  return contractprice_;
}
inline ::std::string* ContractAttachment::release_contractprice() {
  clear_has_contractprice();
  if (contractprice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractprice_;
    contractprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractAttachment::set_allocated_contractprice(::std::string* contractprice) {
  if (contractprice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractprice_;
  }
  if (contractprice) {
    set_has_contractprice();
    contractprice_ = contractprice;
  } else {
    clear_has_contractprice();
    contractprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContractAttachment.ContractPrice)
}

// optional string ContractType = 10;
inline bool ContractAttachment::has_contracttype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ContractAttachment::set_has_contracttype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ContractAttachment::clear_has_contracttype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ContractAttachment::clear_contracttype() {
  if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contracttype_->clear();
  }
  clear_has_contracttype();
}
inline const ::std::string& ContractAttachment::contracttype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContractAttachment.ContractType)
  return *contracttype_;
}
inline void ContractAttachment::set_contracttype(const ::std::string& value) {
  set_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contracttype_ = new ::std::string;
  }
  contracttype_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ContractAttachment.ContractType)
}
inline void ContractAttachment::set_contracttype(const char* value) {
  set_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contracttype_ = new ::std::string;
  }
  contracttype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ContractAttachment.ContractType)
}
inline void ContractAttachment::set_contracttype(const char* value, size_t size) {
  set_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contracttype_ = new ::std::string;
  }
  contracttype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ContractAttachment.ContractType)
}
inline ::std::string* ContractAttachment::mutable_contracttype() {
  set_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contracttype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContractAttachment.ContractType)
  return contracttype_;
}
inline ::std::string* ContractAttachment::release_contracttype() {
  clear_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contracttype_;
    contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContractAttachment::set_allocated_contracttype(::std::string* contracttype) {
  if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contracttype_;
  }
  if (contracttype) {
    set_has_contracttype();
    contracttype_ = contracttype;
  } else {
    clear_has_contracttype();
    contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContractAttachment.ContractType)
}

// optional bool NeedReceipt = 11 [default = false];
inline bool ContractAttachment::has_needreceipt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ContractAttachment::set_has_needreceipt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ContractAttachment::clear_has_needreceipt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ContractAttachment::clear_needreceipt() {
  needreceipt_ = false;
  clear_has_needreceipt();
}
inline bool ContractAttachment::needreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContractAttachment.NeedReceipt)
  return needreceipt_;
}
inline void ContractAttachment::set_needreceipt(bool value) {
  set_has_needreceipt();
  needreceipt_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ContractAttachment.NeedReceipt)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 12;
inline int ContractAttachment::customdata_size() const {
  return customdata_.size();
}
inline void ContractAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& ContractAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContractAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* ContractAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContractAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* ContractAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ContractAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
ContractAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ContractAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
ContractAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ContractAttachment.CustomData)
  return &customdata_;
}

// -------------------------------------------------------------------

// SupplementaryAgreementAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool SupplementaryAgreementAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SupplementaryAgreementAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SupplementaryAgreementAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SupplementaryAgreementAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& SupplementaryAgreementAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* SupplementaryAgreementAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* SupplementaryAgreementAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void SupplementaryAgreementAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.SignedContent)
}

// required string FileName = 2;
inline bool SupplementaryAgreementAttachment::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SupplementaryAgreementAttachment::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SupplementaryAgreementAttachment::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SupplementaryAgreementAttachment::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& SupplementaryAgreementAttachment::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.FileName)
  return *filename_;
}
inline void SupplementaryAgreementAttachment::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.FileName)
}
inline void SupplementaryAgreementAttachment::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.FileName)
}
inline void SupplementaryAgreementAttachment::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.FileName)
}
inline ::std::string* SupplementaryAgreementAttachment::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.FileName)
  return filename_;
}
inline ::std::string* SupplementaryAgreementAttachment::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SupplementaryAgreementAttachment::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.FileName)
}

// optional string Comment = 3;
inline bool SupplementaryAgreementAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SupplementaryAgreementAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SupplementaryAgreementAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SupplementaryAgreementAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& SupplementaryAgreementAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.Comment)
  return *comment_;
}
inline void SupplementaryAgreementAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.Comment)
}
inline void SupplementaryAgreementAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.Comment)
}
inline void SupplementaryAgreementAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.Comment)
}
inline ::std::string* SupplementaryAgreementAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.Comment)
  return comment_;
}
inline ::std::string* SupplementaryAgreementAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SupplementaryAgreementAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.Comment)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
inline int SupplementaryAgreementAttachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void SupplementaryAgreementAttachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& SupplementaryAgreementAttachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* SupplementaryAgreementAttachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* SupplementaryAgreementAttachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
SupplementaryAgreementAttachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
SupplementaryAgreementAttachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
inline int SupplementaryAgreementAttachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void SupplementaryAgreementAttachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& SupplementaryAgreementAttachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* SupplementaryAgreementAttachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* SupplementaryAgreementAttachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
SupplementaryAgreementAttachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
SupplementaryAgreementAttachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// optional string CustomDocumentId = 6;
inline bool SupplementaryAgreementAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SupplementaryAgreementAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SupplementaryAgreementAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SupplementaryAgreementAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& SupplementaryAgreementAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void SupplementaryAgreementAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.CustomDocumentId)
}
inline void SupplementaryAgreementAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.CustomDocumentId)
}
inline void SupplementaryAgreementAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.CustomDocumentId)
}
inline ::std::string* SupplementaryAgreementAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* SupplementaryAgreementAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SupplementaryAgreementAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.CustomDocumentId)
}

// required string DocumentDate = 7;
inline bool SupplementaryAgreementAttachment::has_documentdate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SupplementaryAgreementAttachment::set_has_documentdate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SupplementaryAgreementAttachment::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SupplementaryAgreementAttachment::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& SupplementaryAgreementAttachment::documentdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.DocumentDate)
  return *documentdate_;
}
inline void SupplementaryAgreementAttachment::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.DocumentDate)
}
inline void SupplementaryAgreementAttachment::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.DocumentDate)
}
inline void SupplementaryAgreementAttachment::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.DocumentDate)
}
inline ::std::string* SupplementaryAgreementAttachment::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.DocumentDate)
  return documentdate_;
}
inline ::std::string* SupplementaryAgreementAttachment::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SupplementaryAgreementAttachment::set_allocated_documentdate(::std::string* documentdate) {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentdate) {
    set_has_documentdate();
    documentdate_ = documentdate;
  } else {
    clear_has_documentdate();
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.DocumentDate)
}

// required string DocumentNumber = 8;
inline bool SupplementaryAgreementAttachment::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SupplementaryAgreementAttachment::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SupplementaryAgreementAttachment::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SupplementaryAgreementAttachment::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& SupplementaryAgreementAttachment::documentnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.DocumentNumber)
  return *documentnumber_;
}
inline void SupplementaryAgreementAttachment::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.DocumentNumber)
}
inline void SupplementaryAgreementAttachment::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.DocumentNumber)
}
inline void SupplementaryAgreementAttachment::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.DocumentNumber)
}
inline ::std::string* SupplementaryAgreementAttachment::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.DocumentNumber)
  return documentnumber_;
}
inline ::std::string* SupplementaryAgreementAttachment::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SupplementaryAgreementAttachment::set_allocated_documentnumber(::std::string* documentnumber) {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documentnumber) {
    set_has_documentnumber();
    documentnumber_ = documentnumber;
  } else {
    clear_has_documentnumber();
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.DocumentNumber)
}

// optional string Total = 9;
inline bool SupplementaryAgreementAttachment::has_total() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SupplementaryAgreementAttachment::set_has_total() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SupplementaryAgreementAttachment::clear_has_total() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SupplementaryAgreementAttachment::clear_total() {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_->clear();
  }
  clear_has_total();
}
inline const ::std::string& SupplementaryAgreementAttachment::total() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.Total)
  return *total_;
}
inline void SupplementaryAgreementAttachment::set_total(const ::std::string& value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.Total)
}
inline void SupplementaryAgreementAttachment::set_total(const char* value) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.Total)
}
inline void SupplementaryAgreementAttachment::set_total(const char* value, size_t size) {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  total_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.Total)
}
inline ::std::string* SupplementaryAgreementAttachment::mutable_total() {
  set_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    total_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.Total)
  return total_;
}
inline ::std::string* SupplementaryAgreementAttachment::release_total() {
  clear_has_total();
  if (total_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = total_;
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SupplementaryAgreementAttachment::set_allocated_total(::std::string* total) {
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (total) {
    set_has_total();
    total_ = total;
  } else {
    clear_has_total();
    total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.Total)
}

// required string ContractNumber = 10;
inline bool SupplementaryAgreementAttachment::has_contractnumber() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SupplementaryAgreementAttachment::set_has_contractnumber() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SupplementaryAgreementAttachment::clear_has_contractnumber() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SupplementaryAgreementAttachment::clear_contractnumber() {
  if (contractnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnumber_->clear();
  }
  clear_has_contractnumber();
}
inline const ::std::string& SupplementaryAgreementAttachment::contractnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractNumber)
  return *contractnumber_;
}
inline void SupplementaryAgreementAttachment::set_contractnumber(const ::std::string& value) {
  set_has_contractnumber();
  if (contractnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnumber_ = new ::std::string;
  }
  contractnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractNumber)
}
inline void SupplementaryAgreementAttachment::set_contractnumber(const char* value) {
  set_has_contractnumber();
  if (contractnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnumber_ = new ::std::string;
  }
  contractnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractNumber)
}
inline void SupplementaryAgreementAttachment::set_contractnumber(const char* value, size_t size) {
  set_has_contractnumber();
  if (contractnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnumber_ = new ::std::string;
  }
  contractnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractNumber)
}
inline ::std::string* SupplementaryAgreementAttachment::mutable_contractnumber() {
  set_has_contractnumber();
  if (contractnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractNumber)
  return contractnumber_;
}
inline ::std::string* SupplementaryAgreementAttachment::release_contractnumber() {
  clear_has_contractnumber();
  if (contractnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractnumber_;
    contractnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SupplementaryAgreementAttachment::set_allocated_contractnumber(::std::string* contractnumber) {
  if (contractnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractnumber_;
  }
  if (contractnumber) {
    set_has_contractnumber();
    contractnumber_ = contractnumber;
  } else {
    clear_has_contractnumber();
    contractnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractNumber)
}

// required string ContractDate = 11;
inline bool SupplementaryAgreementAttachment::has_contractdate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SupplementaryAgreementAttachment::set_has_contractdate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SupplementaryAgreementAttachment::clear_has_contractdate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SupplementaryAgreementAttachment::clear_contractdate() {
  if (contractdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdate_->clear();
  }
  clear_has_contractdate();
}
inline const ::std::string& SupplementaryAgreementAttachment::contractdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractDate)
  return *contractdate_;
}
inline void SupplementaryAgreementAttachment::set_contractdate(const ::std::string& value) {
  set_has_contractdate();
  if (contractdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdate_ = new ::std::string;
  }
  contractdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractDate)
}
inline void SupplementaryAgreementAttachment::set_contractdate(const char* value) {
  set_has_contractdate();
  if (contractdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdate_ = new ::std::string;
  }
  contractdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractDate)
}
inline void SupplementaryAgreementAttachment::set_contractdate(const char* value, size_t size) {
  set_has_contractdate();
  if (contractdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdate_ = new ::std::string;
  }
  contractdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractDate)
}
inline ::std::string* SupplementaryAgreementAttachment::mutable_contractdate() {
  set_has_contractdate();
  if (contractdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contractdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractDate)
  return contractdate_;
}
inline ::std::string* SupplementaryAgreementAttachment::release_contractdate() {
  clear_has_contractdate();
  if (contractdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contractdate_;
    contractdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SupplementaryAgreementAttachment::set_allocated_contractdate(::std::string* contractdate) {
  if (contractdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractdate_;
  }
  if (contractdate) {
    set_has_contractdate();
    contractdate_ = contractdate;
  } else {
    clear_has_contractdate();
    contractdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractDate)
}

// optional string ContractType = 12;
inline bool SupplementaryAgreementAttachment::has_contracttype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SupplementaryAgreementAttachment::set_has_contracttype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SupplementaryAgreementAttachment::clear_has_contracttype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SupplementaryAgreementAttachment::clear_contracttype() {
  if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contracttype_->clear();
  }
  clear_has_contracttype();
}
inline const ::std::string& SupplementaryAgreementAttachment::contracttype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractType)
  return *contracttype_;
}
inline void SupplementaryAgreementAttachment::set_contracttype(const ::std::string& value) {
  set_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contracttype_ = new ::std::string;
  }
  contracttype_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractType)
}
inline void SupplementaryAgreementAttachment::set_contracttype(const char* value) {
  set_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contracttype_ = new ::std::string;
  }
  contracttype_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractType)
}
inline void SupplementaryAgreementAttachment::set_contracttype(const char* value, size_t size) {
  set_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contracttype_ = new ::std::string;
  }
  contracttype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractType)
}
inline ::std::string* SupplementaryAgreementAttachment::mutable_contracttype() {
  set_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contracttype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractType)
  return contracttype_;
}
inline ::std::string* SupplementaryAgreementAttachment::release_contracttype() {
  clear_has_contracttype();
  if (contracttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contracttype_;
    contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SupplementaryAgreementAttachment::set_allocated_contracttype(::std::string* contracttype) {
  if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contracttype_;
  }
  if (contracttype) {
    set_has_contracttype();
    contracttype_ = contracttype;
  } else {
    clear_has_contracttype();
    contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.ContractType)
}

// optional bool NeedReceipt = 13 [default = false];
inline bool SupplementaryAgreementAttachment::has_needreceipt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SupplementaryAgreementAttachment::set_has_needreceipt() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SupplementaryAgreementAttachment::clear_has_needreceipt() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SupplementaryAgreementAttachment::clear_needreceipt() {
  needreceipt_ = false;
  clear_has_needreceipt();
}
inline bool SupplementaryAgreementAttachment::needreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.NeedReceipt)
  return needreceipt_;
}
inline void SupplementaryAgreementAttachment::set_needreceipt(bool value) {
  set_has_needreceipt();
  needreceipt_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.NeedReceipt)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 14;
inline int SupplementaryAgreementAttachment::customdata_size() const {
  return customdata_.size();
}
inline void SupplementaryAgreementAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& SupplementaryAgreementAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* SupplementaryAgreementAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* SupplementaryAgreementAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
SupplementaryAgreementAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
SupplementaryAgreementAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment.CustomData)
  return &customdata_;
}

// -------------------------------------------------------------------

// ServiceDetailsAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool ServiceDetailsAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceDetailsAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceDetailsAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceDetailsAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& ServiceDetailsAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* ServiceDetailsAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* ServiceDetailsAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void ServiceDetailsAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.SignedContent)
}

// required string FileName = 2;
inline bool ServiceDetailsAttachment::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceDetailsAttachment::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceDetailsAttachment::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceDetailsAttachment::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& ServiceDetailsAttachment::filename() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.FileName)
  return *filename_;
}
inline void ServiceDetailsAttachment::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.FileName)
}
inline void ServiceDetailsAttachment::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.FileName)
}
inline void ServiceDetailsAttachment::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.FileName)
}
inline ::std::string* ServiceDetailsAttachment::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.FileName)
  return filename_;
}
inline ::std::string* ServiceDetailsAttachment::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceDetailsAttachment::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.FileName)
}

// optional string Comment = 3;
inline bool ServiceDetailsAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceDetailsAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceDetailsAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceDetailsAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ServiceDetailsAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.Comment)
  return *comment_;
}
inline void ServiceDetailsAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.Comment)
}
inline void ServiceDetailsAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.Comment)
}
inline void ServiceDetailsAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.Comment)
}
inline ::std::string* ServiceDetailsAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.Comment)
  return comment_;
}
inline ::std::string* ServiceDetailsAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceDetailsAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.Comment)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
inline int ServiceDetailsAttachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void ServiceDetailsAttachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& ServiceDetailsAttachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* ServiceDetailsAttachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* ServiceDetailsAttachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
ServiceDetailsAttachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
ServiceDetailsAttachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
inline int ServiceDetailsAttachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void ServiceDetailsAttachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& ServiceDetailsAttachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* ServiceDetailsAttachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* ServiceDetailsAttachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
ServiceDetailsAttachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
ServiceDetailsAttachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// optional string DocumentDate = 7;
inline bool ServiceDetailsAttachment::has_documentdate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceDetailsAttachment::set_has_documentdate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServiceDetailsAttachment::clear_has_documentdate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServiceDetailsAttachment::clear_documentdate() {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_->clear();
  }
  clear_has_documentdate();
}
inline const ::std::string& ServiceDetailsAttachment::documentdate() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.DocumentDate)
  return *documentdate_;
}
inline void ServiceDetailsAttachment::set_documentdate(const ::std::string& value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.DocumentDate)
}
inline void ServiceDetailsAttachment::set_documentdate(const char* value) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.DocumentDate)
}
inline void ServiceDetailsAttachment::set_documentdate(const char* value, size_t size) {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  documentdate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.DocumentDate)
}
inline ::std::string* ServiceDetailsAttachment::mutable_documentdate() {
  set_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentdate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.DocumentDate)
  return documentdate_;
}
inline ::std::string* ServiceDetailsAttachment::release_documentdate() {
  clear_has_documentdate();
  if (documentdate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentdate_;
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceDetailsAttachment::set_allocated_documentdate(::std::string* documentdate) {
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentdate) {
    set_has_documentdate();
    documentdate_ = documentdate;
  } else {
    clear_has_documentdate();
    documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.DocumentDate)
}

// optional string DocumentNumber = 8;
inline bool ServiceDetailsAttachment::has_documentnumber() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceDetailsAttachment::set_has_documentnumber() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServiceDetailsAttachment::clear_has_documentnumber() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServiceDetailsAttachment::clear_documentnumber() {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_->clear();
  }
  clear_has_documentnumber();
}
inline const ::std::string& ServiceDetailsAttachment::documentnumber() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.DocumentNumber)
  return *documentnumber_;
}
inline void ServiceDetailsAttachment::set_documentnumber(const ::std::string& value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.DocumentNumber)
}
inline void ServiceDetailsAttachment::set_documentnumber(const char* value) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.DocumentNumber)
}
inline void ServiceDetailsAttachment::set_documentnumber(const char* value, size_t size) {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  documentnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.DocumentNumber)
}
inline ::std::string* ServiceDetailsAttachment::mutable_documentnumber() {
  set_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.DocumentNumber)
  return documentnumber_;
}
inline ::std::string* ServiceDetailsAttachment::release_documentnumber() {
  clear_has_documentnumber();
  if (documentnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentnumber_;
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceDetailsAttachment::set_allocated_documentnumber(::std::string* documentnumber) {
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (documentnumber) {
    set_has_documentnumber();
    documentnumber_ = documentnumber;
  } else {
    clear_has_documentnumber();
    documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.DocumentNumber)
}

// optional string CustomDocumentId = 9;
inline bool ServiceDetailsAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServiceDetailsAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServiceDetailsAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServiceDetailsAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& ServiceDetailsAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void ServiceDetailsAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.CustomDocumentId)
}
inline void ServiceDetailsAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.CustomDocumentId)
}
inline void ServiceDetailsAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.CustomDocumentId)
}
inline ::std::string* ServiceDetailsAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* ServiceDetailsAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServiceDetailsAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.CustomDocumentId)
}

// optional bool NeedReceipt = 10 [default = false];
inline bool ServiceDetailsAttachment::has_needreceipt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServiceDetailsAttachment::set_has_needreceipt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServiceDetailsAttachment::clear_has_needreceipt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServiceDetailsAttachment::clear_needreceipt() {
  needreceipt_ = false;
  clear_has_needreceipt();
}
inline bool ServiceDetailsAttachment::needreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.NeedReceipt)
  return needreceipt_;
}
inline void ServiceDetailsAttachment::set_needreceipt(bool value) {
  set_has_needreceipt();
  needreceipt_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.NeedReceipt)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
inline int ServiceDetailsAttachment::customdata_size() const {
  return customdata_.size();
}
inline void ServiceDetailsAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& ServiceDetailsAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* ServiceDetailsAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* ServiceDetailsAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
ServiceDetailsAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
ServiceDetailsAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ServiceDetailsAttachment.CustomData)
  return &customdata_;
}

// -------------------------------------------------------------------

// DocumentAttachment

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
inline bool DocumentAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& DocumentAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* DocumentAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* DocumentAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void DocumentAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentAttachment.SignedContent)
}

// optional string Comment = 3;
inline bool DocumentAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& DocumentAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.Comment)
  return *comment_;
}
inline void DocumentAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentAttachment.Comment)
}
inline void DocumentAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentAttachment.Comment)
}
inline void DocumentAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentAttachment.Comment)
}
inline ::std::string* DocumentAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentAttachment.Comment)
  return comment_;
}
inline ::std::string* DocumentAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentAttachment.Comment)
}

// optional bool NeedRecipientSignature = 4 [default = false];
inline bool DocumentAttachment::has_needrecipientsignature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentAttachment::set_has_needrecipientsignature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentAttachment::clear_has_needrecipientsignature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentAttachment::clear_needrecipientsignature() {
  needrecipientsignature_ = false;
  clear_has_needrecipientsignature();
}
inline bool DocumentAttachment::needrecipientsignature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.NeedRecipientSignature)
  return needrecipientsignature_;
}
inline void DocumentAttachment::set_needrecipientsignature(bool value) {
  set_has_needrecipientsignature();
  needrecipientsignature_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentAttachment.NeedRecipientSignature)
}

// repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
inline int DocumentAttachment::initialdocumentids_size() const {
  return initialdocumentids_.size();
}
inline void DocumentAttachment::clear_initialdocumentids() {
  initialdocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& DocumentAttachment::initialdocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.InitialDocumentIds)
  return initialdocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentAttachment::mutable_initialdocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentAttachment.InitialDocumentIds)
  return initialdocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentAttachment::add_initialdocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.DocumentAttachment.InitialDocumentIds)
  return initialdocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
DocumentAttachment::initialdocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.DocumentAttachment.InitialDocumentIds)
  return initialdocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
DocumentAttachment::mutable_initialdocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.DocumentAttachment.InitialDocumentIds)
  return &initialdocumentids_;
}

// repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
inline int DocumentAttachment::subordinatedocumentids_size() const {
  return subordinatedocumentids_.size();
}
inline void DocumentAttachment::clear_subordinatedocumentids() {
  subordinatedocumentids_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& DocumentAttachment::subordinatedocumentids(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentAttachment::mutable_subordinatedocumentids(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentAttachment::add_subordinatedocumentids() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.DocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
DocumentAttachment::subordinatedocumentids() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.DocumentAttachment.SubordinateDocumentIds)
  return subordinatedocumentids_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
DocumentAttachment::mutable_subordinatedocumentids() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.DocumentAttachment.SubordinateDocumentIds)
  return &subordinatedocumentids_;
}

// optional string CustomDocumentId = 9;
inline bool DocumentAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocumentAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocumentAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocumentAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& DocumentAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void DocumentAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentAttachment.CustomDocumentId)
}
inline void DocumentAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentAttachment.CustomDocumentId)
}
inline void DocumentAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentAttachment.CustomDocumentId)
}
inline ::std::string* DocumentAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* DocumentAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentAttachment.CustomDocumentId)
}

// optional bool NeedReceipt = 10 [default = false];
inline bool DocumentAttachment::has_needreceipt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DocumentAttachment::set_has_needreceipt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DocumentAttachment::clear_has_needreceipt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DocumentAttachment::clear_needreceipt() {
  needreceipt_ = false;
  clear_has_needreceipt();
}
inline bool DocumentAttachment::needreceipt() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.NeedReceipt)
  return needreceipt_;
}
inline void DocumentAttachment::set_needreceipt(bool value) {
  set_has_needreceipt();
  needreceipt_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentAttachment.NeedReceipt)
}

// repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
inline int DocumentAttachment::customdata_size() const {
  return customdata_.size();
}
inline void DocumentAttachment::clear_customdata() {
  customdata_.Clear();
}
inline const ::Diadoc::Api::Proto::CustomDataItem& DocumentAttachment::customdata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.CustomData)
  return customdata_.Get(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* DocumentAttachment::mutable_customdata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentAttachment.CustomData)
  return customdata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::CustomDataItem* DocumentAttachment::add_customdata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.DocumentAttachment.CustomData)
  return customdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >&
DocumentAttachment::customdata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.DocumentAttachment.CustomData)
  return customdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::CustomDataItem >*
DocumentAttachment::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.DocumentAttachment.CustomData)
  return &customdata_;
}

// required string TypeNamedId = 12;
inline bool DocumentAttachment::has_typenamedid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DocumentAttachment::set_has_typenamedid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DocumentAttachment::clear_has_typenamedid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DocumentAttachment::clear_typenamedid() {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_->clear();
  }
  clear_has_typenamedid();
}
inline const ::std::string& DocumentAttachment::typenamedid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.TypeNamedId)
  return *typenamedid_;
}
inline void DocumentAttachment::set_typenamedid(const ::std::string& value) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentAttachment.TypeNamedId)
}
inline void DocumentAttachment::set_typenamedid(const char* value) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentAttachment.TypeNamedId)
}
inline void DocumentAttachment::set_typenamedid(const char* value, size_t size) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentAttachment.TypeNamedId)
}
inline ::std::string* DocumentAttachment::mutable_typenamedid() {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentAttachment.TypeNamedId)
  return typenamedid_;
}
inline ::std::string* DocumentAttachment::release_typenamedid() {
  clear_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = typenamedid_;
    typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentAttachment::set_allocated_typenamedid(::std::string* typenamedid) {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typenamedid_;
  }
  if (typenamedid) {
    set_has_typenamedid();
    typenamedid_ = typenamedid;
  } else {
    clear_has_typenamedid();
    typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentAttachment.TypeNamedId)
}

// optional string Function = 13;
inline bool DocumentAttachment::has_function() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DocumentAttachment::set_has_function() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DocumentAttachment::clear_has_function() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DocumentAttachment::clear_function() {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_->clear();
  }
  clear_has_function();
}
inline const ::std::string& DocumentAttachment::function() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.Function)
  return *function_;
}
inline void DocumentAttachment::set_function(const ::std::string& value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentAttachment.Function)
}
inline void DocumentAttachment::set_function(const char* value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentAttachment.Function)
}
inline void DocumentAttachment::set_function(const char* value, size_t size) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentAttachment.Function)
}
inline ::std::string* DocumentAttachment::mutable_function() {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentAttachment.Function)
  return function_;
}
inline ::std::string* DocumentAttachment::release_function() {
  clear_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = function_;
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentAttachment::set_allocated_function(::std::string* function) {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (function) {
    set_has_function();
    function_ = function;
  } else {
    clear_has_function();
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentAttachment.Function)
}

// optional string Version = 14;
inline bool DocumentAttachment::has_version() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DocumentAttachment::set_has_version() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DocumentAttachment::clear_has_version() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DocumentAttachment::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& DocumentAttachment::version() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.Version)
  return *version_;
}
inline void DocumentAttachment::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentAttachment.Version)
}
inline void DocumentAttachment::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentAttachment.Version)
}
inline void DocumentAttachment::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentAttachment.Version)
}
inline ::std::string* DocumentAttachment::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentAttachment.Version)
  return version_;
}
inline ::std::string* DocumentAttachment::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentAttachment::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentAttachment.Version)
}

// repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 15;
inline int DocumentAttachment::metadata_size() const {
  return metadata_.size();
}
inline void DocumentAttachment::clear_metadata() {
  metadata_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::MetadataItem& DocumentAttachment::metadata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.Metadata)
  return metadata_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::MetadataItem* DocumentAttachment::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentAttachment.Metadata)
  return metadata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::MetadataItem* DocumentAttachment::add_metadata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.DocumentAttachment.Metadata)
  return metadata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >&
DocumentAttachment::metadata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.DocumentAttachment.Metadata)
  return metadata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >*
DocumentAttachment::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.DocumentAttachment.Metadata)
  return &metadata_;
}

// optional int32 WorkflowId = 16;
inline bool DocumentAttachment::has_workflowid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DocumentAttachment::set_has_workflowid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DocumentAttachment::clear_has_workflowid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DocumentAttachment::clear_workflowid() {
  workflowid_ = 0;
  clear_has_workflowid();
}
inline ::google::protobuf::int32 DocumentAttachment::workflowid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.WorkflowId)
  return workflowid_;
}
inline void DocumentAttachment::set_workflowid(::google::protobuf::int32 value) {
  set_has_workflowid();
  workflowid_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentAttachment.WorkflowId)
}

// optional bool IsEncrypted = 17 [default = false];
inline bool DocumentAttachment::has_isencrypted() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DocumentAttachment::set_has_isencrypted() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DocumentAttachment::clear_has_isencrypted() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DocumentAttachment::clear_isencrypted() {
  isencrypted_ = false;
  clear_has_isencrypted();
}
inline bool DocumentAttachment::isencrypted() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentAttachment.IsEncrypted)
  return isencrypted_;
}
inline void DocumentAttachment::set_isencrypted(bool value) {
  set_has_isencrypted();
  isencrypted_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentAttachment.IsEncrypted)
}

// -------------------------------------------------------------------

// MetadataItem

// required string Key = 1;
inline bool MetadataItem::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetadataItem::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetadataItem::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetadataItem::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& MetadataItem::key() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MetadataItem.Key)
  return *key_;
}
inline void MetadataItem::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MetadataItem.Key)
}
inline void MetadataItem::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.MetadataItem.Key)
}
inline void MetadataItem::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.MetadataItem.Key)
}
inline ::std::string* MetadataItem::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MetadataItem.Key)
  return key_;
}
inline ::std::string* MetadataItem::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MetadataItem::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.MetadataItem.Key)
}

// required string Value = 2;
inline bool MetadataItem::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetadataItem::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetadataItem::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetadataItem::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& MetadataItem::value() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MetadataItem.Value)
  return *value_;
}
inline void MetadataItem::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MetadataItem.Value)
}
inline void MetadataItem::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.MetadataItem.Value)
}
inline void MetadataItem::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.MetadataItem.Value)
}
inline ::std::string* MetadataItem::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MetadataItem.Value)
  return value_;
}
inline ::std::string* MetadataItem::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MetadataItem::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.MetadataItem.Value)
}

// -------------------------------------------------------------------

// MessagePatchToPost

// required string BoxId = 1;
inline bool MessagePatchToPost::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessagePatchToPost::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessagePatchToPost::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessagePatchToPost::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& MessagePatchToPost::boxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.BoxId)
  return *boxid_;
}
inline void MessagePatchToPost::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessagePatchToPost.BoxId)
}
inline void MessagePatchToPost::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.MessagePatchToPost.BoxId)
}
inline void MessagePatchToPost::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.MessagePatchToPost.BoxId)
}
inline ::std::string* MessagePatchToPost::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.BoxId)
  return boxid_;
}
inline ::std::string* MessagePatchToPost::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessagePatchToPost::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.MessagePatchToPost.BoxId)
}

// required string MessageId = 2;
inline bool MessagePatchToPost::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessagePatchToPost::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessagePatchToPost::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessagePatchToPost::clear_messageid() {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_->clear();
  }
  clear_has_messageid();
}
inline const ::std::string& MessagePatchToPost::messageid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.MessageId)
  return *messageid_;
}
inline void MessagePatchToPost::set_messageid(const ::std::string& value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessagePatchToPost.MessageId)
}
inline void MessagePatchToPost::set_messageid(const char* value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.MessagePatchToPost.MessageId)
}
inline void MessagePatchToPost::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.MessagePatchToPost.MessageId)
}
inline ::std::string* MessagePatchToPost::mutable_messageid() {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.MessageId)
  return messageid_;
}
inline ::std::string* MessagePatchToPost::release_messageid() {
  clear_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = messageid_;
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessagePatchToPost::set_allocated_messageid(::std::string* messageid) {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messageid_;
  }
  if (messageid) {
    set_has_messageid();
    messageid_ = messageid;
  } else {
    clear_has_messageid();
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.MessagePatchToPost.MessageId)
}

// repeated .Diadoc.Api.Proto.Events.ReceiptAttachment Receipts = 3;
inline int MessagePatchToPost::receipts_size() const {
  return receipts_.size();
}
inline void MessagePatchToPost::clear_receipts() {
  receipts_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ReceiptAttachment& MessagePatchToPost::receipts(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.Receipts)
  return receipts_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* MessagePatchToPost::mutable_receipts(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.Receipts)
  return receipts_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* MessagePatchToPost::add_receipts() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.Receipts)
  return receipts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >&
MessagePatchToPost::receipts() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.Receipts)
  return receipts_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >*
MessagePatchToPost::mutable_receipts() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.Receipts)
  return &receipts_;
}

// repeated .Diadoc.Api.Proto.Events.CorrectionRequestAttachment CorrectionRequests = 4;
inline int MessagePatchToPost::correctionrequests_size() const {
  return correctionrequests_.size();
}
inline void MessagePatchToPost::clear_correctionrequests() {
  correctionrequests_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::CorrectionRequestAttachment& MessagePatchToPost::correctionrequests(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.CorrectionRequests)
  return correctionrequests_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::CorrectionRequestAttachment* MessagePatchToPost::mutable_correctionrequests(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.CorrectionRequests)
  return correctionrequests_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::CorrectionRequestAttachment* MessagePatchToPost::add_correctionrequests() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.CorrectionRequests)
  return correctionrequests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CorrectionRequestAttachment >&
MessagePatchToPost::correctionrequests() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.CorrectionRequests)
  return correctionrequests_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CorrectionRequestAttachment >*
MessagePatchToPost::mutable_correctionrequests() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.CorrectionRequests)
  return &correctionrequests_;
}

// repeated .Diadoc.Api.Proto.Events.DocumentSignature Signatures = 5;
inline int MessagePatchToPost::signatures_size() const {
  return signatures_.size();
}
inline void MessagePatchToPost::clear_signatures() {
  signatures_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::DocumentSignature& MessagePatchToPost::signatures(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.Signatures)
  return signatures_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentSignature* MessagePatchToPost::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.Signatures)
  return signatures_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentSignature* MessagePatchToPost::add_signatures() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.Signatures)
  return signatures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSignature >&
MessagePatchToPost::signatures() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.Signatures)
  return signatures_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSignature >*
MessagePatchToPost::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.Signatures)
  return &signatures_;
}

// repeated .Diadoc.Api.Proto.Events.RequestedSignatureRejection RequestedSignatureRejections = 6;
inline int MessagePatchToPost::requestedsignaturerejections_size() const {
  return requestedsignaturerejections_.size();
}
inline void MessagePatchToPost::clear_requestedsignaturerejections() {
  requestedsignaturerejections_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::RequestedSignatureRejection& MessagePatchToPost::requestedsignaturerejections(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.RequestedSignatureRejections)
  return requestedsignaturerejections_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::RequestedSignatureRejection* MessagePatchToPost::mutable_requestedsignaturerejections(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.RequestedSignatureRejections)
  return requestedsignaturerejections_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::RequestedSignatureRejection* MessagePatchToPost::add_requestedsignaturerejections() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.RequestedSignatureRejections)
  return requestedsignaturerejections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::RequestedSignatureRejection >&
MessagePatchToPost::requestedsignaturerejections() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.RequestedSignatureRejections)
  return requestedsignaturerejections_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::RequestedSignatureRejection >*
MessagePatchToPost::mutable_requestedsignaturerejections() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.RequestedSignatureRejections)
  return &requestedsignaturerejections_;
}

// repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlTorg12BuyerTitles = 7;
inline int MessagePatchToPost::xmltorg12buyertitles_size() const {
  return xmltorg12buyertitles_.size();
}
inline void MessagePatchToPost::clear_xmltorg12buyertitles() {
  xmltorg12buyertitles_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ReceiptAttachment& MessagePatchToPost::xmltorg12buyertitles(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlTorg12BuyerTitles)
  return xmltorg12buyertitles_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* MessagePatchToPost::mutable_xmltorg12buyertitles(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlTorg12BuyerTitles)
  return xmltorg12buyertitles_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* MessagePatchToPost::add_xmltorg12buyertitles() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlTorg12BuyerTitles)
  return xmltorg12buyertitles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >&
MessagePatchToPost::xmltorg12buyertitles() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlTorg12BuyerTitles)
  return xmltorg12buyertitles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >*
MessagePatchToPost::mutable_xmltorg12buyertitles() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlTorg12BuyerTitles)
  return &xmltorg12buyertitles_;
}

// repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlAcceptanceCertificateBuyerTitles = 8;
inline int MessagePatchToPost::xmlacceptancecertificatebuyertitles_size() const {
  return xmlacceptancecertificatebuyertitles_.size();
}
inline void MessagePatchToPost::clear_xmlacceptancecertificatebuyertitles() {
  xmlacceptancecertificatebuyertitles_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ReceiptAttachment& MessagePatchToPost::xmlacceptancecertificatebuyertitles(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlAcceptanceCertificateBuyerTitles)
  return xmlacceptancecertificatebuyertitles_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* MessagePatchToPost::mutable_xmlacceptancecertificatebuyertitles(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlAcceptanceCertificateBuyerTitles)
  return xmlacceptancecertificatebuyertitles_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* MessagePatchToPost::add_xmlacceptancecertificatebuyertitles() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlAcceptanceCertificateBuyerTitles)
  return xmlacceptancecertificatebuyertitles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >&
MessagePatchToPost::xmlacceptancecertificatebuyertitles() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlAcceptanceCertificateBuyerTitles)
  return xmlacceptancecertificatebuyertitles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >*
MessagePatchToPost::mutable_xmlacceptancecertificatebuyertitles() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlAcceptanceCertificateBuyerTitles)
  return &xmlacceptancecertificatebuyertitles_;
}

// repeated .Diadoc.Api.Proto.Events.ResolutionAttachment Resolutions = 9;
inline int MessagePatchToPost::resolutions_size() const {
  return resolutions_.size();
}
inline void MessagePatchToPost::clear_resolutions() {
  resolutions_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ResolutionAttachment& MessagePatchToPost::resolutions(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.Resolutions)
  return resolutions_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionAttachment* MessagePatchToPost::mutable_resolutions(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.Resolutions)
  return resolutions_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionAttachment* MessagePatchToPost::add_resolutions() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.Resolutions)
  return resolutions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionAttachment >&
MessagePatchToPost::resolutions() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.Resolutions)
  return resolutions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionAttachment >*
MessagePatchToPost::mutable_resolutions() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.Resolutions)
  return &resolutions_;
}

// repeated .Diadoc.Api.Proto.Events.ResolutionRequestAttachment ResolutionRequests = 10;
inline int MessagePatchToPost::resolutionrequests_size() const {
  return resolutionrequests_.size();
}
inline void MessagePatchToPost::clear_resolutionrequests() {
  resolutionrequests_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ResolutionRequestAttachment& MessagePatchToPost::resolutionrequests(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequests)
  return resolutionrequests_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionRequestAttachment* MessagePatchToPost::mutable_resolutionrequests(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequests)
  return resolutionrequests_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionRequestAttachment* MessagePatchToPost::add_resolutionrequests() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequests)
  return resolutionrequests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestAttachment >&
MessagePatchToPost::resolutionrequests() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequests)
  return resolutionrequests_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestAttachment >*
MessagePatchToPost::mutable_resolutionrequests() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequests)
  return &resolutionrequests_;
}

// repeated .Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment ResolutionRequestCancellations = 11;
inline int MessagePatchToPost::resolutionrequestcancellations_size() const {
  return resolutionrequestcancellations_.size();
}
inline void MessagePatchToPost::clear_resolutionrequestcancellations() {
  resolutionrequestcancellations_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ResolutionRequestCancellationAttachment& MessagePatchToPost::resolutionrequestcancellations(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestCancellations)
  return resolutionrequestcancellations_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionRequestCancellationAttachment* MessagePatchToPost::mutable_resolutionrequestcancellations(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestCancellations)
  return resolutionrequestcancellations_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionRequestCancellationAttachment* MessagePatchToPost::add_resolutionrequestcancellations() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestCancellations)
  return resolutionrequestcancellations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestCancellationAttachment >&
MessagePatchToPost::resolutionrequestcancellations() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestCancellations)
  return resolutionrequestcancellations_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestCancellationAttachment >*
MessagePatchToPost::mutable_resolutionrequestcancellations() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestCancellations)
  return &resolutionrequestcancellations_;
}

// repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment ResolutionRequestDenials = 12;
inline int MessagePatchToPost::resolutionrequestdenials_size() const {
  return resolutionrequestdenials_.size();
}
inline void MessagePatchToPost::clear_resolutionrequestdenials() {
  resolutionrequestdenials_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ResolutionRequestDenialAttachment& MessagePatchToPost::resolutionrequestdenials(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestDenials)
  return resolutionrequestdenials_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionRequestDenialAttachment* MessagePatchToPost::mutable_resolutionrequestdenials(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestDenials)
  return resolutionrequestdenials_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionRequestDenialAttachment* MessagePatchToPost::add_resolutionrequestdenials() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestDenials)
  return resolutionrequestdenials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestDenialAttachment >&
MessagePatchToPost::resolutionrequestdenials() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestDenials)
  return resolutionrequestdenials_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestDenialAttachment >*
MessagePatchToPost::mutable_resolutionrequestdenials() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestDenials)
  return &resolutionrequestdenials_;
}

// repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment ResolutionRequestDenialCancellations = 13;
inline int MessagePatchToPost::resolutionrequestdenialcancellations_size() const {
  return resolutionrequestdenialcancellations_.size();
}
inline void MessagePatchToPost::clear_resolutionrequestdenialcancellations() {
  resolutionrequestdenialcancellations_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ResolutionRequestDenialCancellationAttachment& MessagePatchToPost::resolutionrequestdenialcancellations(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestDenialCancellations)
  return resolutionrequestdenialcancellations_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionRequestDenialCancellationAttachment* MessagePatchToPost::mutable_resolutionrequestdenialcancellations(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestDenialCancellations)
  return resolutionrequestdenialcancellations_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionRequestDenialCancellationAttachment* MessagePatchToPost::add_resolutionrequestdenialcancellations() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestDenialCancellations)
  return resolutionrequestdenialcancellations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestDenialCancellationAttachment >&
MessagePatchToPost::resolutionrequestdenialcancellations() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestDenialCancellations)
  return resolutionrequestdenialcancellations_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRequestDenialCancellationAttachment >*
MessagePatchToPost::mutable_resolutionrequestdenialcancellations() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRequestDenialCancellations)
  return &resolutionrequestdenialcancellations_;
}

// repeated .Diadoc.Api.Proto.Events.RevocationRequestAttachment RevocationRequests = 14;
inline int MessagePatchToPost::revocationrequests_size() const {
  return revocationrequests_.size();
}
inline void MessagePatchToPost::clear_revocationrequests() {
  revocationrequests_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::RevocationRequestAttachment& MessagePatchToPost::revocationrequests(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.RevocationRequests)
  return revocationrequests_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::RevocationRequestAttachment* MessagePatchToPost::mutable_revocationrequests(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.RevocationRequests)
  return revocationrequests_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::RevocationRequestAttachment* MessagePatchToPost::add_revocationrequests() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.RevocationRequests)
  return revocationrequests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::RevocationRequestAttachment >&
MessagePatchToPost::revocationrequests() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.RevocationRequests)
  return revocationrequests_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::RevocationRequestAttachment >*
MessagePatchToPost::mutable_revocationrequests() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.RevocationRequests)
  return &revocationrequests_;
}

// repeated .Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment XmlSignatureRejections = 15;
inline int MessagePatchToPost::xmlsignaturerejections_size() const {
  return xmlsignaturerejections_.size();
}
inline void MessagePatchToPost::clear_xmlsignaturerejections() {
  xmlsignaturerejections_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::XmlSignatureRejectionAttachment& MessagePatchToPost::xmlsignaturerejections(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlSignatureRejections)
  return xmlsignaturerejections_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::XmlSignatureRejectionAttachment* MessagePatchToPost::mutable_xmlsignaturerejections(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlSignatureRejections)
  return xmlsignaturerejections_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::XmlSignatureRejectionAttachment* MessagePatchToPost::add_xmlsignaturerejections() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlSignatureRejections)
  return xmlsignaturerejections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlSignatureRejectionAttachment >&
MessagePatchToPost::xmlsignaturerejections() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlSignatureRejections)
  return xmlsignaturerejections_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::XmlSignatureRejectionAttachment >*
MessagePatchToPost::mutable_xmlsignaturerejections() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.XmlSignatureRejections)
  return &xmlsignaturerejections_;
}

// repeated .Diadoc.Api.Proto.Events.CustomDataPatch CustomDataPatches = 16;
inline int MessagePatchToPost::customdatapatches_size() const {
  return customdatapatches_.size();
}
inline void MessagePatchToPost::clear_customdatapatches() {
  customdatapatches_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::CustomDataPatch& MessagePatchToPost::customdatapatches(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.CustomDataPatches)
  return customdatapatches_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::CustomDataPatch* MessagePatchToPost::mutable_customdatapatches(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.CustomDataPatches)
  return customdatapatches_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::CustomDataPatch* MessagePatchToPost::add_customdatapatches() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.CustomDataPatches)
  return customdatapatches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CustomDataPatch >&
MessagePatchToPost::customdatapatches() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.CustomDataPatches)
  return customdatapatches_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CustomDataPatch >*
MessagePatchToPost::mutable_customdatapatches() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.CustomDataPatches)
  return &customdatapatches_;
}

// repeated .Diadoc.Api.Proto.Events.ResolutionRouteAssignment ResolutionRouteAssignments = 17;
inline int MessagePatchToPost::resolutionrouteassignments_size() const {
  return resolutionrouteassignments_.size();
}
inline void MessagePatchToPost::clear_resolutionrouteassignments() {
  resolutionrouteassignments_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ResolutionRouteAssignment& MessagePatchToPost::resolutionrouteassignments(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRouteAssignments)
  return resolutionrouteassignments_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionRouteAssignment* MessagePatchToPost::mutable_resolutionrouteassignments(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRouteAssignments)
  return resolutionrouteassignments_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionRouteAssignment* MessagePatchToPost::add_resolutionrouteassignments() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRouteAssignments)
  return resolutionrouteassignments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRouteAssignment >&
MessagePatchToPost::resolutionrouteassignments() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRouteAssignments)
  return resolutionrouteassignments_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRouteAssignment >*
MessagePatchToPost::mutable_resolutionrouteassignments() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRouteAssignments)
  return &resolutionrouteassignments_;
}

// repeated .Diadoc.Api.Proto.Events.SignatureVerification SignatureVerifications = 18;
inline int MessagePatchToPost::signatureverifications_size() const {
  return signatureverifications_.size();
}
inline void MessagePatchToPost::clear_signatureverifications() {
  signatureverifications_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::SignatureVerification& MessagePatchToPost::signatureverifications(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.SignatureVerifications)
  return signatureverifications_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::SignatureVerification* MessagePatchToPost::mutable_signatureverifications(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.SignatureVerifications)
  return signatureverifications_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::SignatureVerification* MessagePatchToPost::add_signatureverifications() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.SignatureVerifications)
  return signatureverifications_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::SignatureVerification >&
MessagePatchToPost::signatureverifications() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.SignatureVerifications)
  return signatureverifications_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::SignatureVerification >*
MessagePatchToPost::mutable_signatureverifications() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.SignatureVerifications)
  return &signatureverifications_;
}

// repeated .Diadoc.Api.Proto.Events.EditDocumentPacketCommand EditDocumentPacketCommands = 19;
inline int MessagePatchToPost::editdocumentpacketcommands_size() const {
  return editdocumentpacketcommands_.size();
}
inline void MessagePatchToPost::clear_editdocumentpacketcommands() {
  editdocumentpacketcommands_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::EditDocumentPacketCommand& MessagePatchToPost::editdocumentpacketcommands(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.EditDocumentPacketCommands)
  return editdocumentpacketcommands_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::EditDocumentPacketCommand* MessagePatchToPost::mutable_editdocumentpacketcommands(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.EditDocumentPacketCommands)
  return editdocumentpacketcommands_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::EditDocumentPacketCommand* MessagePatchToPost::add_editdocumentpacketcommands() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.EditDocumentPacketCommands)
  return editdocumentpacketcommands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EditDocumentPacketCommand >&
MessagePatchToPost::editdocumentpacketcommands() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.EditDocumentPacketCommands)
  return editdocumentpacketcommands_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::EditDocumentPacketCommand >*
MessagePatchToPost::mutable_editdocumentpacketcommands() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.EditDocumentPacketCommands)
  return &editdocumentpacketcommands_;
}

// repeated .Diadoc.Api.Proto.Events.ReceiptAttachment UniversalTransferDocumentBuyerTitles = 20;
inline int MessagePatchToPost::universaltransferdocumentbuyertitles_size() const {
  return universaltransferdocumentbuyertitles_.size();
}
inline void MessagePatchToPost::clear_universaltransferdocumentbuyertitles() {
  universaltransferdocumentbuyertitles_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ReceiptAttachment& MessagePatchToPost::universaltransferdocumentbuyertitles(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.UniversalTransferDocumentBuyerTitles)
  return universaltransferdocumentbuyertitles_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* MessagePatchToPost::mutable_universaltransferdocumentbuyertitles(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.UniversalTransferDocumentBuyerTitles)
  return universaltransferdocumentbuyertitles_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* MessagePatchToPost::add_universaltransferdocumentbuyertitles() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.UniversalTransferDocumentBuyerTitles)
  return universaltransferdocumentbuyertitles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >&
MessagePatchToPost::universaltransferdocumentbuyertitles() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.UniversalTransferDocumentBuyerTitles)
  return universaltransferdocumentbuyertitles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >*
MessagePatchToPost::mutable_universaltransferdocumentbuyertitles() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.UniversalTransferDocumentBuyerTitles)
  return &universaltransferdocumentbuyertitles_;
}

// repeated .Diadoc.Api.Proto.Events.ResolutionRouteRemoval ResolutionRouteRemovals = 21;
inline int MessagePatchToPost::resolutionrouteremovals_size() const {
  return resolutionrouteremovals_.size();
}
inline void MessagePatchToPost::clear_resolutionrouteremovals() {
  resolutionrouteremovals_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ResolutionRouteRemoval& MessagePatchToPost::resolutionrouteremovals(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRouteRemovals)
  return resolutionrouteremovals_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionRouteRemoval* MessagePatchToPost::mutable_resolutionrouteremovals(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRouteRemovals)
  return resolutionrouteremovals_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ResolutionRouteRemoval* MessagePatchToPost::add_resolutionrouteremovals() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRouteRemovals)
  return resolutionrouteremovals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRouteRemoval >&
MessagePatchToPost::resolutionrouteremovals() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRouteRemovals)
  return resolutionrouteremovals_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ResolutionRouteRemoval >*
MessagePatchToPost::mutable_resolutionrouteremovals() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.ResolutionRouteRemovals)
  return &resolutionrouteremovals_;
}

// repeated .Diadoc.Api.Proto.Events.ReceiptAttachment RecipientTitles = 22;
inline int MessagePatchToPost::recipienttitles_size() const {
  return recipienttitles_.size();
}
inline void MessagePatchToPost::clear_recipienttitles() {
  recipienttitles_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ReceiptAttachment& MessagePatchToPost::recipienttitles(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.RecipientTitles)
  return recipienttitles_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* MessagePatchToPost::mutable_recipienttitles(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.RecipientTitles)
  return recipienttitles_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ReceiptAttachment* MessagePatchToPost::add_recipienttitles() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.RecipientTitles)
  return recipienttitles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >&
MessagePatchToPost::recipienttitles() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.RecipientTitles)
  return recipienttitles_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ReceiptAttachment >*
MessagePatchToPost::mutable_recipienttitles() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.RecipientTitles)
  return &recipienttitles_;
}

// repeated .Diadoc.Api.Proto.Events.CustomDataPatch EditingPatches = 23;
inline int MessagePatchToPost::editingpatches_size() const {
  return editingpatches_.size();
}
inline void MessagePatchToPost::clear_editingpatches() {
  editingpatches_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::CustomDataPatch& MessagePatchToPost::editingpatches(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessagePatchToPost.EditingPatches)
  return editingpatches_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::CustomDataPatch* MessagePatchToPost::mutable_editingpatches(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessagePatchToPost.EditingPatches)
  return editingpatches_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::CustomDataPatch* MessagePatchToPost::add_editingpatches() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessagePatchToPost.EditingPatches)
  return editingpatches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CustomDataPatch >&
MessagePatchToPost::editingpatches() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessagePatchToPost.EditingPatches)
  return editingpatches_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::CustomDataPatch >*
MessagePatchToPost::mutable_editingpatches() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessagePatchToPost.EditingPatches)
  return &editingpatches_;
}

// -------------------------------------------------------------------

// SignatureVerification

// required string InitialDocumentId = 1;
inline bool SignatureVerification::has_initialdocumentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignatureVerification::set_has_initialdocumentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignatureVerification::clear_has_initialdocumentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignatureVerification::clear_initialdocumentid() {
  if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_->clear();
  }
  clear_has_initialdocumentid();
}
inline const ::std::string& SignatureVerification::initialdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SignatureVerification.InitialDocumentId)
  return *initialdocumentid_;
}
inline void SignatureVerification::set_initialdocumentid(const ::std::string& value) {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  initialdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SignatureVerification.InitialDocumentId)
}
inline void SignatureVerification::set_initialdocumentid(const char* value) {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  initialdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SignatureVerification.InitialDocumentId)
}
inline void SignatureVerification::set_initialdocumentid(const char* value, size_t size) {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  initialdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SignatureVerification.InitialDocumentId)
}
inline ::std::string* SignatureVerification::mutable_initialdocumentid() {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SignatureVerification.InitialDocumentId)
  return initialdocumentid_;
}
inline ::std::string* SignatureVerification::release_initialdocumentid() {
  clear_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = initialdocumentid_;
    initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignatureVerification::set_allocated_initialdocumentid(::std::string* initialdocumentid) {
  if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialdocumentid_;
  }
  if (initialdocumentid) {
    set_has_initialdocumentid();
    initialdocumentid_ = initialdocumentid;
  } else {
    clear_has_initialdocumentid();
    initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SignatureVerification.InitialDocumentId)
}

// required bool IsValid = 2;
inline bool SignatureVerification::has_isvalid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignatureVerification::set_has_isvalid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignatureVerification::clear_has_isvalid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignatureVerification::clear_isvalid() {
  isvalid_ = false;
  clear_has_isvalid();
}
inline bool SignatureVerification::isvalid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SignatureVerification.IsValid)
  return isvalid_;
}
inline void SignatureVerification::set_isvalid(bool value) {
  set_has_isvalid();
  isvalid_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SignatureVerification.IsValid)
}

// optional string ErrorMessage = 3;
inline bool SignatureVerification::has_errormessage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignatureVerification::set_has_errormessage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignatureVerification::clear_has_errormessage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignatureVerification::clear_errormessage() {
  if (errormessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errormessage_->clear();
  }
  clear_has_errormessage();
}
inline const ::std::string& SignatureVerification::errormessage() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SignatureVerification.ErrorMessage)
  return *errormessage_;
}
inline void SignatureVerification::set_errormessage(const ::std::string& value) {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errormessage_ = new ::std::string;
  }
  errormessage_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SignatureVerification.ErrorMessage)
}
inline void SignatureVerification::set_errormessage(const char* value) {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errormessage_ = new ::std::string;
  }
  errormessage_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SignatureVerification.ErrorMessage)
}
inline void SignatureVerification::set_errormessage(const char* value, size_t size) {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errormessage_ = new ::std::string;
  }
  errormessage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SignatureVerification.ErrorMessage)
}
inline ::std::string* SignatureVerification::mutable_errormessage() {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errormessage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SignatureVerification.ErrorMessage)
  return errormessage_;
}
inline ::std::string* SignatureVerification::release_errormessage() {
  clear_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errormessage_;
    errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignatureVerification::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errormessage_;
  }
  if (errormessage) {
    set_has_errormessage();
    errormessage_ = errormessage;
  } else {
    clear_has_errormessage();
    errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SignatureVerification.ErrorMessage)
}

// repeated string Labels = 4;
inline int SignatureVerification::labels_size() const {
  return labels_.size();
}
inline void SignatureVerification::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& SignatureVerification::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SignatureVerification.Labels)
  return labels_.Get(index);
}
inline ::std::string* SignatureVerification::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SignatureVerification.Labels)
  return labels_.Mutable(index);
}
inline void SignatureVerification::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SignatureVerification.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void SignatureVerification::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SignatureVerification.Labels)
}
inline void SignatureVerification::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SignatureVerification.Labels)
}
inline ::std::string* SignatureVerification::add_labels() {
  return labels_.Add();
}
inline void SignatureVerification::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.SignatureVerification.Labels)
}
inline void SignatureVerification::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.SignatureVerification.Labels)
}
inline void SignatureVerification::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.SignatureVerification.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SignatureVerification::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.SignatureVerification.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SignatureVerification::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.SignatureVerification.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// ResolutionRequestAttachment

// required string InitialDocumentId = 1;
inline bool ResolutionRequestAttachment::has_initialdocumentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionRequestAttachment::set_has_initialdocumentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionRequestAttachment::clear_has_initialdocumentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionRequestAttachment::clear_initialdocumentid() {
  if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_->clear();
  }
  clear_has_initialdocumentid();
}
inline const ::std::string& ResolutionRequestAttachment::initialdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.InitialDocumentId)
  return *initialdocumentid_;
}
inline void ResolutionRequestAttachment::set_initialdocumentid(const ::std::string& value) {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  initialdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.InitialDocumentId)
}
inline void ResolutionRequestAttachment::set_initialdocumentid(const char* value) {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  initialdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.InitialDocumentId)
}
inline void ResolutionRequestAttachment::set_initialdocumentid(const char* value, size_t size) {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  initialdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.InitialDocumentId)
}
inline ::std::string* ResolutionRequestAttachment::mutable_initialdocumentid() {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.InitialDocumentId)
  return initialdocumentid_;
}
inline ::std::string* ResolutionRequestAttachment::release_initialdocumentid() {
  clear_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = initialdocumentid_;
    initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRequestAttachment::set_allocated_initialdocumentid(::std::string* initialdocumentid) {
  if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialdocumentid_;
  }
  if (initialdocumentid) {
    set_has_initialdocumentid();
    initialdocumentid_ = initialdocumentid;
  } else {
    clear_has_initialdocumentid();
    initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.InitialDocumentId)
}

// required .Diadoc.Api.Proto.Events.ResolutionRequestType Type = 2;
inline bool ResolutionRequestAttachment::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionRequestAttachment::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionRequestAttachment::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionRequestAttachment::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::Diadoc::Api::Proto::Events::ResolutionRequestType ResolutionRequestAttachment::type() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Type)
  return static_cast< ::Diadoc::Api::Proto::Events::ResolutionRequestType >(type_);
}
inline void ResolutionRequestAttachment::set_type(::Diadoc::Api::Proto::Events::ResolutionRequestType value) {
  assert(::Diadoc::Api::Proto::Events::ResolutionRequestType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Type)
}

// optional string TargetUserId = 3;
inline bool ResolutionRequestAttachment::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolutionRequestAttachment::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolutionRequestAttachment::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolutionRequestAttachment::clear_targetuserid() {
  if (targetuserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetuserid_->clear();
  }
  clear_has_targetuserid();
}
inline const ::std::string& ResolutionRequestAttachment::targetuserid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.TargetUserId)
  return *targetuserid_;
}
inline void ResolutionRequestAttachment::set_targetuserid(const ::std::string& value) {
  set_has_targetuserid();
  if (targetuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetuserid_ = new ::std::string;
  }
  targetuserid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.TargetUserId)
}
inline void ResolutionRequestAttachment::set_targetuserid(const char* value) {
  set_has_targetuserid();
  if (targetuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetuserid_ = new ::std::string;
  }
  targetuserid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.TargetUserId)
}
inline void ResolutionRequestAttachment::set_targetuserid(const char* value, size_t size) {
  set_has_targetuserid();
  if (targetuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetuserid_ = new ::std::string;
  }
  targetuserid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.TargetUserId)
}
inline ::std::string* ResolutionRequestAttachment::mutable_targetuserid() {
  set_has_targetuserid();
  if (targetuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetuserid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.TargetUserId)
  return targetuserid_;
}
inline ::std::string* ResolutionRequestAttachment::release_targetuserid() {
  clear_has_targetuserid();
  if (targetuserid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = targetuserid_;
    targetuserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRequestAttachment::set_allocated_targetuserid(::std::string* targetuserid) {
  if (targetuserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetuserid_;
  }
  if (targetuserid) {
    set_has_targetuserid();
    targetuserid_ = targetuserid;
  } else {
    clear_has_targetuserid();
    targetuserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.TargetUserId)
}

// optional string TargetDepartmentId = 4;
inline bool ResolutionRequestAttachment::has_targetdepartmentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResolutionRequestAttachment::set_has_targetdepartmentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResolutionRequestAttachment::clear_has_targetdepartmentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResolutionRequestAttachment::clear_targetdepartmentid() {
  if (targetdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetdepartmentid_->clear();
  }
  clear_has_targetdepartmentid();
}
inline const ::std::string& ResolutionRequestAttachment::targetdepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.TargetDepartmentId)
  return *targetdepartmentid_;
}
inline void ResolutionRequestAttachment::set_targetdepartmentid(const ::std::string& value) {
  set_has_targetdepartmentid();
  if (targetdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetdepartmentid_ = new ::std::string;
  }
  targetdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.TargetDepartmentId)
}
inline void ResolutionRequestAttachment::set_targetdepartmentid(const char* value) {
  set_has_targetdepartmentid();
  if (targetdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetdepartmentid_ = new ::std::string;
  }
  targetdepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.TargetDepartmentId)
}
inline void ResolutionRequestAttachment::set_targetdepartmentid(const char* value, size_t size) {
  set_has_targetdepartmentid();
  if (targetdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetdepartmentid_ = new ::std::string;
  }
  targetdepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.TargetDepartmentId)
}
inline ::std::string* ResolutionRequestAttachment::mutable_targetdepartmentid() {
  set_has_targetdepartmentid();
  if (targetdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetdepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.TargetDepartmentId)
  return targetdepartmentid_;
}
inline ::std::string* ResolutionRequestAttachment::release_targetdepartmentid() {
  clear_has_targetdepartmentid();
  if (targetdepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = targetdepartmentid_;
    targetdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRequestAttachment::set_allocated_targetdepartmentid(::std::string* targetdepartmentid) {
  if (targetdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetdepartmentid_;
  }
  if (targetdepartmentid) {
    set_has_targetdepartmentid();
    targetdepartmentid_ = targetdepartmentid;
  } else {
    clear_has_targetdepartmentid();
    targetdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.TargetDepartmentId)
}

// optional string Comment = 5;
inline bool ResolutionRequestAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResolutionRequestAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResolutionRequestAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResolutionRequestAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ResolutionRequestAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Comment)
  return *comment_;
}
inline void ResolutionRequestAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Comment)
}
inline void ResolutionRequestAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Comment)
}
inline void ResolutionRequestAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Comment)
}
inline ::std::string* ResolutionRequestAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Comment)
  return comment_;
}
inline ::std::string* ResolutionRequestAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRequestAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Comment)
}

// repeated string Labels = 6;
inline int ResolutionRequestAttachment::labels_size() const {
  return labels_.size();
}
inline void ResolutionRequestAttachment::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& ResolutionRequestAttachment::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Labels)
  return labels_.Get(index);
}
inline ::std::string* ResolutionRequestAttachment::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Labels)
  return labels_.Mutable(index);
}
inline void ResolutionRequestAttachment::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void ResolutionRequestAttachment::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Labels)
}
inline void ResolutionRequestAttachment::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Labels)
}
inline ::std::string* ResolutionRequestAttachment::add_labels() {
  return labels_.Add();
}
inline void ResolutionRequestAttachment::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Labels)
}
inline void ResolutionRequestAttachment::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Labels)
}
inline void ResolutionRequestAttachment::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolutionRequestAttachment::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolutionRequestAttachment::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ResolutionRequestAttachment.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// ResolutionRouteAssignment

// required string InitialDocumentId = 1;
inline bool ResolutionRouteAssignment::has_initialdocumentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionRouteAssignment::set_has_initialdocumentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionRouteAssignment::clear_has_initialdocumentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionRouteAssignment::clear_initialdocumentid() {
  if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_->clear();
  }
  clear_has_initialdocumentid();
}
inline const ::std::string& ResolutionRouteAssignment::initialdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.InitialDocumentId)
  return *initialdocumentid_;
}
inline void ResolutionRouteAssignment::set_initialdocumentid(const ::std::string& value) {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  initialdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.InitialDocumentId)
}
inline void ResolutionRouteAssignment::set_initialdocumentid(const char* value) {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  initialdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.InitialDocumentId)
}
inline void ResolutionRouteAssignment::set_initialdocumentid(const char* value, size_t size) {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  initialdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.InitialDocumentId)
}
inline ::std::string* ResolutionRouteAssignment::mutable_initialdocumentid() {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.InitialDocumentId)
  return initialdocumentid_;
}
inline ::std::string* ResolutionRouteAssignment::release_initialdocumentid() {
  clear_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = initialdocumentid_;
    initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRouteAssignment::set_allocated_initialdocumentid(::std::string* initialdocumentid) {
  if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialdocumentid_;
  }
  if (initialdocumentid) {
    set_has_initialdocumentid();
    initialdocumentid_ = initialdocumentid;
  } else {
    clear_has_initialdocumentid();
    initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.InitialDocumentId)
}

// required string RouteId = 2;
inline bool ResolutionRouteAssignment::has_routeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionRouteAssignment::set_has_routeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionRouteAssignment::clear_has_routeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionRouteAssignment::clear_routeid() {
  if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_->clear();
  }
  clear_has_routeid();
}
inline const ::std::string& ResolutionRouteAssignment::routeid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.RouteId)
  return *routeid_;
}
inline void ResolutionRouteAssignment::set_routeid(const ::std::string& value) {
  set_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_ = new ::std::string;
  }
  routeid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.RouteId)
}
inline void ResolutionRouteAssignment::set_routeid(const char* value) {
  set_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_ = new ::std::string;
  }
  routeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.RouteId)
}
inline void ResolutionRouteAssignment::set_routeid(const char* value, size_t size) {
  set_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_ = new ::std::string;
  }
  routeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.RouteId)
}
inline ::std::string* ResolutionRouteAssignment::mutable_routeid() {
  set_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.RouteId)
  return routeid_;
}
inline ::std::string* ResolutionRouteAssignment::release_routeid() {
  clear_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = routeid_;
    routeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRouteAssignment::set_allocated_routeid(::std::string* routeid) {
  if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete routeid_;
  }
  if (routeid) {
    set_has_routeid();
    routeid_ = routeid;
  } else {
    clear_has_routeid();
    routeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.RouteId)
}

// optional string Comment = 3;
inline bool ResolutionRouteAssignment::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolutionRouteAssignment::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolutionRouteAssignment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolutionRouteAssignment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ResolutionRouteAssignment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Comment)
  return *comment_;
}
inline void ResolutionRouteAssignment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Comment)
}
inline void ResolutionRouteAssignment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Comment)
}
inline void ResolutionRouteAssignment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Comment)
}
inline ::std::string* ResolutionRouteAssignment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Comment)
  return comment_;
}
inline ::std::string* ResolutionRouteAssignment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRouteAssignment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Comment)
}

// repeated string Labels = 4;
inline int ResolutionRouteAssignment::labels_size() const {
  return labels_.size();
}
inline void ResolutionRouteAssignment::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& ResolutionRouteAssignment::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Labels)
  return labels_.Get(index);
}
inline ::std::string* ResolutionRouteAssignment::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Labels)
  return labels_.Mutable(index);
}
inline void ResolutionRouteAssignment::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void ResolutionRouteAssignment::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Labels)
}
inline void ResolutionRouteAssignment::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Labels)
}
inline ::std::string* ResolutionRouteAssignment::add_labels() {
  return labels_.Add();
}
inline void ResolutionRouteAssignment::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Labels)
}
inline void ResolutionRouteAssignment::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Labels)
}
inline void ResolutionRouteAssignment::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolutionRouteAssignment::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolutionRouteAssignment::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ResolutionRouteAssignment.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// ResolutionRequestCancellationAttachment

// required string InitialResolutionRequestId = 1;
inline bool ResolutionRequestCancellationAttachment::has_initialresolutionrequestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionRequestCancellationAttachment::set_has_initialresolutionrequestid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionRequestCancellationAttachment::clear_has_initialresolutionrequestid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionRequestCancellationAttachment::clear_initialresolutionrequestid() {
  if (initialresolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestid_->clear();
  }
  clear_has_initialresolutionrequestid();
}
inline const ::std::string& ResolutionRequestCancellationAttachment::initialresolutionrequestid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.InitialResolutionRequestId)
  return *initialresolutionrequestid_;
}
inline void ResolutionRequestCancellationAttachment::set_initialresolutionrequestid(const ::std::string& value) {
  set_has_initialresolutionrequestid();
  if (initialresolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestid_ = new ::std::string;
  }
  initialresolutionrequestid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.InitialResolutionRequestId)
}
inline void ResolutionRequestCancellationAttachment::set_initialresolutionrequestid(const char* value) {
  set_has_initialresolutionrequestid();
  if (initialresolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestid_ = new ::std::string;
  }
  initialresolutionrequestid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.InitialResolutionRequestId)
}
inline void ResolutionRequestCancellationAttachment::set_initialresolutionrequestid(const char* value, size_t size) {
  set_has_initialresolutionrequestid();
  if (initialresolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestid_ = new ::std::string;
  }
  initialresolutionrequestid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.InitialResolutionRequestId)
}
inline ::std::string* ResolutionRequestCancellationAttachment::mutable_initialresolutionrequestid() {
  set_has_initialresolutionrequestid();
  if (initialresolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.InitialResolutionRequestId)
  return initialresolutionrequestid_;
}
inline ::std::string* ResolutionRequestCancellationAttachment::release_initialresolutionrequestid() {
  clear_has_initialresolutionrequestid();
  if (initialresolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = initialresolutionrequestid_;
    initialresolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRequestCancellationAttachment::set_allocated_initialresolutionrequestid(::std::string* initialresolutionrequestid) {
  if (initialresolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialresolutionrequestid_;
  }
  if (initialresolutionrequestid) {
    set_has_initialresolutionrequestid();
    initialresolutionrequestid_ = initialresolutionrequestid;
  } else {
    clear_has_initialresolutionrequestid();
    initialresolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.InitialResolutionRequestId)
}

// optional string Comment = 2;
inline bool ResolutionRequestCancellationAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionRequestCancellationAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionRequestCancellationAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionRequestCancellationAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ResolutionRequestCancellationAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Comment)
  return *comment_;
}
inline void ResolutionRequestCancellationAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Comment)
}
inline void ResolutionRequestCancellationAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Comment)
}
inline void ResolutionRequestCancellationAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Comment)
}
inline ::std::string* ResolutionRequestCancellationAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Comment)
  return comment_;
}
inline ::std::string* ResolutionRequestCancellationAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRequestCancellationAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Comment)
}

// repeated string Labels = 3;
inline int ResolutionRequestCancellationAttachment::labels_size() const {
  return labels_.size();
}
inline void ResolutionRequestCancellationAttachment::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& ResolutionRequestCancellationAttachment::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Labels)
  return labels_.Get(index);
}
inline ::std::string* ResolutionRequestCancellationAttachment::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Labels)
  return labels_.Mutable(index);
}
inline void ResolutionRequestCancellationAttachment::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void ResolutionRequestCancellationAttachment::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Labels)
}
inline void ResolutionRequestCancellationAttachment::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Labels)
}
inline ::std::string* ResolutionRequestCancellationAttachment::add_labels() {
  return labels_.Add();
}
inline void ResolutionRequestCancellationAttachment::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Labels)
}
inline void ResolutionRequestCancellationAttachment::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Labels)
}
inline void ResolutionRequestCancellationAttachment::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolutionRequestCancellationAttachment::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolutionRequestCancellationAttachment::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// ResolutionRequestDenialCancellationAttachment

// required string InitialResolutionRequestDenialId = 1;
inline bool ResolutionRequestDenialCancellationAttachment::has_initialresolutionrequestdenialid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionRequestDenialCancellationAttachment::set_has_initialresolutionrequestdenialid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionRequestDenialCancellationAttachment::clear_has_initialresolutionrequestdenialid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionRequestDenialCancellationAttachment::clear_initialresolutionrequestdenialid() {
  if (initialresolutionrequestdenialid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestdenialid_->clear();
  }
  clear_has_initialresolutionrequestdenialid();
}
inline const ::std::string& ResolutionRequestDenialCancellationAttachment::initialresolutionrequestdenialid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment.InitialResolutionRequestDenialId)
  return *initialresolutionrequestdenialid_;
}
inline void ResolutionRequestDenialCancellationAttachment::set_initialresolutionrequestdenialid(const ::std::string& value) {
  set_has_initialresolutionrequestdenialid();
  if (initialresolutionrequestdenialid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestdenialid_ = new ::std::string;
  }
  initialresolutionrequestdenialid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment.InitialResolutionRequestDenialId)
}
inline void ResolutionRequestDenialCancellationAttachment::set_initialresolutionrequestdenialid(const char* value) {
  set_has_initialresolutionrequestdenialid();
  if (initialresolutionrequestdenialid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestdenialid_ = new ::std::string;
  }
  initialresolutionrequestdenialid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment.InitialResolutionRequestDenialId)
}
inline void ResolutionRequestDenialCancellationAttachment::set_initialresolutionrequestdenialid(const char* value, size_t size) {
  set_has_initialresolutionrequestdenialid();
  if (initialresolutionrequestdenialid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestdenialid_ = new ::std::string;
  }
  initialresolutionrequestdenialid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment.InitialResolutionRequestDenialId)
}
inline ::std::string* ResolutionRequestDenialCancellationAttachment::mutable_initialresolutionrequestdenialid() {
  set_has_initialresolutionrequestdenialid();
  if (initialresolutionrequestdenialid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestdenialid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment.InitialResolutionRequestDenialId)
  return initialresolutionrequestdenialid_;
}
inline ::std::string* ResolutionRequestDenialCancellationAttachment::release_initialresolutionrequestdenialid() {
  clear_has_initialresolutionrequestdenialid();
  if (initialresolutionrequestdenialid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = initialresolutionrequestdenialid_;
    initialresolutionrequestdenialid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRequestDenialCancellationAttachment::set_allocated_initialresolutionrequestdenialid(::std::string* initialresolutionrequestdenialid) {
  if (initialresolutionrequestdenialid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialresolutionrequestdenialid_;
  }
  if (initialresolutionrequestdenialid) {
    set_has_initialresolutionrequestdenialid();
    initialresolutionrequestdenialid_ = initialresolutionrequestdenialid;
  } else {
    clear_has_initialresolutionrequestdenialid();
    initialresolutionrequestdenialid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment.InitialResolutionRequestDenialId)
}

// -------------------------------------------------------------------

// ResolutionRequestDenialAttachment

// required string InitialResolutionRequestId = 1;
inline bool ResolutionRequestDenialAttachment::has_initialresolutionrequestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionRequestDenialAttachment::set_has_initialresolutionrequestid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionRequestDenialAttachment::clear_has_initialresolutionrequestid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionRequestDenialAttachment::clear_initialresolutionrequestid() {
  if (initialresolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestid_->clear();
  }
  clear_has_initialresolutionrequestid();
}
inline const ::std::string& ResolutionRequestDenialAttachment::initialresolutionrequestid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.InitialResolutionRequestId)
  return *initialresolutionrequestid_;
}
inline void ResolutionRequestDenialAttachment::set_initialresolutionrequestid(const ::std::string& value) {
  set_has_initialresolutionrequestid();
  if (initialresolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestid_ = new ::std::string;
  }
  initialresolutionrequestid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.InitialResolutionRequestId)
}
inline void ResolutionRequestDenialAttachment::set_initialresolutionrequestid(const char* value) {
  set_has_initialresolutionrequestid();
  if (initialresolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestid_ = new ::std::string;
  }
  initialresolutionrequestid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.InitialResolutionRequestId)
}
inline void ResolutionRequestDenialAttachment::set_initialresolutionrequestid(const char* value, size_t size) {
  set_has_initialresolutionrequestid();
  if (initialresolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestid_ = new ::std::string;
  }
  initialresolutionrequestid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.InitialResolutionRequestId)
}
inline ::std::string* ResolutionRequestDenialAttachment::mutable_initialresolutionrequestid() {
  set_has_initialresolutionrequestid();
  if (initialresolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialresolutionrequestid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.InitialResolutionRequestId)
  return initialresolutionrequestid_;
}
inline ::std::string* ResolutionRequestDenialAttachment::release_initialresolutionrequestid() {
  clear_has_initialresolutionrequestid();
  if (initialresolutionrequestid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = initialresolutionrequestid_;
    initialresolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRequestDenialAttachment::set_allocated_initialresolutionrequestid(::std::string* initialresolutionrequestid) {
  if (initialresolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialresolutionrequestid_;
  }
  if (initialresolutionrequestid) {
    set_has_initialresolutionrequestid();
    initialresolutionrequestid_ = initialresolutionrequestid;
  } else {
    clear_has_initialresolutionrequestid();
    initialresolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.InitialResolutionRequestId)
}

// optional string Comment = 2;
inline bool ResolutionRequestDenialAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionRequestDenialAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionRequestDenialAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionRequestDenialAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ResolutionRequestDenialAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Comment)
  return *comment_;
}
inline void ResolutionRequestDenialAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Comment)
}
inline void ResolutionRequestDenialAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Comment)
}
inline void ResolutionRequestDenialAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Comment)
}
inline ::std::string* ResolutionRequestDenialAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Comment)
  return comment_;
}
inline ::std::string* ResolutionRequestDenialAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRequestDenialAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Comment)
}

// repeated string Labels = 3;
inline int ResolutionRequestDenialAttachment::labels_size() const {
  return labels_.size();
}
inline void ResolutionRequestDenialAttachment::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& ResolutionRequestDenialAttachment::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Labels)
  return labels_.Get(index);
}
inline ::std::string* ResolutionRequestDenialAttachment::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Labels)
  return labels_.Mutable(index);
}
inline void ResolutionRequestDenialAttachment::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void ResolutionRequestDenialAttachment::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Labels)
}
inline void ResolutionRequestDenialAttachment::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Labels)
}
inline ::std::string* ResolutionRequestDenialAttachment::add_labels() {
  return labels_.Add();
}
inline void ResolutionRequestDenialAttachment::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Labels)
}
inline void ResolutionRequestDenialAttachment::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Labels)
}
inline void ResolutionRequestDenialAttachment::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolutionRequestDenialAttachment::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolutionRequestDenialAttachment::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// ResolutionAttachment

// required string InitialDocumentId = 1;
inline bool ResolutionAttachment::has_initialdocumentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionAttachment::set_has_initialdocumentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionAttachment::clear_has_initialdocumentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionAttachment::clear_initialdocumentid() {
  if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_->clear();
  }
  clear_has_initialdocumentid();
}
inline const ::std::string& ResolutionAttachment::initialdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionAttachment.InitialDocumentId)
  return *initialdocumentid_;
}
inline void ResolutionAttachment::set_initialdocumentid(const ::std::string& value) {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  initialdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionAttachment.InitialDocumentId)
}
inline void ResolutionAttachment::set_initialdocumentid(const char* value) {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  initialdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionAttachment.InitialDocumentId)
}
inline void ResolutionAttachment::set_initialdocumentid(const char* value, size_t size) {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  initialdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionAttachment.InitialDocumentId)
}
inline ::std::string* ResolutionAttachment::mutable_initialdocumentid() {
  set_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    initialdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionAttachment.InitialDocumentId)
  return initialdocumentid_;
}
inline ::std::string* ResolutionAttachment::release_initialdocumentid() {
  clear_has_initialdocumentid();
  if (initialdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = initialdocumentid_;
    initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionAttachment::set_allocated_initialdocumentid(::std::string* initialdocumentid) {
  if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialdocumentid_;
  }
  if (initialdocumentid) {
    set_has_initialdocumentid();
    initialdocumentid_ = initialdocumentid;
  } else {
    clear_has_initialdocumentid();
    initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionAttachment.InitialDocumentId)
}

// required .Diadoc.Api.Proto.Events.ResolutionType ResolutionType = 2;
inline bool ResolutionAttachment::has_resolutiontype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionAttachment::set_has_resolutiontype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionAttachment::clear_has_resolutiontype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionAttachment::clear_resolutiontype() {
  resolutiontype_ = -1;
  clear_has_resolutiontype();
}
inline ::Diadoc::Api::Proto::Events::ResolutionType ResolutionAttachment::resolutiontype() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionAttachment.ResolutionType)
  return static_cast< ::Diadoc::Api::Proto::Events::ResolutionType >(resolutiontype_);
}
inline void ResolutionAttachment::set_resolutiontype(::Diadoc::Api::Proto::Events::ResolutionType value) {
  assert(::Diadoc::Api::Proto::Events::ResolutionType_IsValid(value));
  set_has_resolutiontype();
  resolutiontype_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionAttachment.ResolutionType)
}

// optional string Comment = 3;
inline bool ResolutionAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolutionAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolutionAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolutionAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ResolutionAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionAttachment.Comment)
  return *comment_;
}
inline void ResolutionAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionAttachment.Comment)
}
inline void ResolutionAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionAttachment.Comment)
}
inline void ResolutionAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionAttachment.Comment)
}
inline ::std::string* ResolutionAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionAttachment.Comment)
  return comment_;
}
inline ::std::string* ResolutionAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionAttachment.Comment)
}

// repeated string Labels = 4;
inline int ResolutionAttachment::labels_size() const {
  return labels_.size();
}
inline void ResolutionAttachment::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& ResolutionAttachment::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionAttachment.Labels)
  return labels_.Get(index);
}
inline ::std::string* ResolutionAttachment::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionAttachment.Labels)
  return labels_.Mutable(index);
}
inline void ResolutionAttachment::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionAttachment.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void ResolutionAttachment::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionAttachment.Labels)
}
inline void ResolutionAttachment::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionAttachment.Labels)
}
inline ::std::string* ResolutionAttachment::add_labels() {
  return labels_.Add();
}
inline void ResolutionAttachment::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ResolutionAttachment.Labels)
}
inline void ResolutionAttachment::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.ResolutionAttachment.Labels)
}
inline void ResolutionAttachment::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.ResolutionAttachment.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolutionAttachment::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ResolutionAttachment.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolutionAttachment::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ResolutionAttachment.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// ReceiptAttachment

// required string ParentEntityId = 1;
inline bool ReceiptAttachment::has_parententityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReceiptAttachment::set_has_parententityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReceiptAttachment::clear_has_parententityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReceiptAttachment::clear_parententityid() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_->clear();
  }
  clear_has_parententityid();
}
inline const ::std::string& ReceiptAttachment::parententityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReceiptAttachment.ParentEntityId)
  return *parententityid_;
}
inline void ReceiptAttachment::set_parententityid(const ::std::string& value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ReceiptAttachment.ParentEntityId)
}
inline void ReceiptAttachment::set_parententityid(const char* value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ReceiptAttachment.ParentEntityId)
}
inline void ReceiptAttachment::set_parententityid(const char* value, size_t size) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ReceiptAttachment.ParentEntityId)
}
inline ::std::string* ReceiptAttachment::mutable_parententityid() {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ReceiptAttachment.ParentEntityId)
  return parententityid_;
}
inline ::std::string* ReceiptAttachment::release_parententityid() {
  clear_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parententityid_;
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReceiptAttachment::set_allocated_parententityid(::std::string* parententityid) {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (parententityid) {
    set_has_parententityid();
    parententityid_ = parententityid;
  } else {
    clear_has_parententityid();
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ReceiptAttachment.ParentEntityId)
}

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
inline bool ReceiptAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReceiptAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReceiptAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReceiptAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& ReceiptAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReceiptAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* ReceiptAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ReceiptAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* ReceiptAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void ReceiptAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ReceiptAttachment.SignedContent)
}

// repeated string Labels = 4;
inline int ReceiptAttachment::labels_size() const {
  return labels_.size();
}
inline void ReceiptAttachment::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& ReceiptAttachment::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ReceiptAttachment.Labels)
  return labels_.Get(index);
}
inline ::std::string* ReceiptAttachment::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ReceiptAttachment.Labels)
  return labels_.Mutable(index);
}
inline void ReceiptAttachment::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ReceiptAttachment.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void ReceiptAttachment::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ReceiptAttachment.Labels)
}
inline void ReceiptAttachment::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ReceiptAttachment.Labels)
}
inline ::std::string* ReceiptAttachment::add_labels() {
  return labels_.Add();
}
inline void ReceiptAttachment::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ReceiptAttachment.Labels)
}
inline void ReceiptAttachment::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.ReceiptAttachment.Labels)
}
inline void ReceiptAttachment::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.ReceiptAttachment.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReceiptAttachment::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ReceiptAttachment.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReceiptAttachment::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ReceiptAttachment.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// CorrectionRequestAttachment

// required string ParentEntityId = 1;
inline bool CorrectionRequestAttachment::has_parententityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CorrectionRequestAttachment::set_has_parententityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CorrectionRequestAttachment::clear_has_parententityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CorrectionRequestAttachment::clear_parententityid() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_->clear();
  }
  clear_has_parententityid();
}
inline const ::std::string& CorrectionRequestAttachment::parententityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.ParentEntityId)
  return *parententityid_;
}
inline void CorrectionRequestAttachment::set_parententityid(const ::std::string& value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.ParentEntityId)
}
inline void CorrectionRequestAttachment::set_parententityid(const char* value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.ParentEntityId)
}
inline void CorrectionRequestAttachment::set_parententityid(const char* value, size_t size) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.ParentEntityId)
}
inline ::std::string* CorrectionRequestAttachment::mutable_parententityid() {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.ParentEntityId)
  return parententityid_;
}
inline ::std::string* CorrectionRequestAttachment::release_parententityid() {
  clear_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parententityid_;
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CorrectionRequestAttachment::set_allocated_parententityid(::std::string* parententityid) {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (parententityid) {
    set_has_parententityid();
    parententityid_ = parententityid;
  } else {
    clear_has_parententityid();
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.ParentEntityId)
}

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
inline bool CorrectionRequestAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CorrectionRequestAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CorrectionRequestAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CorrectionRequestAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& CorrectionRequestAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* CorrectionRequestAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* CorrectionRequestAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void CorrectionRequestAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.SignedContent)
}

// repeated string Labels = 4;
inline int CorrectionRequestAttachment::labels_size() const {
  return labels_.size();
}
inline void CorrectionRequestAttachment::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& CorrectionRequestAttachment::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.Labels)
  return labels_.Get(index);
}
inline ::std::string* CorrectionRequestAttachment::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.Labels)
  return labels_.Mutable(index);
}
inline void CorrectionRequestAttachment::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void CorrectionRequestAttachment::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.Labels)
}
inline void CorrectionRequestAttachment::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.Labels)
}
inline ::std::string* CorrectionRequestAttachment::add_labels() {
  return labels_.Add();
}
inline void CorrectionRequestAttachment::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.Labels)
}
inline void CorrectionRequestAttachment::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.Labels)
}
inline void CorrectionRequestAttachment::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CorrectionRequestAttachment::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CorrectionRequestAttachment::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.CorrectionRequestAttachment.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// DocumentSignature

// required string ParentEntityId = 1;
inline bool DocumentSignature::has_parententityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentSignature::set_has_parententityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentSignature::clear_has_parententityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentSignature::clear_parententityid() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_->clear();
  }
  clear_has_parententityid();
}
inline const ::std::string& DocumentSignature::parententityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentSignature.ParentEntityId)
  return *parententityid_;
}
inline void DocumentSignature::set_parententityid(const ::std::string& value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentSignature.ParentEntityId)
}
inline void DocumentSignature::set_parententityid(const char* value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentSignature.ParentEntityId)
}
inline void DocumentSignature::set_parententityid(const char* value, size_t size) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentSignature.ParentEntityId)
}
inline ::std::string* DocumentSignature::mutable_parententityid() {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentSignature.ParentEntityId)
  return parententityid_;
}
inline ::std::string* DocumentSignature::release_parententityid() {
  clear_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parententityid_;
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentSignature::set_allocated_parententityid(::std::string* parententityid) {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (parententityid) {
    set_has_parententityid();
    parententityid_ = parententityid;
  } else {
    clear_has_parententityid();
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentSignature.ParentEntityId)
}

// optional bytes Signature = 2;
inline bool DocumentSignature::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentSignature::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentSignature::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentSignature::clear_signature() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& DocumentSignature::signature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentSignature.Signature)
  return *signature_;
}
inline void DocumentSignature::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentSignature.Signature)
}
inline void DocumentSignature::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentSignature.Signature)
}
inline void DocumentSignature::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentSignature.Signature)
}
inline ::std::string* DocumentSignature::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentSignature.Signature)
  return signature_;
}
inline ::std::string* DocumentSignature::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentSignature::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentSignature.Signature)
}

// optional bool SignWithTestSignature = 4 [default = false];
inline bool DocumentSignature::has_signwithtestsignature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentSignature::set_has_signwithtestsignature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentSignature::clear_has_signwithtestsignature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentSignature::clear_signwithtestsignature() {
  signwithtestsignature_ = false;
  clear_has_signwithtestsignature();
}
inline bool DocumentSignature::signwithtestsignature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentSignature.SignWithTestSignature)
  return signwithtestsignature_;
}
inline void DocumentSignature::set_signwithtestsignature(bool value) {
  set_has_signwithtestsignature();
  signwithtestsignature_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentSignature.SignWithTestSignature)
}

// optional bool IsApprovementSignature = 5 [default = false];
inline bool DocumentSignature::has_isapprovementsignature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentSignature::set_has_isapprovementsignature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentSignature::clear_has_isapprovementsignature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentSignature::clear_isapprovementsignature() {
  isapprovementsignature_ = false;
  clear_has_isapprovementsignature();
}
inline bool DocumentSignature::isapprovementsignature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentSignature.IsApprovementSignature)
  return isapprovementsignature_;
}
inline void DocumentSignature::set_isapprovementsignature(bool value) {
  set_has_isapprovementsignature();
  isapprovementsignature_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentSignature.IsApprovementSignature)
}

// optional string SignatureNameOnShelf = 6;
inline bool DocumentSignature::has_signaturenameonshelf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentSignature::set_has_signaturenameonshelf() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentSignature::clear_has_signaturenameonshelf() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentSignature::clear_signaturenameonshelf() {
  if (signaturenameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signaturenameonshelf_->clear();
  }
  clear_has_signaturenameonshelf();
}
inline const ::std::string& DocumentSignature::signaturenameonshelf() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentSignature.SignatureNameOnShelf)
  return *signaturenameonshelf_;
}
inline void DocumentSignature::set_signaturenameonshelf(const ::std::string& value) {
  set_has_signaturenameonshelf();
  if (signaturenameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signaturenameonshelf_ = new ::std::string;
  }
  signaturenameonshelf_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentSignature.SignatureNameOnShelf)
}
inline void DocumentSignature::set_signaturenameonshelf(const char* value) {
  set_has_signaturenameonshelf();
  if (signaturenameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signaturenameonshelf_ = new ::std::string;
  }
  signaturenameonshelf_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentSignature.SignatureNameOnShelf)
}
inline void DocumentSignature::set_signaturenameonshelf(const char* value, size_t size) {
  set_has_signaturenameonshelf();
  if (signaturenameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signaturenameonshelf_ = new ::std::string;
  }
  signaturenameonshelf_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentSignature.SignatureNameOnShelf)
}
inline ::std::string* DocumentSignature::mutable_signaturenameonshelf() {
  set_has_signaturenameonshelf();
  if (signaturenameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signaturenameonshelf_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentSignature.SignatureNameOnShelf)
  return signaturenameonshelf_;
}
inline ::std::string* DocumentSignature::release_signaturenameonshelf() {
  clear_has_signaturenameonshelf();
  if (signaturenameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signaturenameonshelf_;
    signaturenameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentSignature::set_allocated_signaturenameonshelf(::std::string* signaturenameonshelf) {
  if (signaturenameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signaturenameonshelf_;
  }
  if (signaturenameonshelf) {
    set_has_signaturenameonshelf();
    signaturenameonshelf_ = signaturenameonshelf;
  } else {
    clear_has_signaturenameonshelf();
    signaturenameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentSignature.SignatureNameOnShelf)
}

// optional string PatchedContentId = 7;
inline bool DocumentSignature::has_patchedcontentid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocumentSignature::set_has_patchedcontentid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocumentSignature::clear_has_patchedcontentid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocumentSignature::clear_patchedcontentid() {
  if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_->clear();
  }
  clear_has_patchedcontentid();
}
inline const ::std::string& DocumentSignature::patchedcontentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentSignature.PatchedContentId)
  return *patchedcontentid_;
}
inline void DocumentSignature::set_patchedcontentid(const ::std::string& value) {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_ = new ::std::string;
  }
  patchedcontentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentSignature.PatchedContentId)
}
inline void DocumentSignature::set_patchedcontentid(const char* value) {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_ = new ::std::string;
  }
  patchedcontentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentSignature.PatchedContentId)
}
inline void DocumentSignature::set_patchedcontentid(const char* value, size_t size) {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_ = new ::std::string;
  }
  patchedcontentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentSignature.PatchedContentId)
}
inline ::std::string* DocumentSignature::mutable_patchedcontentid() {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentSignature.PatchedContentId)
  return patchedcontentid_;
}
inline ::std::string* DocumentSignature::release_patchedcontentid() {
  clear_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = patchedcontentid_;
    patchedcontentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentSignature::set_allocated_patchedcontentid(::std::string* patchedcontentid) {
  if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patchedcontentid_;
  }
  if (patchedcontentid) {
    set_has_patchedcontentid();
    patchedcontentid_ = patchedcontentid;
  } else {
    clear_has_patchedcontentid();
    patchedcontentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentSignature.PatchedContentId)
}

// repeated string Labels = 8;
inline int DocumentSignature::labels_size() const {
  return labels_.size();
}
inline void DocumentSignature::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& DocumentSignature::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentSignature.Labels)
  return labels_.Get(index);
}
inline ::std::string* DocumentSignature::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentSignature.Labels)
  return labels_.Mutable(index);
}
inline void DocumentSignature::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentSignature.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void DocumentSignature::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentSignature.Labels)
}
inline void DocumentSignature::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentSignature.Labels)
}
inline ::std::string* DocumentSignature::add_labels() {
  return labels_.Add();
}
inline void DocumentSignature::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.DocumentSignature.Labels)
}
inline void DocumentSignature::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.DocumentSignature.Labels)
}
inline void DocumentSignature::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.DocumentSignature.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DocumentSignature::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.DocumentSignature.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DocumentSignature::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.DocumentSignature.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// DocumentSenderSignature

// required string ParentEntityId = 1;
inline bool DocumentSenderSignature::has_parententityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentSenderSignature::set_has_parententityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentSenderSignature::clear_has_parententityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentSenderSignature::clear_parententityid() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_->clear();
  }
  clear_has_parententityid();
}
inline const ::std::string& DocumentSenderSignature::parententityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentSenderSignature.ParentEntityId)
  return *parententityid_;
}
inline void DocumentSenderSignature::set_parententityid(const ::std::string& value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentSenderSignature.ParentEntityId)
}
inline void DocumentSenderSignature::set_parententityid(const char* value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentSenderSignature.ParentEntityId)
}
inline void DocumentSenderSignature::set_parententityid(const char* value, size_t size) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentSenderSignature.ParentEntityId)
}
inline ::std::string* DocumentSenderSignature::mutable_parententityid() {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentSenderSignature.ParentEntityId)
  return parententityid_;
}
inline ::std::string* DocumentSenderSignature::release_parententityid() {
  clear_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parententityid_;
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentSenderSignature::set_allocated_parententityid(::std::string* parententityid) {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (parententityid) {
    set_has_parententityid();
    parententityid_ = parententityid;
  } else {
    clear_has_parententityid();
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentSenderSignature.ParentEntityId)
}

// optional bytes Signature = 2;
inline bool DocumentSenderSignature::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentSenderSignature::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentSenderSignature::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentSenderSignature::clear_signature() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& DocumentSenderSignature::signature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentSenderSignature.Signature)
  return *signature_;
}
inline void DocumentSenderSignature::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentSenderSignature.Signature)
}
inline void DocumentSenderSignature::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentSenderSignature.Signature)
}
inline void DocumentSenderSignature::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentSenderSignature.Signature)
}
inline ::std::string* DocumentSenderSignature::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentSenderSignature.Signature)
  return signature_;
}
inline ::std::string* DocumentSenderSignature::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentSenderSignature::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentSenderSignature.Signature)
}

// optional bool SignWithTestSignature = 4 [default = false];
inline bool DocumentSenderSignature::has_signwithtestsignature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentSenderSignature::set_has_signwithtestsignature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentSenderSignature::clear_has_signwithtestsignature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentSenderSignature::clear_signwithtestsignature() {
  signwithtestsignature_ = false;
  clear_has_signwithtestsignature();
}
inline bool DocumentSenderSignature::signwithtestsignature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentSenderSignature.SignWithTestSignature)
  return signwithtestsignature_;
}
inline void DocumentSenderSignature::set_signwithtestsignature(bool value) {
  set_has_signwithtestsignature();
  signwithtestsignature_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentSenderSignature.SignWithTestSignature)
}

// optional string PatchedContentId = 5;
inline bool DocumentSenderSignature::has_patchedcontentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentSenderSignature::set_has_patchedcontentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentSenderSignature::clear_has_patchedcontentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentSenderSignature::clear_patchedcontentid() {
  if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_->clear();
  }
  clear_has_patchedcontentid();
}
inline const ::std::string& DocumentSenderSignature::patchedcontentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentSenderSignature.PatchedContentId)
  return *patchedcontentid_;
}
inline void DocumentSenderSignature::set_patchedcontentid(const ::std::string& value) {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_ = new ::std::string;
  }
  patchedcontentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentSenderSignature.PatchedContentId)
}
inline void DocumentSenderSignature::set_patchedcontentid(const char* value) {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_ = new ::std::string;
  }
  patchedcontentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentSenderSignature.PatchedContentId)
}
inline void DocumentSenderSignature::set_patchedcontentid(const char* value, size_t size) {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_ = new ::std::string;
  }
  patchedcontentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentSenderSignature.PatchedContentId)
}
inline ::std::string* DocumentSenderSignature::mutable_patchedcontentid() {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentSenderSignature.PatchedContentId)
  return patchedcontentid_;
}
inline ::std::string* DocumentSenderSignature::release_patchedcontentid() {
  clear_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = patchedcontentid_;
    patchedcontentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentSenderSignature::set_allocated_patchedcontentid(::std::string* patchedcontentid) {
  if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patchedcontentid_;
  }
  if (patchedcontentid) {
    set_has_patchedcontentid();
    patchedcontentid_ = patchedcontentid;
  } else {
    clear_has_patchedcontentid();
    patchedcontentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentSenderSignature.PatchedContentId)
}

// -------------------------------------------------------------------

// RequestedSignatureRejection

// required string ParentEntityId = 1;
inline bool RequestedSignatureRejection::has_parententityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestedSignatureRejection::set_has_parententityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestedSignatureRejection::clear_has_parententityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestedSignatureRejection::clear_parententityid() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_->clear();
  }
  clear_has_parententityid();
}
inline const ::std::string& RequestedSignatureRejection::parententityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.RequestedSignatureRejection.ParentEntityId)
  return *parententityid_;
}
inline void RequestedSignatureRejection::set_parententityid(const ::std::string& value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.RequestedSignatureRejection.ParentEntityId)
}
inline void RequestedSignatureRejection::set_parententityid(const char* value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.RequestedSignatureRejection.ParentEntityId)
}
inline void RequestedSignatureRejection::set_parententityid(const char* value, size_t size) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.RequestedSignatureRejection.ParentEntityId)
}
inline ::std::string* RequestedSignatureRejection::mutable_parententityid() {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.RequestedSignatureRejection.ParentEntityId)
  return parententityid_;
}
inline ::std::string* RequestedSignatureRejection::release_parententityid() {
  clear_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parententityid_;
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestedSignatureRejection::set_allocated_parententityid(::std::string* parententityid) {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (parententityid) {
    set_has_parententityid();
    parententityid_ = parententityid;
  } else {
    clear_has_parententityid();
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.RequestedSignatureRejection.ParentEntityId)
}

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
inline bool RequestedSignatureRejection::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestedSignatureRejection::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestedSignatureRejection::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestedSignatureRejection::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& RequestedSignatureRejection::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.RequestedSignatureRejection.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* RequestedSignatureRejection::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.RequestedSignatureRejection.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* RequestedSignatureRejection::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void RequestedSignatureRejection::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.RequestedSignatureRejection.SignedContent)
}

// repeated string Labels = 3;
inline int RequestedSignatureRejection::labels_size() const {
  return labels_.size();
}
inline void RequestedSignatureRejection::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& RequestedSignatureRejection::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.RequestedSignatureRejection.Labels)
  return labels_.Get(index);
}
inline ::std::string* RequestedSignatureRejection::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.RequestedSignatureRejection.Labels)
  return labels_.Mutable(index);
}
inline void RequestedSignatureRejection::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.RequestedSignatureRejection.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void RequestedSignatureRejection::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.RequestedSignatureRejection.Labels)
}
inline void RequestedSignatureRejection::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.RequestedSignatureRejection.Labels)
}
inline ::std::string* RequestedSignatureRejection::add_labels() {
  return labels_.Add();
}
inline void RequestedSignatureRejection::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.RequestedSignatureRejection.Labels)
}
inline void RequestedSignatureRejection::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.RequestedSignatureRejection.Labels)
}
inline void RequestedSignatureRejection::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.RequestedSignatureRejection.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequestedSignatureRejection::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.RequestedSignatureRejection.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RequestedSignatureRejection::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.RequestedSignatureRejection.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// SignedContent

// optional bytes Content = 1;
inline bool SignedContent::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignedContent::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignedContent::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignedContent::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SignedContent::content() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SignedContent.Content)
  return *content_;
}
inline void SignedContent::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SignedContent.Content)
}
inline void SignedContent::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SignedContent.Content)
}
inline void SignedContent::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SignedContent.Content)
}
inline ::std::string* SignedContent::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SignedContent.Content)
  return content_;
}
inline ::std::string* SignedContent::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignedContent::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SignedContent.Content)
}

// optional bytes Signature = 2;
inline bool SignedContent::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignedContent::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignedContent::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignedContent::clear_signature() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& SignedContent::signature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SignedContent.Signature)
  return *signature_;
}
inline void SignedContent::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SignedContent.Signature)
}
inline void SignedContent::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SignedContent.Signature)
}
inline void SignedContent::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SignedContent.Signature)
}
inline ::std::string* SignedContent::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SignedContent.Signature)
  return signature_;
}
inline ::std::string* SignedContent::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignedContent::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SignedContent.Signature)
}

// optional string NameOnShelf = 4;
inline bool SignedContent::has_nameonshelf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignedContent::set_has_nameonshelf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignedContent::clear_has_nameonshelf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignedContent::clear_nameonshelf() {
  if (nameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nameonshelf_->clear();
  }
  clear_has_nameonshelf();
}
inline const ::std::string& SignedContent::nameonshelf() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SignedContent.NameOnShelf)
  return *nameonshelf_;
}
inline void SignedContent::set_nameonshelf(const ::std::string& value) {
  set_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nameonshelf_ = new ::std::string;
  }
  nameonshelf_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SignedContent.NameOnShelf)
}
inline void SignedContent::set_nameonshelf(const char* value) {
  set_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nameonshelf_ = new ::std::string;
  }
  nameonshelf_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SignedContent.NameOnShelf)
}
inline void SignedContent::set_nameonshelf(const char* value, size_t size) {
  set_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nameonshelf_ = new ::std::string;
  }
  nameonshelf_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SignedContent.NameOnShelf)
}
inline ::std::string* SignedContent::mutable_nameonshelf() {
  set_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nameonshelf_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SignedContent.NameOnShelf)
  return nameonshelf_;
}
inline ::std::string* SignedContent::release_nameonshelf() {
  clear_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nameonshelf_;
    nameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignedContent::set_allocated_nameonshelf(::std::string* nameonshelf) {
  if (nameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nameonshelf_;
  }
  if (nameonshelf) {
    set_has_nameonshelf();
    nameonshelf_ = nameonshelf;
  } else {
    clear_has_nameonshelf();
    nameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SignedContent.NameOnShelf)
}

// optional bool SignWithTestSignature = 5 [default = false];
inline bool SignedContent::has_signwithtestsignature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignedContent::set_has_signwithtestsignature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignedContent::clear_has_signwithtestsignature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignedContent::clear_signwithtestsignature() {
  signwithtestsignature_ = false;
  clear_has_signwithtestsignature();
}
inline bool SignedContent::signwithtestsignature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SignedContent.SignWithTestSignature)
  return signwithtestsignature_;
}
inline void SignedContent::set_signwithtestsignature(bool value) {
  set_has_signwithtestsignature();
  signwithtestsignature_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SignedContent.SignWithTestSignature)
}

// optional string SignatureNameOnShelf = 6;
inline bool SignedContent::has_signaturenameonshelf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignedContent::set_has_signaturenameonshelf() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignedContent::clear_has_signaturenameonshelf() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignedContent::clear_signaturenameonshelf() {
  if (signaturenameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signaturenameonshelf_->clear();
  }
  clear_has_signaturenameonshelf();
}
inline const ::std::string& SignedContent::signaturenameonshelf() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.SignedContent.SignatureNameOnShelf)
  return *signaturenameonshelf_;
}
inline void SignedContent::set_signaturenameonshelf(const ::std::string& value) {
  set_has_signaturenameonshelf();
  if (signaturenameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signaturenameonshelf_ = new ::std::string;
  }
  signaturenameonshelf_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.SignedContent.SignatureNameOnShelf)
}
inline void SignedContent::set_signaturenameonshelf(const char* value) {
  set_has_signaturenameonshelf();
  if (signaturenameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signaturenameonshelf_ = new ::std::string;
  }
  signaturenameonshelf_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.SignedContent.SignatureNameOnShelf)
}
inline void SignedContent::set_signaturenameonshelf(const char* value, size_t size) {
  set_has_signaturenameonshelf();
  if (signaturenameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signaturenameonshelf_ = new ::std::string;
  }
  signaturenameonshelf_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.SignedContent.SignatureNameOnShelf)
}
inline ::std::string* SignedContent::mutable_signaturenameonshelf() {
  set_has_signaturenameonshelf();
  if (signaturenameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signaturenameonshelf_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.SignedContent.SignatureNameOnShelf)
  return signaturenameonshelf_;
}
inline ::std::string* SignedContent::release_signaturenameonshelf() {
  clear_has_signaturenameonshelf();
  if (signaturenameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signaturenameonshelf_;
    signaturenameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignedContent::set_allocated_signaturenameonshelf(::std::string* signaturenameonshelf) {
  if (signaturenameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signaturenameonshelf_;
  }
  if (signaturenameonshelf) {
    set_has_signaturenameonshelf();
    signaturenameonshelf_ = signaturenameonshelf;
  } else {
    clear_has_signaturenameonshelf();
    signaturenameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.SignedContent.SignatureNameOnShelf)
}

// -------------------------------------------------------------------

// DraftToSend

// required string BoxId = 1;
inline bool DraftToSend::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DraftToSend::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DraftToSend::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DraftToSend::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& DraftToSend::boxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DraftToSend.BoxId)
  return *boxid_;
}
inline void DraftToSend::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DraftToSend.BoxId)
}
inline void DraftToSend::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DraftToSend.BoxId)
}
inline void DraftToSend::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DraftToSend.BoxId)
}
inline ::std::string* DraftToSend::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DraftToSend.BoxId)
  return boxid_;
}
inline ::std::string* DraftToSend::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DraftToSend::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DraftToSend.BoxId)
}

// required string DraftId = 2;
inline bool DraftToSend::has_draftid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DraftToSend::set_has_draftid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DraftToSend::clear_has_draftid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DraftToSend::clear_draftid() {
  if (draftid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    draftid_->clear();
  }
  clear_has_draftid();
}
inline const ::std::string& DraftToSend::draftid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DraftToSend.DraftId)
  return *draftid_;
}
inline void DraftToSend::set_draftid(const ::std::string& value) {
  set_has_draftid();
  if (draftid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    draftid_ = new ::std::string;
  }
  draftid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DraftToSend.DraftId)
}
inline void DraftToSend::set_draftid(const char* value) {
  set_has_draftid();
  if (draftid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    draftid_ = new ::std::string;
  }
  draftid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DraftToSend.DraftId)
}
inline void DraftToSend::set_draftid(const char* value, size_t size) {
  set_has_draftid();
  if (draftid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    draftid_ = new ::std::string;
  }
  draftid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DraftToSend.DraftId)
}
inline ::std::string* DraftToSend::mutable_draftid() {
  set_has_draftid();
  if (draftid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    draftid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DraftToSend.DraftId)
  return draftid_;
}
inline ::std::string* DraftToSend::release_draftid() {
  clear_has_draftid();
  if (draftid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = draftid_;
    draftid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DraftToSend::set_allocated_draftid(::std::string* draftid) {
  if (draftid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete draftid_;
  }
  if (draftid) {
    set_has_draftid();
    draftid_ = draftid;
  } else {
    clear_has_draftid();
    draftid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DraftToSend.DraftId)
}

// optional string ToBoxId = 3;
inline bool DraftToSend::has_toboxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DraftToSend::set_has_toboxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DraftToSend::clear_has_toboxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DraftToSend::clear_toboxid() {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_->clear();
  }
  clear_has_toboxid();
}
inline const ::std::string& DraftToSend::toboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DraftToSend.ToBoxId)
  return *toboxid_;
}
inline void DraftToSend::set_toboxid(const ::std::string& value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DraftToSend.ToBoxId)
}
inline void DraftToSend::set_toboxid(const char* value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DraftToSend.ToBoxId)
}
inline void DraftToSend::set_toboxid(const char* value, size_t size) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DraftToSend.ToBoxId)
}
inline ::std::string* DraftToSend::mutable_toboxid() {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DraftToSend.ToBoxId)
  return toboxid_;
}
inline ::std::string* DraftToSend::release_toboxid() {
  clear_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = toboxid_;
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DraftToSend::set_allocated_toboxid(::std::string* toboxid) {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toboxid_;
  }
  if (toboxid) {
    set_has_toboxid();
    toboxid_ = toboxid;
  } else {
    clear_has_toboxid();
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DraftToSend.ToBoxId)
}

// optional string ToDepartmentId = 4;
inline bool DraftToSend::has_todepartmentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DraftToSend::set_has_todepartmentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DraftToSend::clear_has_todepartmentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DraftToSend::clear_todepartmentid() {
  if (todepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_->clear();
  }
  clear_has_todepartmentid();
}
inline const ::std::string& DraftToSend::todepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DraftToSend.ToDepartmentId)
  return *todepartmentid_;
}
inline void DraftToSend::set_todepartmentid(const ::std::string& value) {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_ = new ::std::string;
  }
  todepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DraftToSend.ToDepartmentId)
}
inline void DraftToSend::set_todepartmentid(const char* value) {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_ = new ::std::string;
  }
  todepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DraftToSend.ToDepartmentId)
}
inline void DraftToSend::set_todepartmentid(const char* value, size_t size) {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_ = new ::std::string;
  }
  todepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DraftToSend.ToDepartmentId)
}
inline ::std::string* DraftToSend::mutable_todepartmentid() {
  set_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    todepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DraftToSend.ToDepartmentId)
  return todepartmentid_;
}
inline ::std::string* DraftToSend::release_todepartmentid() {
  clear_has_todepartmentid();
  if (todepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = todepartmentid_;
    todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DraftToSend::set_allocated_todepartmentid(::std::string* todepartmentid) {
  if (todepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete todepartmentid_;
  }
  if (todepartmentid) {
    set_has_todepartmentid();
    todepartmentid_ = todepartmentid;
  } else {
    clear_has_todepartmentid();
    todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DraftToSend.ToDepartmentId)
}

// repeated .Diadoc.Api.Proto.Events.DocumentSenderSignature DocumentSignatures = 5;
inline int DraftToSend::documentsignatures_size() const {
  return documentsignatures_.size();
}
inline void DraftToSend::clear_documentsignatures() {
  documentsignatures_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::DocumentSenderSignature& DraftToSend::documentsignatures(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DraftToSend.DocumentSignatures)
  return documentsignatures_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentSenderSignature* DraftToSend::mutable_documentsignatures(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DraftToSend.DocumentSignatures)
  return documentsignatures_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentSenderSignature* DraftToSend::add_documentsignatures() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.DraftToSend.DocumentSignatures)
  return documentsignatures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSenderSignature >&
DraftToSend::documentsignatures() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.DraftToSend.DocumentSignatures)
  return documentsignatures_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSenderSignature >*
DraftToSend::mutable_documentsignatures() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.DraftToSend.DocumentSignatures)
  return &documentsignatures_;
}

// optional string ProxyBoxId = 6;
inline bool DraftToSend::has_proxyboxid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DraftToSend::set_has_proxyboxid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DraftToSend::clear_has_proxyboxid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DraftToSend::clear_proxyboxid() {
  if (proxyboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyboxid_->clear();
  }
  clear_has_proxyboxid();
}
inline const ::std::string& DraftToSend::proxyboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DraftToSend.ProxyBoxId)
  return *proxyboxid_;
}
inline void DraftToSend::set_proxyboxid(const ::std::string& value) {
  set_has_proxyboxid();
  if (proxyboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyboxid_ = new ::std::string;
  }
  proxyboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DraftToSend.ProxyBoxId)
}
inline void DraftToSend::set_proxyboxid(const char* value) {
  set_has_proxyboxid();
  if (proxyboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyboxid_ = new ::std::string;
  }
  proxyboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DraftToSend.ProxyBoxId)
}
inline void DraftToSend::set_proxyboxid(const char* value, size_t size) {
  set_has_proxyboxid();
  if (proxyboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyboxid_ = new ::std::string;
  }
  proxyboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DraftToSend.ProxyBoxId)
}
inline ::std::string* DraftToSend::mutable_proxyboxid() {
  set_has_proxyboxid();
  if (proxyboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxyboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DraftToSend.ProxyBoxId)
  return proxyboxid_;
}
inline ::std::string* DraftToSend::release_proxyboxid() {
  clear_has_proxyboxid();
  if (proxyboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxyboxid_;
    proxyboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DraftToSend::set_allocated_proxyboxid(::std::string* proxyboxid) {
  if (proxyboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyboxid_;
  }
  if (proxyboxid) {
    set_has_proxyboxid();
    proxyboxid_ = proxyboxid;
  } else {
    clear_has_proxyboxid();
    proxyboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DraftToSend.ProxyBoxId)
}

// optional string ProxyDepartmentId = 7;
inline bool DraftToSend::has_proxydepartmentid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DraftToSend::set_has_proxydepartmentid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DraftToSend::clear_has_proxydepartmentid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DraftToSend::clear_proxydepartmentid() {
  if (proxydepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxydepartmentid_->clear();
  }
  clear_has_proxydepartmentid();
}
inline const ::std::string& DraftToSend::proxydepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DraftToSend.ProxyDepartmentId)
  return *proxydepartmentid_;
}
inline void DraftToSend::set_proxydepartmentid(const ::std::string& value) {
  set_has_proxydepartmentid();
  if (proxydepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxydepartmentid_ = new ::std::string;
  }
  proxydepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DraftToSend.ProxyDepartmentId)
}
inline void DraftToSend::set_proxydepartmentid(const char* value) {
  set_has_proxydepartmentid();
  if (proxydepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxydepartmentid_ = new ::std::string;
  }
  proxydepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DraftToSend.ProxyDepartmentId)
}
inline void DraftToSend::set_proxydepartmentid(const char* value, size_t size) {
  set_has_proxydepartmentid();
  if (proxydepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxydepartmentid_ = new ::std::string;
  }
  proxydepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DraftToSend.ProxyDepartmentId)
}
inline ::std::string* DraftToSend::mutable_proxydepartmentid() {
  set_has_proxydepartmentid();
  if (proxydepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    proxydepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DraftToSend.ProxyDepartmentId)
  return proxydepartmentid_;
}
inline ::std::string* DraftToSend::release_proxydepartmentid() {
  clear_has_proxydepartmentid();
  if (proxydepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = proxydepartmentid_;
    proxydepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DraftToSend::set_allocated_proxydepartmentid(::std::string* proxydepartmentid) {
  if (proxydepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxydepartmentid_;
  }
  if (proxydepartmentid) {
    set_has_proxydepartmentid();
    proxydepartmentid_ = proxydepartmentid;
  } else {
    clear_has_proxydepartmentid();
    proxydepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DraftToSend.ProxyDepartmentId)
}

// -------------------------------------------------------------------

// PrepareDocumentsToSignRequest

// required string BoxId = 1;
inline bool PrepareDocumentsToSignRequest::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrepareDocumentsToSignRequest::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrepareDocumentsToSignRequest::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrepareDocumentsToSignRequest::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& PrepareDocumentsToSignRequest::boxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.BoxId)
  return *boxid_;
}
inline void PrepareDocumentsToSignRequest::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.BoxId)
}
inline void PrepareDocumentsToSignRequest::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.BoxId)
}
inline void PrepareDocumentsToSignRequest::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.BoxId)
}
inline ::std::string* PrepareDocumentsToSignRequest::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.BoxId)
  return boxid_;
}
inline ::std::string* PrepareDocumentsToSignRequest::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PrepareDocumentsToSignRequest::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.BoxId)
}

// repeated .Diadoc.Api.Proto.Events.DraftDocumentToPatch DraftDocuments = 2;
inline int PrepareDocumentsToSignRequest::draftdocuments_size() const {
  return draftdocuments_.size();
}
inline void PrepareDocumentsToSignRequest::clear_draftdocuments() {
  draftdocuments_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::DraftDocumentToPatch& PrepareDocumentsToSignRequest::draftdocuments(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.DraftDocuments)
  return draftdocuments_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::DraftDocumentToPatch* PrepareDocumentsToSignRequest::mutable_draftdocuments(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.DraftDocuments)
  return draftdocuments_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::DraftDocumentToPatch* PrepareDocumentsToSignRequest::add_draftdocuments() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.DraftDocuments)
  return draftdocuments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DraftDocumentToPatch >&
PrepareDocumentsToSignRequest::draftdocuments() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.DraftDocuments)
  return draftdocuments_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DraftDocumentToPatch >*
PrepareDocumentsToSignRequest::mutable_draftdocuments() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.DraftDocuments)
  return &draftdocuments_;
}

// repeated .Diadoc.Api.Proto.Events.DocumentToPatch Documents = 3;
inline int PrepareDocumentsToSignRequest::documents_size() const {
  return documents_.size();
}
inline void PrepareDocumentsToSignRequest::clear_documents() {
  documents_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::DocumentToPatch& PrepareDocumentsToSignRequest::documents(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.Documents)
  return documents_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentToPatch* PrepareDocumentsToSignRequest::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.Documents)
  return documents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentToPatch* PrepareDocumentsToSignRequest::add_documents() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.Documents)
  return documents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentToPatch >&
PrepareDocumentsToSignRequest::documents() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.Documents)
  return documents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentToPatch >*
PrepareDocumentsToSignRequest::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.Documents)
  return &documents_;
}

// repeated .Diadoc.Api.Proto.Events.ContentToPatch Contents = 4;
inline int PrepareDocumentsToSignRequest::contents_size() const {
  return contents_.size();
}
inline void PrepareDocumentsToSignRequest::clear_contents() {
  contents_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::ContentToPatch& PrepareDocumentsToSignRequest::contents(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.Contents)
  return contents_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::ContentToPatch* PrepareDocumentsToSignRequest::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.Contents)
  return contents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::ContentToPatch* PrepareDocumentsToSignRequest::add_contents() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.Contents)
  return contents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ContentToPatch >&
PrepareDocumentsToSignRequest::contents() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.Contents)
  return contents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::ContentToPatch >*
PrepareDocumentsToSignRequest::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest.Contents)
  return &contents_;
}

// -------------------------------------------------------------------

// DraftDocumentToPatch

// required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
inline bool DraftDocumentToPatch::has_documentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DraftDocumentToPatch::set_has_documentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DraftDocumentToPatch::clear_has_documentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DraftDocumentToPatch::clear_documentid() {
  if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
  clear_has_documentid();
}
inline const ::Diadoc::Api::Proto::DocumentId& DraftDocumentToPatch::documentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DraftDocumentToPatch.DocumentId)
  return documentid_ != NULL ? *documentid_ : *default_instance_->documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* DraftDocumentToPatch::mutable_documentid() {
  set_has_documentid();
  if (documentid_ == NULL) documentid_ = new ::Diadoc::Api::Proto::DocumentId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DraftDocumentToPatch.DocumentId)
  return documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* DraftDocumentToPatch::release_documentid() {
  clear_has_documentid();
  ::Diadoc::Api::Proto::DocumentId* temp = documentid_;
  documentid_ = NULL;
  return temp;
}
inline void DraftDocumentToPatch::set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid) {
  delete documentid_;
  documentid_ = documentid;
  if (documentid) {
    set_has_documentid();
  } else {
    clear_has_documentid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DraftDocumentToPatch.DocumentId)
}

// optional string ToBoxId = 2;
inline bool DraftDocumentToPatch::has_toboxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DraftDocumentToPatch::set_has_toboxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DraftDocumentToPatch::clear_has_toboxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DraftDocumentToPatch::clear_toboxid() {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_->clear();
  }
  clear_has_toboxid();
}
inline const ::std::string& DraftDocumentToPatch::toboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DraftDocumentToPatch.ToBoxId)
  return *toboxid_;
}
inline void DraftDocumentToPatch::set_toboxid(const ::std::string& value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DraftDocumentToPatch.ToBoxId)
}
inline void DraftDocumentToPatch::set_toboxid(const char* value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DraftDocumentToPatch.ToBoxId)
}
inline void DraftDocumentToPatch::set_toboxid(const char* value, size_t size) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DraftDocumentToPatch.ToBoxId)
}
inline ::std::string* DraftDocumentToPatch::mutable_toboxid() {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DraftDocumentToPatch.ToBoxId)
  return toboxid_;
}
inline ::std::string* DraftDocumentToPatch::release_toboxid() {
  clear_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = toboxid_;
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DraftDocumentToPatch::set_allocated_toboxid(::std::string* toboxid) {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toboxid_;
  }
  if (toboxid) {
    set_has_toboxid();
    toboxid_ = toboxid;
  } else {
    clear_has_toboxid();
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DraftDocumentToPatch.ToBoxId)
}

// optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 3;
inline bool DraftDocumentToPatch::has_signer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DraftDocumentToPatch::set_has_signer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DraftDocumentToPatch::clear_has_signer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DraftDocumentToPatch::clear_signer() {
  if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
  clear_has_signer();
}
inline const ::Diadoc::Api::Proto::Invoicing::Signer& DraftDocumentToPatch::signer() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DraftDocumentToPatch.Signer)
  return signer_ != NULL ? *signer_ : *default_instance_->signer_;
}
inline ::Diadoc::Api::Proto::Invoicing::Signer* DraftDocumentToPatch::mutable_signer() {
  set_has_signer();
  if (signer_ == NULL) signer_ = new ::Diadoc::Api::Proto::Invoicing::Signer;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DraftDocumentToPatch.Signer)
  return signer_;
}
inline ::Diadoc::Api::Proto::Invoicing::Signer* DraftDocumentToPatch::release_signer() {
  clear_has_signer();
  ::Diadoc::Api::Proto::Invoicing::Signer* temp = signer_;
  signer_ = NULL;
  return temp;
}
inline void DraftDocumentToPatch::set_allocated_signer(::Diadoc::Api::Proto::Invoicing::Signer* signer) {
  delete signer_;
  signer_ = signer;
  if (signer) {
    set_has_signer();
  } else {
    clear_has_signer();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DraftDocumentToPatch.Signer)
}

// repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 4;
inline int DraftDocumentToPatch::extendedsigner_size() const {
  return extendedsigner_.size();
}
inline void DraftDocumentToPatch::clear_extendedsigner() {
  extendedsigner_.Clear();
}
inline const ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner& DraftDocumentToPatch::extendedsigner(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DraftDocumentToPatch.ExtendedSigner)
  return extendedsigner_.Get(index);
}
inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* DraftDocumentToPatch::mutable_extendedsigner(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DraftDocumentToPatch.ExtendedSigner)
  return extendedsigner_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* DraftDocumentToPatch::add_extendedsigner() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.DraftDocumentToPatch.ExtendedSigner)
  return extendedsigner_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >&
DraftDocumentToPatch::extendedsigner() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.DraftDocumentToPatch.ExtendedSigner)
  return extendedsigner_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >*
DraftDocumentToPatch::mutable_extendedsigner() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.DraftDocumentToPatch.ExtendedSigner)
  return &extendedsigner_;
}

// -------------------------------------------------------------------

// ContentToPatch

// required string TypeNamedId = 1;
inline bool ContentToPatch::has_typenamedid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentToPatch::set_has_typenamedid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentToPatch::clear_has_typenamedid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentToPatch::clear_typenamedid() {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_->clear();
  }
  clear_has_typenamedid();
}
inline const ::std::string& ContentToPatch::typenamedid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContentToPatch.TypeNamedId)
  return *typenamedid_;
}
inline void ContentToPatch::set_typenamedid(const ::std::string& value) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ContentToPatch.TypeNamedId)
}
inline void ContentToPatch::set_typenamedid(const char* value) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ContentToPatch.TypeNamedId)
}
inline void ContentToPatch::set_typenamedid(const char* value, size_t size) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ContentToPatch.TypeNamedId)
}
inline ::std::string* ContentToPatch::mutable_typenamedid() {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContentToPatch.TypeNamedId)
  return typenamedid_;
}
inline ::std::string* ContentToPatch::release_typenamedid() {
  clear_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = typenamedid_;
    typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContentToPatch::set_allocated_typenamedid(::std::string* typenamedid) {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typenamedid_;
  }
  if (typenamedid) {
    set_has_typenamedid();
    typenamedid_ = typenamedid;
  } else {
    clear_has_typenamedid();
    typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContentToPatch.TypeNamedId)
}

// required string Function = 2;
inline bool ContentToPatch::has_function() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentToPatch::set_has_function() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentToPatch::clear_has_function() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentToPatch::clear_function() {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_->clear();
  }
  clear_has_function();
}
inline const ::std::string& ContentToPatch::function() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContentToPatch.Function)
  return *function_;
}
inline void ContentToPatch::set_function(const ::std::string& value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ContentToPatch.Function)
}
inline void ContentToPatch::set_function(const char* value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ContentToPatch.Function)
}
inline void ContentToPatch::set_function(const char* value, size_t size) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ContentToPatch.Function)
}
inline ::std::string* ContentToPatch::mutable_function() {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContentToPatch.Function)
  return function_;
}
inline ::std::string* ContentToPatch::release_function() {
  clear_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = function_;
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContentToPatch::set_allocated_function(::std::string* function) {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (function) {
    set_has_function();
    function_ = function;
  } else {
    clear_has_function();
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContentToPatch.Function)
}

// required string Version = 3;
inline bool ContentToPatch::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentToPatch::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentToPatch::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentToPatch::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& ContentToPatch::version() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContentToPatch.Version)
  return *version_;
}
inline void ContentToPatch::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ContentToPatch.Version)
}
inline void ContentToPatch::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ContentToPatch.Version)
}
inline void ContentToPatch::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ContentToPatch.Version)
}
inline ::std::string* ContentToPatch::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContentToPatch.Version)
  return version_;
}
inline ::std::string* ContentToPatch::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContentToPatch::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContentToPatch.Version)
}

// required .Diadoc.Api.Proto.Events.UnsignedContent Content = 4;
inline bool ContentToPatch::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentToPatch::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContentToPatch::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContentToPatch::clear_content() {
  if (content_ != NULL) content_->::Diadoc::Api::Proto::Events::UnsignedContent::Clear();
  clear_has_content();
}
inline const ::Diadoc::Api::Proto::Events::UnsignedContent& ContentToPatch::content() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContentToPatch.Content)
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::Diadoc::Api::Proto::Events::UnsignedContent* ContentToPatch::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::Diadoc::Api::Proto::Events::UnsignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContentToPatch.Content)
  return content_;
}
inline ::Diadoc::Api::Proto::Events::UnsignedContent* ContentToPatch::release_content() {
  clear_has_content();
  ::Diadoc::Api::Proto::Events::UnsignedContent* temp = content_;
  content_ = NULL;
  return temp;
}
inline void ContentToPatch::set_allocated_content(::Diadoc::Api::Proto::Events::UnsignedContent* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContentToPatch.Content)
}

// optional string ToBoxId = 5;
inline bool ContentToPatch::has_toboxid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentToPatch::set_has_toboxid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContentToPatch::clear_has_toboxid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContentToPatch::clear_toboxid() {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_->clear();
  }
  clear_has_toboxid();
}
inline const ::std::string& ContentToPatch::toboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContentToPatch.ToBoxId)
  return *toboxid_;
}
inline void ContentToPatch::set_toboxid(const ::std::string& value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ContentToPatch.ToBoxId)
}
inline void ContentToPatch::set_toboxid(const char* value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ContentToPatch.ToBoxId)
}
inline void ContentToPatch::set_toboxid(const char* value, size_t size) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ContentToPatch.ToBoxId)
}
inline ::std::string* ContentToPatch::mutable_toboxid() {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContentToPatch.ToBoxId)
  return toboxid_;
}
inline ::std::string* ContentToPatch::release_toboxid() {
  clear_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = toboxid_;
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContentToPatch::set_allocated_toboxid(::std::string* toboxid) {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toboxid_;
  }
  if (toboxid) {
    set_has_toboxid();
    toboxid_ = toboxid;
  } else {
    clear_has_toboxid();
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContentToPatch.ToBoxId)
}

// optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 6;
inline bool ContentToPatch::has_signer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContentToPatch::set_has_signer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContentToPatch::clear_has_signer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContentToPatch::clear_signer() {
  if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
  clear_has_signer();
}
inline const ::Diadoc::Api::Proto::Invoicing::Signer& ContentToPatch::signer() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContentToPatch.Signer)
  return signer_ != NULL ? *signer_ : *default_instance_->signer_;
}
inline ::Diadoc::Api::Proto::Invoicing::Signer* ContentToPatch::mutable_signer() {
  set_has_signer();
  if (signer_ == NULL) signer_ = new ::Diadoc::Api::Proto::Invoicing::Signer;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContentToPatch.Signer)
  return signer_;
}
inline ::Diadoc::Api::Proto::Invoicing::Signer* ContentToPatch::release_signer() {
  clear_has_signer();
  ::Diadoc::Api::Proto::Invoicing::Signer* temp = signer_;
  signer_ = NULL;
  return temp;
}
inline void ContentToPatch::set_allocated_signer(::Diadoc::Api::Proto::Invoicing::Signer* signer) {
  delete signer_;
  signer_ = signer;
  if (signer) {
    set_has_signer();
  } else {
    clear_has_signer();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ContentToPatch.Signer)
}

// repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 7;
inline int ContentToPatch::extendedsigner_size() const {
  return extendedsigner_.size();
}
inline void ContentToPatch::clear_extendedsigner() {
  extendedsigner_.Clear();
}
inline const ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner& ContentToPatch::extendedsigner(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ContentToPatch.ExtendedSigner)
  return extendedsigner_.Get(index);
}
inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* ContentToPatch::mutable_extendedsigner(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ContentToPatch.ExtendedSigner)
  return extendedsigner_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* ContentToPatch::add_extendedsigner() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ContentToPatch.ExtendedSigner)
  return extendedsigner_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >&
ContentToPatch::extendedsigner() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ContentToPatch.ExtendedSigner)
  return extendedsigner_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >*
ContentToPatch::mutable_extendedsigner() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ContentToPatch.ExtendedSigner)
  return &extendedsigner_;
}

// -------------------------------------------------------------------

// DocumentToPatch

// required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
inline bool DocumentToPatch::has_documentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentToPatch::set_has_documentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentToPatch::clear_has_documentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentToPatch::clear_documentid() {
  if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
  clear_has_documentid();
}
inline const ::Diadoc::Api::Proto::DocumentId& DocumentToPatch::documentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentToPatch.DocumentId)
  return documentid_ != NULL ? *documentid_ : *default_instance_->documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentToPatch::mutable_documentid() {
  set_has_documentid();
  if (documentid_ == NULL) documentid_ = new ::Diadoc::Api::Proto::DocumentId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentToPatch.DocumentId)
  return documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentToPatch::release_documentid() {
  clear_has_documentid();
  ::Diadoc::Api::Proto::DocumentId* temp = documentid_;
  documentid_ = NULL;
  return temp;
}
inline void DocumentToPatch::set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid) {
  delete documentid_;
  documentid_ = documentid;
  if (documentid) {
    set_has_documentid();
  } else {
    clear_has_documentid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentToPatch.DocumentId)
}

// optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 2;
inline bool DocumentToPatch::has_signer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentToPatch::set_has_signer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentToPatch::clear_has_signer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentToPatch::clear_signer() {
  if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
  clear_has_signer();
}
inline const ::Diadoc::Api::Proto::Invoicing::Signer& DocumentToPatch::signer() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentToPatch.Signer)
  return signer_ != NULL ? *signer_ : *default_instance_->signer_;
}
inline ::Diadoc::Api::Proto::Invoicing::Signer* DocumentToPatch::mutable_signer() {
  set_has_signer();
  if (signer_ == NULL) signer_ = new ::Diadoc::Api::Proto::Invoicing::Signer;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentToPatch.Signer)
  return signer_;
}
inline ::Diadoc::Api::Proto::Invoicing::Signer* DocumentToPatch::release_signer() {
  clear_has_signer();
  ::Diadoc::Api::Proto::Invoicing::Signer* temp = signer_;
  signer_ = NULL;
  return temp;
}
inline void DocumentToPatch::set_allocated_signer(::Diadoc::Api::Proto::Invoicing::Signer* signer) {
  delete signer_;
  signer_ = signer;
  if (signer) {
    set_has_signer();
  } else {
    clear_has_signer();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentToPatch.Signer)
}

// repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 3;
inline int DocumentToPatch::extendedsigner_size() const {
  return extendedsigner_.size();
}
inline void DocumentToPatch::clear_extendedsigner() {
  extendedsigner_.Clear();
}
inline const ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner& DocumentToPatch::extendedsigner(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentToPatch.ExtendedSigner)
  return extendedsigner_.Get(index);
}
inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* DocumentToPatch::mutable_extendedsigner(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentToPatch.ExtendedSigner)
  return extendedsigner_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner* DocumentToPatch::add_extendedsigner() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.DocumentToPatch.ExtendedSigner)
  return extendedsigner_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >&
DocumentToPatch::extendedsigner() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.DocumentToPatch.ExtendedSigner)
  return extendedsigner_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Invoicing::Signers::ExtendedSigner >*
DocumentToPatch::mutable_extendedsigner() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.DocumentToPatch.ExtendedSigner)
  return &extendedsigner_;
}

// -------------------------------------------------------------------

// DocumentPatchedContent

// required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
inline bool DocumentPatchedContent::has_documentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentPatchedContent::set_has_documentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentPatchedContent::clear_has_documentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentPatchedContent::clear_documentid() {
  if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
  clear_has_documentid();
}
inline const ::Diadoc::Api::Proto::DocumentId& DocumentPatchedContent::documentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentPatchedContent.DocumentId)
  return documentid_ != NULL ? *documentid_ : *default_instance_->documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentPatchedContent::mutable_documentid() {
  set_has_documentid();
  if (documentid_ == NULL) documentid_ = new ::Diadoc::Api::Proto::DocumentId;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentPatchedContent.DocumentId)
  return documentid_;
}
inline ::Diadoc::Api::Proto::DocumentId* DocumentPatchedContent::release_documentid() {
  clear_has_documentid();
  ::Diadoc::Api::Proto::DocumentId* temp = documentid_;
  documentid_ = NULL;
  return temp;
}
inline void DocumentPatchedContent::set_allocated_documentid(::Diadoc::Api::Proto::DocumentId* documentid) {
  delete documentid_;
  documentid_ = documentid;
  if (documentid) {
    set_has_documentid();
  } else {
    clear_has_documentid();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentPatchedContent.DocumentId)
}

// required string PatchedContentId = 2;
inline bool DocumentPatchedContent::has_patchedcontentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentPatchedContent::set_has_patchedcontentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentPatchedContent::clear_has_patchedcontentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentPatchedContent::clear_patchedcontentid() {
  if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_->clear();
  }
  clear_has_patchedcontentid();
}
inline const ::std::string& DocumentPatchedContent::patchedcontentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentPatchedContent.PatchedContentId)
  return *patchedcontentid_;
}
inline void DocumentPatchedContent::set_patchedcontentid(const ::std::string& value) {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_ = new ::std::string;
  }
  patchedcontentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentPatchedContent.PatchedContentId)
}
inline void DocumentPatchedContent::set_patchedcontentid(const char* value) {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_ = new ::std::string;
  }
  patchedcontentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentPatchedContent.PatchedContentId)
}
inline void DocumentPatchedContent::set_patchedcontentid(const char* value, size_t size) {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_ = new ::std::string;
  }
  patchedcontentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentPatchedContent.PatchedContentId)
}
inline ::std::string* DocumentPatchedContent::mutable_patchedcontentid() {
  set_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    patchedcontentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentPatchedContent.PatchedContentId)
  return patchedcontentid_;
}
inline ::std::string* DocumentPatchedContent::release_patchedcontentid() {
  clear_has_patchedcontentid();
  if (patchedcontentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = patchedcontentid_;
    patchedcontentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentPatchedContent::set_allocated_patchedcontentid(::std::string* patchedcontentid) {
  if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patchedcontentid_;
  }
  if (patchedcontentid) {
    set_has_patchedcontentid();
    patchedcontentid_ = patchedcontentid;
  } else {
    clear_has_patchedcontentid();
    patchedcontentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentPatchedContent.PatchedContentId)
}

// optional bytes Content = 3;
inline bool DocumentPatchedContent::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentPatchedContent::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentPatchedContent::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentPatchedContent::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DocumentPatchedContent::content() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentPatchedContent.Content)
  return *content_;
}
inline void DocumentPatchedContent::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentPatchedContent.Content)
}
inline void DocumentPatchedContent::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentPatchedContent.Content)
}
inline void DocumentPatchedContent::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentPatchedContent.Content)
}
inline ::std::string* DocumentPatchedContent::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentPatchedContent.Content)
  return content_;
}
inline ::std::string* DocumentPatchedContent::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentPatchedContent::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentPatchedContent.Content)
}

// -------------------------------------------------------------------

// PrepareDocumentsToSignResponse

// repeated .Diadoc.Api.Proto.Events.DocumentPatchedContent DocumentPatchedContents = 1;
inline int PrepareDocumentsToSignResponse::documentpatchedcontents_size() const {
  return documentpatchedcontents_.size();
}
inline void PrepareDocumentsToSignResponse::clear_documentpatchedcontents() {
  documentpatchedcontents_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::DocumentPatchedContent& PrepareDocumentsToSignResponse::documentpatchedcontents(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse.DocumentPatchedContents)
  return documentpatchedcontents_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentPatchedContent* PrepareDocumentsToSignResponse::mutable_documentpatchedcontents(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse.DocumentPatchedContents)
  return documentpatchedcontents_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentPatchedContent* PrepareDocumentsToSignResponse::add_documentpatchedcontents() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse.DocumentPatchedContents)
  return documentpatchedcontents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentPatchedContent >&
PrepareDocumentsToSignResponse::documentpatchedcontents() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse.DocumentPatchedContents)
  return documentpatchedcontents_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentPatchedContent >*
PrepareDocumentsToSignResponse::mutable_documentpatchedcontents() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse.DocumentPatchedContents)
  return &documentpatchedcontents_;
}

// -------------------------------------------------------------------

// MessageToSend

// required string BoxId = 1;
inline bool MessageToSend::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageToSend::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageToSend::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageToSend::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& MessageToSend::boxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToSend.BoxId)
  return *boxid_;
}
inline void MessageToSend::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToSend.BoxId)
}
inline void MessageToSend::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.MessageToSend.BoxId)
}
inline void MessageToSend::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.MessageToSend.BoxId)
}
inline ::std::string* MessageToSend::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToSend.BoxId)
  return boxid_;
}
inline ::std::string* MessageToSend::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageToSend::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.MessageToSend.BoxId)
}

// required string MessageId = 2;
inline bool MessageToSend::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageToSend::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageToSend::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageToSend::clear_messageid() {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_->clear();
  }
  clear_has_messageid();
}
inline const ::std::string& MessageToSend::messageid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToSend.MessageId)
  return *messageid_;
}
inline void MessageToSend::set_messageid(const ::std::string& value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.MessageToSend.MessageId)
}
inline void MessageToSend::set_messageid(const char* value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.MessageToSend.MessageId)
}
inline void MessageToSend::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.MessageToSend.MessageId)
}
inline ::std::string* MessageToSend::mutable_messageid() {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToSend.MessageId)
  return messageid_;
}
inline ::std::string* MessageToSend::release_messageid() {
  clear_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = messageid_;
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageToSend::set_allocated_messageid(::std::string* messageid) {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messageid_;
  }
  if (messageid) {
    set_has_messageid();
    messageid_ = messageid;
  } else {
    clear_has_messageid();
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.MessageToSend.MessageId)
}

// repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 3;
inline int MessageToSend::documentsignatures_size() const {
  return documentsignatures_.size();
}
inline void MessageToSend::clear_documentsignatures() {
  documentsignatures_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::DocumentSignature& MessageToSend::documentsignatures(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.MessageToSend.DocumentSignatures)
  return documentsignatures_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentSignature* MessageToSend::mutable_documentsignatures(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.MessageToSend.DocumentSignatures)
  return documentsignatures_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentSignature* MessageToSend::add_documentsignatures() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.MessageToSend.DocumentSignatures)
  return documentsignatures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSignature >&
MessageToSend::documentsignatures() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.MessageToSend.DocumentSignatures)
  return documentsignatures_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentSignature >*
MessageToSend::mutable_documentsignatures() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.MessageToSend.DocumentSignatures)
  return &documentsignatures_;
}

// -------------------------------------------------------------------

// RevocationRequestAttachment

// required string ParentEntityId = 1;
inline bool RevocationRequestAttachment::has_parententityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RevocationRequestAttachment::set_has_parententityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RevocationRequestAttachment::clear_has_parententityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RevocationRequestAttachment::clear_parententityid() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_->clear();
  }
  clear_has_parententityid();
}
inline const ::std::string& RevocationRequestAttachment::parententityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.RevocationRequestAttachment.ParentEntityId)
  return *parententityid_;
}
inline void RevocationRequestAttachment::set_parententityid(const ::std::string& value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.RevocationRequestAttachment.ParentEntityId)
}
inline void RevocationRequestAttachment::set_parententityid(const char* value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.RevocationRequestAttachment.ParentEntityId)
}
inline void RevocationRequestAttachment::set_parententityid(const char* value, size_t size) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.RevocationRequestAttachment.ParentEntityId)
}
inline ::std::string* RevocationRequestAttachment::mutable_parententityid() {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.RevocationRequestAttachment.ParentEntityId)
  return parententityid_;
}
inline ::std::string* RevocationRequestAttachment::release_parententityid() {
  clear_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parententityid_;
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RevocationRequestAttachment::set_allocated_parententityid(::std::string* parententityid) {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (parententityid) {
    set_has_parententityid();
    parententityid_ = parententityid;
  } else {
    clear_has_parententityid();
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.RevocationRequestAttachment.ParentEntityId)
}

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
inline bool RevocationRequestAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RevocationRequestAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RevocationRequestAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RevocationRequestAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& RevocationRequestAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.RevocationRequestAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* RevocationRequestAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.RevocationRequestAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* RevocationRequestAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void RevocationRequestAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.RevocationRequestAttachment.SignedContent)
}

// repeated string Labels = 3;
inline int RevocationRequestAttachment::labels_size() const {
  return labels_.size();
}
inline void RevocationRequestAttachment::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& RevocationRequestAttachment::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.RevocationRequestAttachment.Labels)
  return labels_.Get(index);
}
inline ::std::string* RevocationRequestAttachment::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.RevocationRequestAttachment.Labels)
  return labels_.Mutable(index);
}
inline void RevocationRequestAttachment::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.RevocationRequestAttachment.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void RevocationRequestAttachment::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.RevocationRequestAttachment.Labels)
}
inline void RevocationRequestAttachment::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.RevocationRequestAttachment.Labels)
}
inline ::std::string* RevocationRequestAttachment::add_labels() {
  return labels_.Add();
}
inline void RevocationRequestAttachment::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.RevocationRequestAttachment.Labels)
}
inline void RevocationRequestAttachment::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.RevocationRequestAttachment.Labels)
}
inline void RevocationRequestAttachment::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.RevocationRequestAttachment.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RevocationRequestAttachment::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.RevocationRequestAttachment.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RevocationRequestAttachment::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.RevocationRequestAttachment.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// XmlSignatureRejectionAttachment

// required string ParentEntityId = 1;
inline bool XmlSignatureRejectionAttachment::has_parententityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XmlSignatureRejectionAttachment::set_has_parententityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void XmlSignatureRejectionAttachment::clear_has_parententityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void XmlSignatureRejectionAttachment::clear_parententityid() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_->clear();
  }
  clear_has_parententityid();
}
inline const ::std::string& XmlSignatureRejectionAttachment::parententityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.ParentEntityId)
  return *parententityid_;
}
inline void XmlSignatureRejectionAttachment::set_parententityid(const ::std::string& value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.ParentEntityId)
}
inline void XmlSignatureRejectionAttachment::set_parententityid(const char* value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.ParentEntityId)
}
inline void XmlSignatureRejectionAttachment::set_parententityid(const char* value, size_t size) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.ParentEntityId)
}
inline ::std::string* XmlSignatureRejectionAttachment::mutable_parententityid() {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.ParentEntityId)
  return parententityid_;
}
inline ::std::string* XmlSignatureRejectionAttachment::release_parententityid() {
  clear_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parententityid_;
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void XmlSignatureRejectionAttachment::set_allocated_parententityid(::std::string* parententityid) {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (parententityid) {
    set_has_parententityid();
    parententityid_ = parententityid;
  } else {
    clear_has_parententityid();
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.ParentEntityId)
}

// required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
inline bool XmlSignatureRejectionAttachment::has_signedcontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XmlSignatureRejectionAttachment::set_has_signedcontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void XmlSignatureRejectionAttachment::clear_has_signedcontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void XmlSignatureRejectionAttachment::clear_signedcontent() {
  if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
  clear_has_signedcontent();
}
inline const ::Diadoc::Api::Proto::Events::SignedContent& XmlSignatureRejectionAttachment::signedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.SignedContent)
  return signedcontent_ != NULL ? *signedcontent_ : *default_instance_->signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* XmlSignatureRejectionAttachment::mutable_signedcontent() {
  set_has_signedcontent();
  if (signedcontent_ == NULL) signedcontent_ = new ::Diadoc::Api::Proto::Events::SignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.SignedContent)
  return signedcontent_;
}
inline ::Diadoc::Api::Proto::Events::SignedContent* XmlSignatureRejectionAttachment::release_signedcontent() {
  clear_has_signedcontent();
  ::Diadoc::Api::Proto::Events::SignedContent* temp = signedcontent_;
  signedcontent_ = NULL;
  return temp;
}
inline void XmlSignatureRejectionAttachment::set_allocated_signedcontent(::Diadoc::Api::Proto::Events::SignedContent* signedcontent) {
  delete signedcontent_;
  signedcontent_ = signedcontent;
  if (signedcontent) {
    set_has_signedcontent();
  } else {
    clear_has_signedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.SignedContent)
}

// repeated string Labels = 3;
inline int XmlSignatureRejectionAttachment::labels_size() const {
  return labels_.size();
}
inline void XmlSignatureRejectionAttachment::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& XmlSignatureRejectionAttachment::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.Labels)
  return labels_.Get(index);
}
inline ::std::string* XmlSignatureRejectionAttachment::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.Labels)
  return labels_.Mutable(index);
}
inline void XmlSignatureRejectionAttachment::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void XmlSignatureRejectionAttachment::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.Labels)
}
inline void XmlSignatureRejectionAttachment::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.Labels)
}
inline ::std::string* XmlSignatureRejectionAttachment::add_labels() {
  return labels_.Add();
}
inline void XmlSignatureRejectionAttachment::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.Labels)
}
inline void XmlSignatureRejectionAttachment::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.Labels)
}
inline void XmlSignatureRejectionAttachment::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
XmlSignatureRejectionAttachment::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
XmlSignatureRejectionAttachment::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// RoamingNotificationToPost

// required string BoxId = 1;
inline bool RoamingNotificationToPost::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoamingNotificationToPost::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoamingNotificationToPost::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoamingNotificationToPost::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& RoamingNotificationToPost::boxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.RoamingNotificationToPost.BoxId)
  return *boxid_;
}
inline void RoamingNotificationToPost::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.RoamingNotificationToPost.BoxId)
}
inline void RoamingNotificationToPost::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.RoamingNotificationToPost.BoxId)
}
inline void RoamingNotificationToPost::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.RoamingNotificationToPost.BoxId)
}
inline ::std::string* RoamingNotificationToPost::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.RoamingNotificationToPost.BoxId)
  return boxid_;
}
inline ::std::string* RoamingNotificationToPost::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoamingNotificationToPost::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.RoamingNotificationToPost.BoxId)
}

// required string EventId = 2;
inline bool RoamingNotificationToPost::has_eventid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoamingNotificationToPost::set_has_eventid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoamingNotificationToPost::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoamingNotificationToPost::clear_eventid() {
  if (eventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_->clear();
  }
  clear_has_eventid();
}
inline const ::std::string& RoamingNotificationToPost::eventid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.RoamingNotificationToPost.EventId)
  return *eventid_;
}
inline void RoamingNotificationToPost::set_eventid(const ::std::string& value) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.RoamingNotificationToPost.EventId)
}
inline void RoamingNotificationToPost::set_eventid(const char* value) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.RoamingNotificationToPost.EventId)
}
inline void RoamingNotificationToPost::set_eventid(const char* value, size_t size) {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_ = new ::std::string;
  }
  eventid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.RoamingNotificationToPost.EventId)
}
inline ::std::string* RoamingNotificationToPost::mutable_eventid() {
  set_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.RoamingNotificationToPost.EventId)
  return eventid_;
}
inline ::std::string* RoamingNotificationToPost::release_eventid() {
  clear_has_eventid();
  if (eventid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = eventid_;
    eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoamingNotificationToPost::set_allocated_eventid(::std::string* eventid) {
  if (eventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eventid_;
  }
  if (eventid) {
    set_has_eventid();
    eventid_ = eventid;
  } else {
    clear_has_eventid();
    eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.RoamingNotificationToPost.EventId)
}

// required bool Success = 3;
inline bool RoamingNotificationToPost::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoamingNotificationToPost::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoamingNotificationToPost::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoamingNotificationToPost::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool RoamingNotificationToPost::success() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.RoamingNotificationToPost.Success)
  return success_;
}
inline void RoamingNotificationToPost::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.RoamingNotificationToPost.Success)
}

// optional string Description = 4;
inline bool RoamingNotificationToPost::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoamingNotificationToPost::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoamingNotificationToPost::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoamingNotificationToPost::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& RoamingNotificationToPost::description() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.RoamingNotificationToPost.Description)
  return *description_;
}
inline void RoamingNotificationToPost::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.RoamingNotificationToPost.Description)
}
inline void RoamingNotificationToPost::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.RoamingNotificationToPost.Description)
}
inline void RoamingNotificationToPost::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.RoamingNotificationToPost.Description)
}
inline ::std::string* RoamingNotificationToPost::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.RoamingNotificationToPost.Description)
  return description_;
}
inline ::std::string* RoamingNotificationToPost::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoamingNotificationToPost::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.RoamingNotificationToPost.Description)
}

// -------------------------------------------------------------------

// CustomDataPatch

// required string ParentEntityId = 1;
inline bool CustomDataPatch::has_parententityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CustomDataPatch::set_has_parententityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CustomDataPatch::clear_has_parententityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CustomDataPatch::clear_parententityid() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_->clear();
  }
  clear_has_parententityid();
}
inline const ::std::string& CustomDataPatch::parententityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.CustomDataPatch.ParentEntityId)
  return *parententityid_;
}
inline void CustomDataPatch::set_parententityid(const ::std::string& value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.CustomDataPatch.ParentEntityId)
}
inline void CustomDataPatch::set_parententityid(const char* value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.CustomDataPatch.ParentEntityId)
}
inline void CustomDataPatch::set_parententityid(const char* value, size_t size) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.CustomDataPatch.ParentEntityId)
}
inline ::std::string* CustomDataPatch::mutable_parententityid() {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.CustomDataPatch.ParentEntityId)
  return parententityid_;
}
inline ::std::string* CustomDataPatch::release_parententityid() {
  clear_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parententityid_;
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CustomDataPatch::set_allocated_parententityid(::std::string* parententityid) {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (parententityid) {
    set_has_parententityid();
    parententityid_ = parententityid;
  } else {
    clear_has_parententityid();
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.CustomDataPatch.ParentEntityId)
}

// required .Diadoc.Api.Proto.Events.CustomDataPatchOperation Operation = 2;
inline bool CustomDataPatch::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CustomDataPatch::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CustomDataPatch::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CustomDataPatch::clear_operation() {
  operation_ = 0;
  clear_has_operation();
}
inline ::Diadoc::Api::Proto::Events::CustomDataPatchOperation CustomDataPatch::operation() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.CustomDataPatch.Operation)
  return static_cast< ::Diadoc::Api::Proto::Events::CustomDataPatchOperation >(operation_);
}
inline void CustomDataPatch::set_operation(::Diadoc::Api::Proto::Events::CustomDataPatchOperation value) {
  assert(::Diadoc::Api::Proto::Events::CustomDataPatchOperation_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.CustomDataPatch.Operation)
}

// required string Key = 3;
inline bool CustomDataPatch::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CustomDataPatch::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CustomDataPatch::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CustomDataPatch::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CustomDataPatch::key() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.CustomDataPatch.Key)
  return *key_;
}
inline void CustomDataPatch::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.CustomDataPatch.Key)
}
inline void CustomDataPatch::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.CustomDataPatch.Key)
}
inline void CustomDataPatch::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.CustomDataPatch.Key)
}
inline ::std::string* CustomDataPatch::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.CustomDataPatch.Key)
  return key_;
}
inline ::std::string* CustomDataPatch::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CustomDataPatch::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.CustomDataPatch.Key)
}

// optional string Value = 4;
inline bool CustomDataPatch::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CustomDataPatch::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CustomDataPatch::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CustomDataPatch::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CustomDataPatch::value() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.CustomDataPatch.Value)
  return *value_;
}
inline void CustomDataPatch::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.CustomDataPatch.Value)
}
inline void CustomDataPatch::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.CustomDataPatch.Value)
}
inline void CustomDataPatch::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.CustomDataPatch.Value)
}
inline ::std::string* CustomDataPatch::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.CustomDataPatch.Value)
  return value_;
}
inline ::std::string* CustomDataPatch::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CustomDataPatch::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.CustomDataPatch.Value)
}

// -------------------------------------------------------------------

// EditDocumentPacketCommand

// required string DocumentId = 1;
inline bool EditDocumentPacketCommand::has_documentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EditDocumentPacketCommand::set_has_documentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EditDocumentPacketCommand::clear_has_documentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EditDocumentPacketCommand::clear_documentid() {
  if (documentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentid_->clear();
  }
  clear_has_documentid();
}
inline const ::std::string& EditDocumentPacketCommand::documentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.DocumentId)
  return *documentid_;
}
inline void EditDocumentPacketCommand::set_documentid(const ::std::string& value) {
  set_has_documentid();
  if (documentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentid_ = new ::std::string;
  }
  documentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.DocumentId)
}
inline void EditDocumentPacketCommand::set_documentid(const char* value) {
  set_has_documentid();
  if (documentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentid_ = new ::std::string;
  }
  documentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.DocumentId)
}
inline void EditDocumentPacketCommand::set_documentid(const char* value, size_t size) {
  set_has_documentid();
  if (documentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentid_ = new ::std::string;
  }
  documentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.DocumentId)
}
inline ::std::string* EditDocumentPacketCommand::mutable_documentid() {
  set_has_documentid();
  if (documentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.DocumentId)
  return documentid_;
}
inline ::std::string* EditDocumentPacketCommand::release_documentid() {
  clear_has_documentid();
  if (documentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentid_;
    documentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EditDocumentPacketCommand::set_allocated_documentid(::std::string* documentid) {
  if (documentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentid_;
  }
  if (documentid) {
    set_has_documentid();
    documentid_ = documentid;
  } else {
    clear_has_documentid();
    documentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.DocumentId)
}

// repeated .Diadoc.Api.Proto.DocumentId AddDocumentsToPacket = 2;
inline int EditDocumentPacketCommand::adddocumentstopacket_size() const {
  return adddocumentstopacket_.size();
}
inline void EditDocumentPacketCommand::clear_adddocumentstopacket() {
  adddocumentstopacket_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& EditDocumentPacketCommand::adddocumentstopacket(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.AddDocumentsToPacket)
  return adddocumentstopacket_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* EditDocumentPacketCommand::mutable_adddocumentstopacket(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.AddDocumentsToPacket)
  return adddocumentstopacket_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* EditDocumentPacketCommand::add_adddocumentstopacket() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.AddDocumentsToPacket)
  return adddocumentstopacket_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
EditDocumentPacketCommand::adddocumentstopacket() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.AddDocumentsToPacket)
  return adddocumentstopacket_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
EditDocumentPacketCommand::mutable_adddocumentstopacket() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.AddDocumentsToPacket)
  return &adddocumentstopacket_;
}

// repeated .Diadoc.Api.Proto.DocumentId RemoveDocumentsFromPacket = 3;
inline int EditDocumentPacketCommand::removedocumentsfrompacket_size() const {
  return removedocumentsfrompacket_.size();
}
inline void EditDocumentPacketCommand::clear_removedocumentsfrompacket() {
  removedocumentsfrompacket_.Clear();
}
inline const ::Diadoc::Api::Proto::DocumentId& EditDocumentPacketCommand::removedocumentsfrompacket(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.RemoveDocumentsFromPacket)
  return removedocumentsfrompacket_.Get(index);
}
inline ::Diadoc::Api::Proto::DocumentId* EditDocumentPacketCommand::mutable_removedocumentsfrompacket(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.RemoveDocumentsFromPacket)
  return removedocumentsfrompacket_.Mutable(index);
}
inline ::Diadoc::Api::Proto::DocumentId* EditDocumentPacketCommand::add_removedocumentsfrompacket() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.RemoveDocumentsFromPacket)
  return removedocumentsfrompacket_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >&
EditDocumentPacketCommand::removedocumentsfrompacket() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.RemoveDocumentsFromPacket)
  return removedocumentsfrompacket_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::DocumentId >*
EditDocumentPacketCommand::mutable_removedocumentsfrompacket() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.EditDocumentPacketCommand.RemoveDocumentsFromPacket)
  return &removedocumentsfrompacket_;
}

// -------------------------------------------------------------------

// ResolutionRouteRemoval

// required string ParentEntityId = 1;
inline bool ResolutionRouteRemoval::has_parententityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResolutionRouteRemoval::set_has_parententityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResolutionRouteRemoval::clear_has_parententityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResolutionRouteRemoval::clear_parententityid() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_->clear();
  }
  clear_has_parententityid();
}
inline const ::std::string& ResolutionRouteRemoval::parententityid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.ParentEntityId)
  return *parententityid_;
}
inline void ResolutionRouteRemoval::set_parententityid(const ::std::string& value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.ParentEntityId)
}
inline void ResolutionRouteRemoval::set_parententityid(const char* value) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.ParentEntityId)
}
inline void ResolutionRouteRemoval::set_parententityid(const char* value, size_t size) {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  parententityid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.ParentEntityId)
}
inline ::std::string* ResolutionRouteRemoval::mutable_parententityid() {
  set_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parententityid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.ParentEntityId)
  return parententityid_;
}
inline ::std::string* ResolutionRouteRemoval::release_parententityid() {
  clear_has_parententityid();
  if (parententityid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parententityid_;
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRouteRemoval::set_allocated_parententityid(::std::string* parententityid) {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (parententityid) {
    set_has_parententityid();
    parententityid_ = parententityid;
  } else {
    clear_has_parententityid();
    parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.ParentEntityId)
}

// required string RouteId = 2;
inline bool ResolutionRouteRemoval::has_routeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResolutionRouteRemoval::set_has_routeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResolutionRouteRemoval::clear_has_routeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResolutionRouteRemoval::clear_routeid() {
  if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_->clear();
  }
  clear_has_routeid();
}
inline const ::std::string& ResolutionRouteRemoval::routeid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.RouteId)
  return *routeid_;
}
inline void ResolutionRouteRemoval::set_routeid(const ::std::string& value) {
  set_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_ = new ::std::string;
  }
  routeid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.RouteId)
}
inline void ResolutionRouteRemoval::set_routeid(const char* value) {
  set_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_ = new ::std::string;
  }
  routeid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.RouteId)
}
inline void ResolutionRouteRemoval::set_routeid(const char* value, size_t size) {
  set_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_ = new ::std::string;
  }
  routeid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.RouteId)
}
inline ::std::string* ResolutionRouteRemoval::mutable_routeid() {
  set_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    routeid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.RouteId)
  return routeid_;
}
inline ::std::string* ResolutionRouteRemoval::release_routeid() {
  clear_has_routeid();
  if (routeid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = routeid_;
    routeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRouteRemoval::set_allocated_routeid(::std::string* routeid) {
  if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete routeid_;
  }
  if (routeid) {
    set_has_routeid();
    routeid_ = routeid;
  } else {
    clear_has_routeid();
    routeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.RouteId)
}

// optional string Comment = 3 [default = ""];
inline bool ResolutionRouteRemoval::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResolutionRouteRemoval::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResolutionRouteRemoval::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResolutionRouteRemoval::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ResolutionRouteRemoval::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Comment)
  return *comment_;
}
inline void ResolutionRouteRemoval::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Comment)
}
inline void ResolutionRouteRemoval::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Comment)
}
inline void ResolutionRouteRemoval::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Comment)
}
inline ::std::string* ResolutionRouteRemoval::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Comment)
  return comment_;
}
inline ::std::string* ResolutionRouteRemoval::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ResolutionRouteRemoval::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Comment)
}

// repeated string Labels = 4;
inline int ResolutionRouteRemoval::labels_size() const {
  return labels_.size();
}
inline void ResolutionRouteRemoval::clear_labels() {
  labels_.Clear();
}
inline const ::std::string& ResolutionRouteRemoval::labels(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Labels)
  return labels_.Get(index);
}
inline ::std::string* ResolutionRouteRemoval::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Labels)
  return labels_.Mutable(index);
}
inline void ResolutionRouteRemoval::set_labels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Labels)
  labels_.Mutable(index)->assign(value);
}
inline void ResolutionRouteRemoval::set_labels(int index, const char* value) {
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Labels)
}
inline void ResolutionRouteRemoval::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Labels)
}
inline ::std::string* ResolutionRouteRemoval::add_labels() {
  return labels_.Add();
}
inline void ResolutionRouteRemoval::add_labels(const ::std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Labels)
}
inline void ResolutionRouteRemoval::add_labels(const char* value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Labels)
}
inline void ResolutionRouteRemoval::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Labels)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResolutionRouteRemoval::labels() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Labels)
  return labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ResolutionRouteRemoval::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.ResolutionRouteRemoval.Labels)
  return &labels_;
}

// -------------------------------------------------------------------

// TemplateToPost

// required string FromBoxId = 1;
inline bool TemplateToPost::has_fromboxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TemplateToPost::set_has_fromboxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TemplateToPost::clear_has_fromboxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TemplateToPost::clear_fromboxid() {
  if (fromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromboxid_->clear();
  }
  clear_has_fromboxid();
}
inline const ::std::string& TemplateToPost::fromboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateToPost.FromBoxId)
  return *fromboxid_;
}
inline void TemplateToPost::set_fromboxid(const ::std::string& value) {
  set_has_fromboxid();
  if (fromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromboxid_ = new ::std::string;
  }
  fromboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateToPost.FromBoxId)
}
inline void TemplateToPost::set_fromboxid(const char* value) {
  set_has_fromboxid();
  if (fromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromboxid_ = new ::std::string;
  }
  fromboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateToPost.FromBoxId)
}
inline void TemplateToPost::set_fromboxid(const char* value, size_t size) {
  set_has_fromboxid();
  if (fromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromboxid_ = new ::std::string;
  }
  fromboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateToPost.FromBoxId)
}
inline ::std::string* TemplateToPost::mutable_fromboxid() {
  set_has_fromboxid();
  if (fromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fromboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateToPost.FromBoxId)
  return fromboxid_;
}
inline ::std::string* TemplateToPost::release_fromboxid() {
  clear_has_fromboxid();
  if (fromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fromboxid_;
    fromboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateToPost::set_allocated_fromboxid(::std::string* fromboxid) {
  if (fromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromboxid_;
  }
  if (fromboxid) {
    set_has_fromboxid();
    fromboxid_ = fromboxid;
  } else {
    clear_has_fromboxid();
    fromboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateToPost.FromBoxId)
}

// required string ToBoxId = 2;
inline bool TemplateToPost::has_toboxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TemplateToPost::set_has_toboxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TemplateToPost::clear_has_toboxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TemplateToPost::clear_toboxid() {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_->clear();
  }
  clear_has_toboxid();
}
inline const ::std::string& TemplateToPost::toboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateToPost.ToBoxId)
  return *toboxid_;
}
inline void TemplateToPost::set_toboxid(const ::std::string& value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateToPost.ToBoxId)
}
inline void TemplateToPost::set_toboxid(const char* value) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateToPost.ToBoxId)
}
inline void TemplateToPost::set_toboxid(const char* value, size_t size) {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  toboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateToPost.ToBoxId)
}
inline ::std::string* TemplateToPost::mutable_toboxid() {
  set_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateToPost.ToBoxId)
  return toboxid_;
}
inline ::std::string* TemplateToPost::release_toboxid() {
  clear_has_toboxid();
  if (toboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = toboxid_;
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateToPost::set_allocated_toboxid(::std::string* toboxid) {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toboxid_;
  }
  if (toboxid) {
    set_has_toboxid();
    toboxid_ = toboxid;
  } else {
    clear_has_toboxid();
    toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateToPost.ToBoxId)
}

// required string MessageFromBoxId = 3;
inline bool TemplateToPost::has_messagefromboxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TemplateToPost::set_has_messagefromboxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TemplateToPost::clear_has_messagefromboxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TemplateToPost::clear_messagefromboxid() {
  if (messagefromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagefromboxid_->clear();
  }
  clear_has_messagefromboxid();
}
inline const ::std::string& TemplateToPost::messagefromboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateToPost.MessageFromBoxId)
  return *messagefromboxid_;
}
inline void TemplateToPost::set_messagefromboxid(const ::std::string& value) {
  set_has_messagefromboxid();
  if (messagefromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagefromboxid_ = new ::std::string;
  }
  messagefromboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateToPost.MessageFromBoxId)
}
inline void TemplateToPost::set_messagefromboxid(const char* value) {
  set_has_messagefromboxid();
  if (messagefromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagefromboxid_ = new ::std::string;
  }
  messagefromboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateToPost.MessageFromBoxId)
}
inline void TemplateToPost::set_messagefromboxid(const char* value, size_t size) {
  set_has_messagefromboxid();
  if (messagefromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagefromboxid_ = new ::std::string;
  }
  messagefromboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateToPost.MessageFromBoxId)
}
inline ::std::string* TemplateToPost::mutable_messagefromboxid() {
  set_has_messagefromboxid();
  if (messagefromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagefromboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateToPost.MessageFromBoxId)
  return messagefromboxid_;
}
inline ::std::string* TemplateToPost::release_messagefromboxid() {
  clear_has_messagefromboxid();
  if (messagefromboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = messagefromboxid_;
    messagefromboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateToPost::set_allocated_messagefromboxid(::std::string* messagefromboxid) {
  if (messagefromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagefromboxid_;
  }
  if (messagefromboxid) {
    set_has_messagefromboxid();
    messagefromboxid_ = messagefromboxid;
  } else {
    clear_has_messagefromboxid();
    messagefromboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateToPost.MessageFromBoxId)
}

// required string MessageToBoxId = 4;
inline bool TemplateToPost::has_messagetoboxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TemplateToPost::set_has_messagetoboxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TemplateToPost::clear_has_messagetoboxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TemplateToPost::clear_messagetoboxid() {
  if (messagetoboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetoboxid_->clear();
  }
  clear_has_messagetoboxid();
}
inline const ::std::string& TemplateToPost::messagetoboxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateToPost.MessageToBoxId)
  return *messagetoboxid_;
}
inline void TemplateToPost::set_messagetoboxid(const ::std::string& value) {
  set_has_messagetoboxid();
  if (messagetoboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetoboxid_ = new ::std::string;
  }
  messagetoboxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateToPost.MessageToBoxId)
}
inline void TemplateToPost::set_messagetoboxid(const char* value) {
  set_has_messagetoboxid();
  if (messagetoboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetoboxid_ = new ::std::string;
  }
  messagetoboxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateToPost.MessageToBoxId)
}
inline void TemplateToPost::set_messagetoboxid(const char* value, size_t size) {
  set_has_messagetoboxid();
  if (messagetoboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetoboxid_ = new ::std::string;
  }
  messagetoboxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateToPost.MessageToBoxId)
}
inline ::std::string* TemplateToPost::mutable_messagetoboxid() {
  set_has_messagetoboxid();
  if (messagetoboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetoboxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateToPost.MessageToBoxId)
  return messagetoboxid_;
}
inline ::std::string* TemplateToPost::release_messagetoboxid() {
  clear_has_messagetoboxid();
  if (messagetoboxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = messagetoboxid_;
    messagetoboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateToPost::set_allocated_messagetoboxid(::std::string* messagetoboxid) {
  if (messagetoboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetoboxid_;
  }
  if (messagetoboxid) {
    set_has_messagetoboxid();
    messagetoboxid_ = messagetoboxid;
  } else {
    clear_has_messagetoboxid();
    messagetoboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateToPost.MessageToBoxId)
}

// optional string MessageToDepartmentId = 5;
inline bool TemplateToPost::has_messagetodepartmentid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TemplateToPost::set_has_messagetodepartmentid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TemplateToPost::clear_has_messagetodepartmentid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TemplateToPost::clear_messagetodepartmentid() {
  if (messagetodepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetodepartmentid_->clear();
  }
  clear_has_messagetodepartmentid();
}
inline const ::std::string& TemplateToPost::messagetodepartmentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateToPost.MessageToDepartmentId)
  return *messagetodepartmentid_;
}
inline void TemplateToPost::set_messagetodepartmentid(const ::std::string& value) {
  set_has_messagetodepartmentid();
  if (messagetodepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetodepartmentid_ = new ::std::string;
  }
  messagetodepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateToPost.MessageToDepartmentId)
}
inline void TemplateToPost::set_messagetodepartmentid(const char* value) {
  set_has_messagetodepartmentid();
  if (messagetodepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetodepartmentid_ = new ::std::string;
  }
  messagetodepartmentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateToPost.MessageToDepartmentId)
}
inline void TemplateToPost::set_messagetodepartmentid(const char* value, size_t size) {
  set_has_messagetodepartmentid();
  if (messagetodepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetodepartmentid_ = new ::std::string;
  }
  messagetodepartmentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateToPost.MessageToDepartmentId)
}
inline ::std::string* TemplateToPost::mutable_messagetodepartmentid() {
  set_has_messagetodepartmentid();
  if (messagetodepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messagetodepartmentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateToPost.MessageToDepartmentId)
  return messagetodepartmentid_;
}
inline ::std::string* TemplateToPost::release_messagetodepartmentid() {
  clear_has_messagetodepartmentid();
  if (messagetodepartmentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = messagetodepartmentid_;
    messagetodepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateToPost::set_allocated_messagetodepartmentid(::std::string* messagetodepartmentid) {
  if (messagetodepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetodepartmentid_;
  }
  if (messagetodepartmentid) {
    set_has_messagetodepartmentid();
    messagetodepartmentid_ = messagetodepartmentid;
  } else {
    clear_has_messagetodepartmentid();
    messagetodepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateToPost.MessageToDepartmentId)
}

// repeated .Diadoc.Api.Proto.Events.TemplateDocumentAttachment DocumentAttachments = 6;
inline int TemplateToPost::documentattachments_size() const {
  return documentattachments_.size();
}
inline void TemplateToPost::clear_documentattachments() {
  documentattachments_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::TemplateDocumentAttachment& TemplateToPost::documentattachments(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateToPost.DocumentAttachments)
  return documentattachments_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::TemplateDocumentAttachment* TemplateToPost::mutable_documentattachments(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateToPost.DocumentAttachments)
  return documentattachments_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::TemplateDocumentAttachment* TemplateToPost::add_documentattachments() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.TemplateToPost.DocumentAttachments)
  return documentattachments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::TemplateDocumentAttachment >&
TemplateToPost::documentattachments() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.TemplateToPost.DocumentAttachments)
  return documentattachments_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::TemplateDocumentAttachment >*
TemplateToPost::mutable_documentattachments() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.TemplateToPost.DocumentAttachments)
  return &documentattachments_;
}

// -------------------------------------------------------------------

// TemplateDocumentAttachment

// required .Diadoc.Api.Proto.Events.UnsignedContent UnsignedContent = 1;
inline bool TemplateDocumentAttachment::has_unsignedcontent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TemplateDocumentAttachment::set_has_unsignedcontent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TemplateDocumentAttachment::clear_has_unsignedcontent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TemplateDocumentAttachment::clear_unsignedcontent() {
  if (unsignedcontent_ != NULL) unsignedcontent_->::Diadoc::Api::Proto::Events::UnsignedContent::Clear();
  clear_has_unsignedcontent();
}
inline const ::Diadoc::Api::Proto::Events::UnsignedContent& TemplateDocumentAttachment::unsignedcontent() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.UnsignedContent)
  return unsignedcontent_ != NULL ? *unsignedcontent_ : *default_instance_->unsignedcontent_;
}
inline ::Diadoc::Api::Proto::Events::UnsignedContent* TemplateDocumentAttachment::mutable_unsignedcontent() {
  set_has_unsignedcontent();
  if (unsignedcontent_ == NULL) unsignedcontent_ = new ::Diadoc::Api::Proto::Events::UnsignedContent;
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.UnsignedContent)
  return unsignedcontent_;
}
inline ::Diadoc::Api::Proto::Events::UnsignedContent* TemplateDocumentAttachment::release_unsignedcontent() {
  clear_has_unsignedcontent();
  ::Diadoc::Api::Proto::Events::UnsignedContent* temp = unsignedcontent_;
  unsignedcontent_ = NULL;
  return temp;
}
inline void TemplateDocumentAttachment::set_allocated_unsignedcontent(::Diadoc::Api::Proto::Events::UnsignedContent* unsignedcontent) {
  delete unsignedcontent_;
  unsignedcontent_ = unsignedcontent;
  if (unsignedcontent) {
    set_has_unsignedcontent();
  } else {
    clear_has_unsignedcontent();
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.UnsignedContent)
}

// optional string Comment = 2;
inline bool TemplateDocumentAttachment::has_comment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TemplateDocumentAttachment::set_has_comment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TemplateDocumentAttachment::clear_has_comment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TemplateDocumentAttachment::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& TemplateDocumentAttachment::comment() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Comment)
  return *comment_;
}
inline void TemplateDocumentAttachment::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Comment)
}
inline void TemplateDocumentAttachment::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Comment)
}
inline void TemplateDocumentAttachment::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Comment)
}
inline ::std::string* TemplateDocumentAttachment::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Comment)
  return comment_;
}
inline ::std::string* TemplateDocumentAttachment::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateDocumentAttachment::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Comment)
}

// required string TypeNamedId = 3;
inline bool TemplateDocumentAttachment::has_typenamedid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TemplateDocumentAttachment::set_has_typenamedid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TemplateDocumentAttachment::clear_has_typenamedid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TemplateDocumentAttachment::clear_typenamedid() {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_->clear();
  }
  clear_has_typenamedid();
}
inline const ::std::string& TemplateDocumentAttachment::typenamedid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.TypeNamedId)
  return *typenamedid_;
}
inline void TemplateDocumentAttachment::set_typenamedid(const ::std::string& value) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.TypeNamedId)
}
inline void TemplateDocumentAttachment::set_typenamedid(const char* value) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.TypeNamedId)
}
inline void TemplateDocumentAttachment::set_typenamedid(const char* value, size_t size) {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  typenamedid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.TypeNamedId)
}
inline ::std::string* TemplateDocumentAttachment::mutable_typenamedid() {
  set_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    typenamedid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.TypeNamedId)
  return typenamedid_;
}
inline ::std::string* TemplateDocumentAttachment::release_typenamedid() {
  clear_has_typenamedid();
  if (typenamedid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = typenamedid_;
    typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateDocumentAttachment::set_allocated_typenamedid(::std::string* typenamedid) {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typenamedid_;
  }
  if (typenamedid) {
    set_has_typenamedid();
    typenamedid_ = typenamedid;
  } else {
    clear_has_typenamedid();
    typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.TypeNamedId)
}

// optional string Function = 4;
inline bool TemplateDocumentAttachment::has_function() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TemplateDocumentAttachment::set_has_function() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TemplateDocumentAttachment::clear_has_function() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TemplateDocumentAttachment::clear_function() {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_->clear();
  }
  clear_has_function();
}
inline const ::std::string& TemplateDocumentAttachment::function() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Function)
  return *function_;
}
inline void TemplateDocumentAttachment::set_function(const ::std::string& value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Function)
}
inline void TemplateDocumentAttachment::set_function(const char* value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Function)
}
inline void TemplateDocumentAttachment::set_function(const char* value, size_t size) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Function)
}
inline ::std::string* TemplateDocumentAttachment::mutable_function() {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Function)
  return function_;
}
inline ::std::string* TemplateDocumentAttachment::release_function() {
  clear_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = function_;
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateDocumentAttachment::set_allocated_function(::std::string* function) {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (function) {
    set_has_function();
    function_ = function;
  } else {
    clear_has_function();
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Function)
}

// optional string Version = 5;
inline bool TemplateDocumentAttachment::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TemplateDocumentAttachment::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TemplateDocumentAttachment::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TemplateDocumentAttachment::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& TemplateDocumentAttachment::version() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Version)
  return *version_;
}
inline void TemplateDocumentAttachment::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Version)
}
inline void TemplateDocumentAttachment::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Version)
}
inline void TemplateDocumentAttachment::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Version)
}
inline ::std::string* TemplateDocumentAttachment::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Version)
  return version_;
}
inline ::std::string* TemplateDocumentAttachment::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateDocumentAttachment::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Version)
}

// repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 6;
inline int TemplateDocumentAttachment::metadata_size() const {
  return metadata_.size();
}
inline void TemplateDocumentAttachment::clear_metadata() {
  metadata_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::MetadataItem& TemplateDocumentAttachment::metadata(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Metadata)
  return metadata_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::MetadataItem* TemplateDocumentAttachment::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Metadata)
  return metadata_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::MetadataItem* TemplateDocumentAttachment::add_metadata() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Metadata)
  return metadata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >&
TemplateDocumentAttachment::metadata() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Metadata)
  return metadata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::MetadataItem >*
TemplateDocumentAttachment::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.Metadata)
  return &metadata_;
}

// optional int32 WorkflowId = 7;
inline bool TemplateDocumentAttachment::has_workflowid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TemplateDocumentAttachment::set_has_workflowid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TemplateDocumentAttachment::clear_has_workflowid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TemplateDocumentAttachment::clear_workflowid() {
  workflowid_ = 0;
  clear_has_workflowid();
}
inline ::google::protobuf::int32 TemplateDocumentAttachment::workflowid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.WorkflowId)
  return workflowid_;
}
inline void TemplateDocumentAttachment::set_workflowid(::google::protobuf::int32 value) {
  set_has_workflowid();
  workflowid_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.WorkflowId)
}

// optional string CustomDocumentId = 8;
inline bool TemplateDocumentAttachment::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TemplateDocumentAttachment::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TemplateDocumentAttachment::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TemplateDocumentAttachment::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& TemplateDocumentAttachment::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.CustomDocumentId)
  return *customdocumentid_;
}
inline void TemplateDocumentAttachment::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.CustomDocumentId)
}
inline void TemplateDocumentAttachment::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.CustomDocumentId)
}
inline void TemplateDocumentAttachment::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.CustomDocumentId)
}
inline ::std::string* TemplateDocumentAttachment::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* TemplateDocumentAttachment::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateDocumentAttachment::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.CustomDocumentId)
}

// optional string EditingSettingId = 9;
inline bool TemplateDocumentAttachment::has_editingsettingid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TemplateDocumentAttachment::set_has_editingsettingid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TemplateDocumentAttachment::clear_has_editingsettingid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TemplateDocumentAttachment::clear_editingsettingid() {
  if (editingsettingid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    editingsettingid_->clear();
  }
  clear_has_editingsettingid();
}
inline const ::std::string& TemplateDocumentAttachment::editingsettingid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.EditingSettingId)
  return *editingsettingid_;
}
inline void TemplateDocumentAttachment::set_editingsettingid(const ::std::string& value) {
  set_has_editingsettingid();
  if (editingsettingid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    editingsettingid_ = new ::std::string;
  }
  editingsettingid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.EditingSettingId)
}
inline void TemplateDocumentAttachment::set_editingsettingid(const char* value) {
  set_has_editingsettingid();
  if (editingsettingid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    editingsettingid_ = new ::std::string;
  }
  editingsettingid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.EditingSettingId)
}
inline void TemplateDocumentAttachment::set_editingsettingid(const char* value, size_t size) {
  set_has_editingsettingid();
  if (editingsettingid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    editingsettingid_ = new ::std::string;
  }
  editingsettingid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.EditingSettingId)
}
inline ::std::string* TemplateDocumentAttachment::mutable_editingsettingid() {
  set_has_editingsettingid();
  if (editingsettingid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    editingsettingid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.EditingSettingId)
  return editingsettingid_;
}
inline ::std::string* TemplateDocumentAttachment::release_editingsettingid() {
  clear_has_editingsettingid();
  if (editingsettingid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = editingsettingid_;
    editingsettingid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateDocumentAttachment::set_allocated_editingsettingid(::std::string* editingsettingid) {
  if (editingsettingid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete editingsettingid_;
  }
  if (editingsettingid) {
    set_has_editingsettingid();
    editingsettingid_ = editingsettingid;
  } else {
    clear_has_editingsettingid();
    editingsettingid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.EditingSettingId)
}

// optional bool NeedRecipientSignature = 10 [default = false];
inline bool TemplateDocumentAttachment::has_needrecipientsignature() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TemplateDocumentAttachment::set_has_needrecipientsignature() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TemplateDocumentAttachment::clear_has_needrecipientsignature() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TemplateDocumentAttachment::clear_needrecipientsignature() {
  needrecipientsignature_ = false;
  clear_has_needrecipientsignature();
}
inline bool TemplateDocumentAttachment::needrecipientsignature() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.NeedRecipientSignature)
  return needrecipientsignature_;
}
inline void TemplateDocumentAttachment::set_needrecipientsignature(bool value) {
  set_has_needrecipientsignature();
  needrecipientsignature_ = value;
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateDocumentAttachment.NeedRecipientSignature)
}

// -------------------------------------------------------------------

// UnsignedContent

// optional bytes Content = 1;
inline bool UnsignedContent::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnsignedContent::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnsignedContent::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnsignedContent::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& UnsignedContent::content() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.UnsignedContent.Content)
  return *content_;
}
inline void UnsignedContent::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.UnsignedContent.Content)
}
inline void UnsignedContent::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.UnsignedContent.Content)
}
inline void UnsignedContent::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.UnsignedContent.Content)
}
inline ::std::string* UnsignedContent::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.UnsignedContent.Content)
  return content_;
}
inline ::std::string* UnsignedContent::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnsignedContent::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.UnsignedContent.Content)
}

// optional string NameOnShelf = 2;
inline bool UnsignedContent::has_nameonshelf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnsignedContent::set_has_nameonshelf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnsignedContent::clear_has_nameonshelf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnsignedContent::clear_nameonshelf() {
  if (nameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nameonshelf_->clear();
  }
  clear_has_nameonshelf();
}
inline const ::std::string& UnsignedContent::nameonshelf() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.UnsignedContent.NameOnShelf)
  return *nameonshelf_;
}
inline void UnsignedContent::set_nameonshelf(const ::std::string& value) {
  set_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nameonshelf_ = new ::std::string;
  }
  nameonshelf_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.UnsignedContent.NameOnShelf)
}
inline void UnsignedContent::set_nameonshelf(const char* value) {
  set_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nameonshelf_ = new ::std::string;
  }
  nameonshelf_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.UnsignedContent.NameOnShelf)
}
inline void UnsignedContent::set_nameonshelf(const char* value, size_t size) {
  set_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nameonshelf_ = new ::std::string;
  }
  nameonshelf_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.UnsignedContent.NameOnShelf)
}
inline ::std::string* UnsignedContent::mutable_nameonshelf() {
  set_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nameonshelf_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.UnsignedContent.NameOnShelf)
  return nameonshelf_;
}
inline ::std::string* UnsignedContent::release_nameonshelf() {
  clear_has_nameonshelf();
  if (nameonshelf_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nameonshelf_;
    nameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnsignedContent::set_allocated_nameonshelf(::std::string* nameonshelf) {
  if (nameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nameonshelf_;
  }
  if (nameonshelf) {
    set_has_nameonshelf();
    nameonshelf_ = nameonshelf;
  } else {
    clear_has_nameonshelf();
    nameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.UnsignedContent.NameOnShelf)
}

// -------------------------------------------------------------------

// TemplateTransformationToPost

// required string BoxId = 1;
inline bool TemplateTransformationToPost::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TemplateTransformationToPost::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TemplateTransformationToPost::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TemplateTransformationToPost::clear_boxid() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_->clear();
  }
  clear_has_boxid();
}
inline const ::std::string& TemplateTransformationToPost::boxid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateTransformationToPost.BoxId)
  return *boxid_;
}
inline void TemplateTransformationToPost::set_boxid(const ::std::string& value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateTransformationToPost.BoxId)
}
inline void TemplateTransformationToPost::set_boxid(const char* value) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateTransformationToPost.BoxId)
}
inline void TemplateTransformationToPost::set_boxid(const char* value, size_t size) {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  boxid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateTransformationToPost.BoxId)
}
inline ::std::string* TemplateTransformationToPost::mutable_boxid() {
  set_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boxid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateTransformationToPost.BoxId)
  return boxid_;
}
inline ::std::string* TemplateTransformationToPost::release_boxid() {
  clear_has_boxid();
  if (boxid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boxid_;
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateTransformationToPost::set_allocated_boxid(::std::string* boxid) {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (boxid) {
    set_has_boxid();
    boxid_ = boxid;
  } else {
    clear_has_boxid();
    boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateTransformationToPost.BoxId)
}

// required string TemplateId = 2;
inline bool TemplateTransformationToPost::has_templateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TemplateTransformationToPost::set_has_templateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TemplateTransformationToPost::clear_has_templateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TemplateTransformationToPost::clear_templateid() {
  if (templateid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    templateid_->clear();
  }
  clear_has_templateid();
}
inline const ::std::string& TemplateTransformationToPost::templateid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateTransformationToPost.TemplateId)
  return *templateid_;
}
inline void TemplateTransformationToPost::set_templateid(const ::std::string& value) {
  set_has_templateid();
  if (templateid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    templateid_ = new ::std::string;
  }
  templateid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.TemplateTransformationToPost.TemplateId)
}
inline void TemplateTransformationToPost::set_templateid(const char* value) {
  set_has_templateid();
  if (templateid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    templateid_ = new ::std::string;
  }
  templateid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.TemplateTransformationToPost.TemplateId)
}
inline void TemplateTransformationToPost::set_templateid(const char* value, size_t size) {
  set_has_templateid();
  if (templateid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    templateid_ = new ::std::string;
  }
  templateid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.TemplateTransformationToPost.TemplateId)
}
inline ::std::string* TemplateTransformationToPost::mutable_templateid() {
  set_has_templateid();
  if (templateid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    templateid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateTransformationToPost.TemplateId)
  return templateid_;
}
inline ::std::string* TemplateTransformationToPost::release_templateid() {
  clear_has_templateid();
  if (templateid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = templateid_;
    templateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TemplateTransformationToPost::set_allocated_templateid(::std::string* templateid) {
  if (templateid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete templateid_;
  }
  if (templateid) {
    set_has_templateid();
    templateid_ = templateid;
  } else {
    clear_has_templateid();
    templateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.TemplateTransformationToPost.TemplateId)
}

// repeated .Diadoc.Api.Proto.Events.DocumentTransformation DocumentTransformations = 3;
inline int TemplateTransformationToPost::documenttransformations_size() const {
  return documenttransformations_.size();
}
inline void TemplateTransformationToPost::clear_documenttransformations() {
  documenttransformations_.Clear();
}
inline const ::Diadoc::Api::Proto::Events::DocumentTransformation& TemplateTransformationToPost::documenttransformations(int index) const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.TemplateTransformationToPost.DocumentTransformations)
  return documenttransformations_.Get(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentTransformation* TemplateTransformationToPost::mutable_documenttransformations(int index) {
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.TemplateTransformationToPost.DocumentTransformations)
  return documenttransformations_.Mutable(index);
}
inline ::Diadoc::Api::Proto::Events::DocumentTransformation* TemplateTransformationToPost::add_documenttransformations() {
  // @@protoc_insertion_point(field_add:Diadoc.Api.Proto.Events.TemplateTransformationToPost.DocumentTransformations)
  return documenttransformations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentTransformation >&
TemplateTransformationToPost::documenttransformations() const {
  // @@protoc_insertion_point(field_list:Diadoc.Api.Proto.Events.TemplateTransformationToPost.DocumentTransformations)
  return documenttransformations_;
}
inline ::google::protobuf::RepeatedPtrField< ::Diadoc::Api::Proto::Events::DocumentTransformation >*
TemplateTransformationToPost::mutable_documenttransformations() {
  // @@protoc_insertion_point(field_mutable_list:Diadoc.Api.Proto.Events.TemplateTransformationToPost.DocumentTransformations)
  return &documenttransformations_;
}

// -------------------------------------------------------------------

// DocumentTransformation

// required string DocumentId = 1;
inline bool DocumentTransformation::has_documentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentTransformation::set_has_documentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentTransformation::clear_has_documentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentTransformation::clear_documentid() {
  if (documentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentid_->clear();
  }
  clear_has_documentid();
}
inline const ::std::string& DocumentTransformation::documentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentTransformation.DocumentId)
  return *documentid_;
}
inline void DocumentTransformation::set_documentid(const ::std::string& value) {
  set_has_documentid();
  if (documentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentid_ = new ::std::string;
  }
  documentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentTransformation.DocumentId)
}
inline void DocumentTransformation::set_documentid(const char* value) {
  set_has_documentid();
  if (documentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentid_ = new ::std::string;
  }
  documentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentTransformation.DocumentId)
}
inline void DocumentTransformation::set_documentid(const char* value, size_t size) {
  set_has_documentid();
  if (documentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentid_ = new ::std::string;
  }
  documentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentTransformation.DocumentId)
}
inline ::std::string* DocumentTransformation::mutable_documentid() {
  set_has_documentid();
  if (documentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    documentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentTransformation.DocumentId)
  return documentid_;
}
inline ::std::string* DocumentTransformation::release_documentid() {
  clear_has_documentid();
  if (documentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = documentid_;
    documentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentTransformation::set_allocated_documentid(::std::string* documentid) {
  if (documentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentid_;
  }
  if (documentid) {
    set_has_documentid();
    documentid_ = documentid;
  } else {
    clear_has_documentid();
    documentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentTransformation.DocumentId)
}

// optional string CustomDocumentId = 2;
inline bool DocumentTransformation::has_customdocumentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentTransformation::set_has_customdocumentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentTransformation::clear_has_customdocumentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentTransformation::clear_customdocumentid() {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_->clear();
  }
  clear_has_customdocumentid();
}
inline const ::std::string& DocumentTransformation::customdocumentid() const {
  // @@protoc_insertion_point(field_get:Diadoc.Api.Proto.Events.DocumentTransformation.CustomDocumentId)
  return *customdocumentid_;
}
inline void DocumentTransformation::set_customdocumentid(const ::std::string& value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set:Diadoc.Api.Proto.Events.DocumentTransformation.CustomDocumentId)
}
inline void DocumentTransformation::set_customdocumentid(const char* value) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Diadoc.Api.Proto.Events.DocumentTransformation.CustomDocumentId)
}
inline void DocumentTransformation::set_customdocumentid(const char* value, size_t size) {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  customdocumentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Diadoc.Api.Proto.Events.DocumentTransformation.CustomDocumentId)
}
inline ::std::string* DocumentTransformation::mutable_customdocumentid() {
  set_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customdocumentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Diadoc.Api.Proto.Events.DocumentTransformation.CustomDocumentId)
  return customdocumentid_;
}
inline ::std::string* DocumentTransformation::release_customdocumentid() {
  clear_has_customdocumentid();
  if (customdocumentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customdocumentid_;
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DocumentTransformation::set_allocated_customdocumentid(::std::string* customdocumentid) {
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (customdocumentid) {
    set_has_customdocumentid();
    customdocumentid_ = customdocumentid;
  } else {
    clear_has_customdocumentid();
    customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Diadoc.Api.Proto.Events.DocumentTransformation.CustomDocumentId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Events
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Diadoc::Api::Proto::Events::CustomDataPatchOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Diadoc::Api::Proto::Events::CustomDataPatchOperation>() {
  return ::Diadoc::Api::Proto::Events::CustomDataPatchOperation_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Events_2fDiadocMessage_2dPostApi_2eproto__INCLUDED
