// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Events/DiadocMessage-PostApi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Events/DiadocMessage-PostApi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Diadoc {
namespace Api {
namespace Proto {
namespace Events {

namespace {

const ::google::protobuf::Descriptor* MessageToPost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageToPost_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncryptedXmlDocumentAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncryptedXmlDocumentAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncryptedInvoiceAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncryptedInvoiceAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncryptedDocumentMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncryptedDocumentMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncryptedXmlBasicDocumentMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncryptedXmlBasicDocumentMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncryptedInvoiceMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncryptedInvoiceMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncryptedInvoiceCorrectionMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncryptedInvoiceCorrectionMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* XmlDocumentAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XmlDocumentAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* NonformalizedAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NonformalizedAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* BasicDocumentAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicDocumentAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Torg13Attachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Torg13Attachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptanceCertificateAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptanceCertificateAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrustConnectionRequestAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrustConnectionRequestAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* StructuredDataAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StructuredDataAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* PriceListAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceListAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconciliationActAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconciliationActAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContractAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContractAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* SupplementaryAgreementAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SupplementaryAgreementAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceDetailsAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceDetailsAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetadataItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetadataItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessagePatchToPost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessagePatchToPost_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignatureVerification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignatureVerification_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionRequestAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRequestAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionRouteAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRouteAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionRequestCancellationAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRequestCancellationAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionRequestDenialCancellationAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRequestDenialCancellationAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionRequestDenialAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRequestDenialAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiptAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiptAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* CorrectionRequestAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CorrectionRequestAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentSignature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentSignature_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentSenderSignature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentSenderSignature_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestedSignatureRejection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestedSignatureRejection_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignedContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DraftToSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DraftToSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareDocumentsToSignRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareDocumentsToSignRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DraftDocumentToPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DraftDocumentToPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentToPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentToPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentToPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentToPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentPatchedContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentPatchedContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareDocumentsToSignResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareDocumentsToSignResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageToSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageToSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* RevocationRequestAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RevocationRequestAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* XmlSignatureRejectionAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XmlSignatureRejectionAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoamingNotificationToPost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoamingNotificationToPost_reflection_ = NULL;
const ::google::protobuf::Descriptor* CustomDataPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CustomDataPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditDocumentPacketCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditDocumentPacketCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolutionRouteRemoval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolutionRouteRemoval_reflection_ = NULL;
const ::google::protobuf::Descriptor* TemplateToPost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TemplateToPost_reflection_ = NULL;
const ::google::protobuf::Descriptor* TemplateDocumentAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TemplateDocumentAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsignedContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsignedContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TemplateTransformationToPost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TemplateTransformationToPost_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentTransformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentTransformation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CustomDataPatchOperation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto() {
  protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Events/DiadocMessage-PostApi.proto");
  GOOGLE_CHECK(file != NULL);
  MessageToPost_descriptor_ = file->message_type(0);
  static const int MessageToPost_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, fromboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, toboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, invoices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, nonformalizeddocuments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, torg12documents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, acceptancecertificates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, structureddataattachments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, proformainvoices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, xmltorg12sellertitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, xmlacceptancecertificatesellertitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, todepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, isdraft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, lockdraft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, strictdraftvalidation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, isinternal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, fromdepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, delaysend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, pricelists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, pricelistagreements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, certificateregistries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, reconciliationacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, contracts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, torg13documents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, servicedetailsdocuments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, proxyboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, proxydepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, encryptedinvoices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, encryptedxmltorg12sellertitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, encryptedxmlacceptancecertificatesellertitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, supplementaryagreements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, lockpacket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, universaltransferdocumentsellertitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, documentattachments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, lockmode_),
  };
  MessageToPost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageToPost_descriptor_,
      MessageToPost::default_instance_,
      MessageToPost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToPost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageToPost));
  EncryptedXmlDocumentAttachment_descriptor_ = file->message_type(1);
  static const int EncryptedXmlDocumentAttachment_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlDocumentAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlDocumentAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlDocumentAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlDocumentAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlDocumentAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlDocumentAttachment, customdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlDocumentAttachment, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlDocumentAttachment, xmlbasicmetadata_),
  };
  EncryptedXmlDocumentAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncryptedXmlDocumentAttachment_descriptor_,
      EncryptedXmlDocumentAttachment::default_instance_,
      EncryptedXmlDocumentAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlDocumentAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlDocumentAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncryptedXmlDocumentAttachment));
  EncryptedInvoiceAttachment_descriptor_ = file->message_type(2);
  static const int EncryptedInvoiceAttachment_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceAttachment, customdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceAttachment, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceAttachment, invoicemetadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceAttachment, invoicecorrectionmetadata_),
  };
  EncryptedInvoiceAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncryptedInvoiceAttachment_descriptor_,
      EncryptedInvoiceAttachment::default_instance_,
      EncryptedInvoiceAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncryptedInvoiceAttachment));
  EncryptedDocumentMetadata_descriptor_ = file->message_type(3);
  static const int EncryptedDocumentMetadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedDocumentMetadata, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedDocumentMetadata, buyerfnsparticipantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedDocumentMetadata, senderfnsparticipantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedDocumentMetadata, documentdateandnumber_),
  };
  EncryptedDocumentMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncryptedDocumentMetadata_descriptor_,
      EncryptedDocumentMetadata::default_instance_,
      EncryptedDocumentMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedDocumentMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedDocumentMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncryptedDocumentMetadata));
  EncryptedXmlBasicDocumentMetadata_descriptor_ = file->message_type(4);
  static const int EncryptedXmlBasicDocumentMetadata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlBasicDocumentMetadata, formationdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlBasicDocumentMetadata, formationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlBasicDocumentMetadata, documentname_),
  };
  EncryptedXmlBasicDocumentMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncryptedXmlBasicDocumentMetadata_descriptor_,
      EncryptedXmlBasicDocumentMetadata::default_instance_,
      EncryptedXmlBasicDocumentMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlBasicDocumentMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedXmlBasicDocumentMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncryptedXmlBasicDocumentMetadata));
  EncryptedInvoiceMetadata_descriptor_ = file->message_type(5);
  static const int EncryptedInvoiceMetadata_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceMetadata, revisiondateandnumber_),
  };
  EncryptedInvoiceMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncryptedInvoiceMetadata_descriptor_,
      EncryptedInvoiceMetadata::default_instance_,
      EncryptedInvoiceMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncryptedInvoiceMetadata));
  EncryptedInvoiceCorrectionMetadata_descriptor_ = file->message_type(6);
  static const int EncryptedInvoiceCorrectionMetadata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceCorrectionMetadata, originalinvoicedateandnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceCorrectionMetadata, originalinvoicerevisiondateandnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceCorrectionMetadata, invoicecorrectionrevisiondateandnumber_),
  };
  EncryptedInvoiceCorrectionMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncryptedInvoiceCorrectionMetadata_descriptor_,
      EncryptedInvoiceCorrectionMetadata::default_instance_,
      EncryptedInvoiceCorrectionMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceCorrectionMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptedInvoiceCorrectionMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncryptedInvoiceCorrectionMetadata));
  XmlDocumentAttachment_descriptor_ = file->message_type(7);
  static const int XmlDocumentAttachment_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, needreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, customdata_),
  };
  XmlDocumentAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XmlDocumentAttachment_descriptor_,
      XmlDocumentAttachment::default_instance_,
      XmlDocumentAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlDocumentAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XmlDocumentAttachment));
  NonformalizedAttachment_descriptor_ = file->message_type(8);
  static const int NonformalizedAttachment_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, needrecipientsignature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, needreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, customdata_),
  };
  NonformalizedAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NonformalizedAttachment_descriptor_,
      NonformalizedAttachment::default_instance_,
      NonformalizedAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NonformalizedAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NonformalizedAttachment));
  BasicDocumentAttachment_descriptor_ = file->message_type(9);
  static const int BasicDocumentAttachment_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, needreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, customdata_),
  };
  BasicDocumentAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BasicDocumentAttachment_descriptor_,
      BasicDocumentAttachment::default_instance_,
      BasicDocumentAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicDocumentAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BasicDocumentAttachment));
  Torg13Attachment_descriptor_ = file->message_type(10);
  static const int Torg13Attachment_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, needreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, customdata_),
  };
  Torg13Attachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Torg13Attachment_descriptor_,
      Torg13Attachment::default_instance_,
      Torg13Attachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torg13Attachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Torg13Attachment));
  AcceptanceCertificateAttachment_descriptor_ = file->message_type(11);
  static const int AcceptanceCertificateAttachment_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, vat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, grounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, needreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, needrecipientsignature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, customdata_),
  };
  AcceptanceCertificateAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptanceCertificateAttachment_descriptor_,
      AcceptanceCertificateAttachment::default_instance_,
      AcceptanceCertificateAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptanceCertificateAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptanceCertificateAttachment));
  TrustConnectionRequestAttachment_descriptor_ = file->message_type(12);
  static const int TrustConnectionRequestAttachment_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, customdata_),
  };
  TrustConnectionRequestAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrustConnectionRequestAttachment_descriptor_,
      TrustConnectionRequestAttachment::default_instance_,
      TrustConnectionRequestAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrustConnectionRequestAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrustConnectionRequestAttachment));
  StructuredDataAttachment_descriptor_ = file->message_type(13);
  static const int StructuredDataAttachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructuredDataAttachment, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructuredDataAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructuredDataAttachment, parentcustomdocumentid_),
  };
  StructuredDataAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StructuredDataAttachment_descriptor_,
      StructuredDataAttachment::default_instance_,
      StructuredDataAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructuredDataAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StructuredDataAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StructuredDataAttachment));
  PriceListAttachment_descriptor_ = file->message_type(14);
  static const int PriceListAttachment_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, pricelisteffectivedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, contractdocumentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, contractdocumentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, needreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, customdata_),
  };
  PriceListAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceListAttachment_descriptor_,
      PriceListAttachment::default_instance_,
      PriceListAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceListAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceListAttachment));
  ReconciliationActAttachment_descriptor_ = file->message_type(15);
  static const int ReconciliationActAttachment_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, needreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, customdata_),
  };
  ReconciliationActAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconciliationActAttachment_descriptor_,
      ReconciliationActAttachment::default_instance_,
      ReconciliationActAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconciliationActAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconciliationActAttachment));
  ContractAttachment_descriptor_ = file->message_type(16);
  static const int ContractAttachment_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, contractprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, contracttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, needreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, customdata_),
  };
  ContractAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContractAttachment_descriptor_,
      ContractAttachment::default_instance_,
      ContractAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContractAttachment));
  SupplementaryAgreementAttachment_descriptor_ = file->message_type(17);
  static const int SupplementaryAgreementAttachment_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, contractnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, contractdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, contracttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, needreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, customdata_),
  };
  SupplementaryAgreementAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SupplementaryAgreementAttachment_descriptor_,
      SupplementaryAgreementAttachment::default_instance_,
      SupplementaryAgreementAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplementaryAgreementAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SupplementaryAgreementAttachment));
  ServiceDetailsAttachment_descriptor_ = file->message_type(18);
  static const int ServiceDetailsAttachment_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, documentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, documentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, needreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, customdata_),
  };
  ServiceDetailsAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceDetailsAttachment_descriptor_,
      ServiceDetailsAttachment::default_instance_,
      ServiceDetailsAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceDetailsAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceDetailsAttachment));
  DocumentAttachment_descriptor_ = file->message_type(19);
  static const int DocumentAttachment_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, needrecipientsignature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, initialdocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, subordinatedocumentids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, needreceipt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, customdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, typenamedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, workflowid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, isencrypted_),
  };
  DocumentAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentAttachment_descriptor_,
      DocumentAttachment::default_instance_,
      DocumentAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentAttachment));
  MetadataItem_descriptor_ = file->message_type(20);
  static const int MetadataItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataItem, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataItem, value_),
  };
  MetadataItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetadataItem_descriptor_,
      MetadataItem::default_instance_,
      MetadataItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetadataItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetadataItem));
  MessagePatchToPost_descriptor_ = file->message_type(21);
  static const int MessagePatchToPost_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, receipts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, correctionrequests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, signatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, requestedsignaturerejections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, xmltorg12buyertitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, xmlacceptancecertificatebuyertitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, resolutions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, resolutionrequests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, resolutionrequestcancellations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, resolutionrequestdenials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, resolutionrequestdenialcancellations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, revocationrequests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, xmlsignaturerejections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, customdatapatches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, resolutionrouteassignments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, signatureverifications_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, editdocumentpacketcommands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, universaltransferdocumentbuyertitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, resolutionrouteremovals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, recipienttitles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, editingpatches_),
  };
  MessagePatchToPost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessagePatchToPost_descriptor_,
      MessagePatchToPost::default_instance_,
      MessagePatchToPost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePatchToPost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessagePatchToPost));
  SignatureVerification_descriptor_ = file->message_type(22);
  static const int SignatureVerification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureVerification, initialdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureVerification, isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureVerification, errormessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureVerification, labels_),
  };
  SignatureVerification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignatureVerification_descriptor_,
      SignatureVerification::default_instance_,
      SignatureVerification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureVerification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureVerification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignatureVerification));
  ResolutionRequestAttachment_descriptor_ = file->message_type(23);
  static const int ResolutionRequestAttachment_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, initialdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, targetuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, targetdepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, labels_),
  };
  ResolutionRequestAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRequestAttachment_descriptor_,
      ResolutionRequestAttachment::default_instance_,
      ResolutionRequestAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRequestAttachment));
  ResolutionRouteAssignment_descriptor_ = file->message_type(24);
  static const int ResolutionRouteAssignment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteAssignment, initialdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteAssignment, routeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteAssignment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteAssignment, labels_),
  };
  ResolutionRouteAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRouteAssignment_descriptor_,
      ResolutionRouteAssignment::default_instance_,
      ResolutionRouteAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRouteAssignment));
  ResolutionRequestCancellationAttachment_descriptor_ = file->message_type(25);
  static const int ResolutionRequestCancellationAttachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestCancellationAttachment, initialresolutionrequestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestCancellationAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestCancellationAttachment, labels_),
  };
  ResolutionRequestCancellationAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRequestCancellationAttachment_descriptor_,
      ResolutionRequestCancellationAttachment::default_instance_,
      ResolutionRequestCancellationAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestCancellationAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestCancellationAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRequestCancellationAttachment));
  ResolutionRequestDenialCancellationAttachment_descriptor_ = file->message_type(26);
  static const int ResolutionRequestDenialCancellationAttachment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialCancellationAttachment, initialresolutionrequestdenialid_),
  };
  ResolutionRequestDenialCancellationAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRequestDenialCancellationAttachment_descriptor_,
      ResolutionRequestDenialCancellationAttachment::default_instance_,
      ResolutionRequestDenialCancellationAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialCancellationAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialCancellationAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRequestDenialCancellationAttachment));
  ResolutionRequestDenialAttachment_descriptor_ = file->message_type(27);
  static const int ResolutionRequestDenialAttachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialAttachment, initialresolutionrequestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialAttachment, labels_),
  };
  ResolutionRequestDenialAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRequestDenialAttachment_descriptor_,
      ResolutionRequestDenialAttachment::default_instance_,
      ResolutionRequestDenialAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRequestDenialAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRequestDenialAttachment));
  ResolutionAttachment_descriptor_ = file->message_type(28);
  static const int ResolutionAttachment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionAttachment, initialdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionAttachment, resolutiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionAttachment, labels_),
  };
  ResolutionAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionAttachment_descriptor_,
      ResolutionAttachment::default_instance_,
      ResolutionAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionAttachment));
  ReceiptAttachment_descriptor_ = file->message_type(29);
  static const int ReceiptAttachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptAttachment, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptAttachment, labels_),
  };
  ReceiptAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiptAttachment_descriptor_,
      ReceiptAttachment::default_instance_,
      ReceiptAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiptAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiptAttachment));
  CorrectionRequestAttachment_descriptor_ = file->message_type(30);
  static const int CorrectionRequestAttachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectionRequestAttachment, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectionRequestAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectionRequestAttachment, labels_),
  };
  CorrectionRequestAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CorrectionRequestAttachment_descriptor_,
      CorrectionRequestAttachment::default_instance_,
      CorrectionRequestAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectionRequestAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorrectionRequestAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CorrectionRequestAttachment));
  DocumentSignature_descriptor_ = file->message_type(31);
  static const int DocumentSignature_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, signwithtestsignature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, isapprovementsignature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, signaturenameonshelf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, patchedcontentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, labels_),
  };
  DocumentSignature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentSignature_descriptor_,
      DocumentSignature::default_instance_,
      DocumentSignature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSignature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentSignature));
  DocumentSenderSignature_descriptor_ = file->message_type(32);
  static const int DocumentSenderSignature_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSenderSignature, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSenderSignature, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSenderSignature, signwithtestsignature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSenderSignature, patchedcontentid_),
  };
  DocumentSenderSignature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentSenderSignature_descriptor_,
      DocumentSenderSignature::default_instance_,
      DocumentSenderSignature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSenderSignature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSenderSignature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentSenderSignature));
  RequestedSignatureRejection_descriptor_ = file->message_type(33);
  static const int RequestedSignatureRejection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSignatureRejection, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSignatureRejection, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSignatureRejection, labels_),
  };
  RequestedSignatureRejection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestedSignatureRejection_descriptor_,
      RequestedSignatureRejection::default_instance_,
      RequestedSignatureRejection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSignatureRejection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestedSignatureRejection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestedSignatureRejection));
  SignedContent_descriptor_ = file->message_type(34);
  static const int SignedContent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, nameonshelf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, signwithtestsignature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, signaturenameonshelf_),
  };
  SignedContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedContent_descriptor_,
      SignedContent::default_instance_,
      SignedContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedContent));
  DraftToSend_descriptor_ = file->message_type(35);
  static const int DraftToSend_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, draftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, toboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, todepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, documentsignatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, proxyboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, proxydepartmentid_),
  };
  DraftToSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DraftToSend_descriptor_,
      DraftToSend::default_instance_,
      DraftToSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftToSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DraftToSend));
  PrepareDocumentsToSignRequest_descriptor_ = file->message_type(36);
  static const int PrepareDocumentsToSignRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareDocumentsToSignRequest, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareDocumentsToSignRequest, draftdocuments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareDocumentsToSignRequest, documents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareDocumentsToSignRequest, contents_),
  };
  PrepareDocumentsToSignRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepareDocumentsToSignRequest_descriptor_,
      PrepareDocumentsToSignRequest::default_instance_,
      PrepareDocumentsToSignRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareDocumentsToSignRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareDocumentsToSignRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepareDocumentsToSignRequest));
  DraftDocumentToPatch_descriptor_ = file->message_type(37);
  static const int DraftDocumentToPatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftDocumentToPatch, documentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftDocumentToPatch, toboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftDocumentToPatch, signer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftDocumentToPatch, extendedsigner_),
  };
  DraftDocumentToPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DraftDocumentToPatch_descriptor_,
      DraftDocumentToPatch::default_instance_,
      DraftDocumentToPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftDocumentToPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DraftDocumentToPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DraftDocumentToPatch));
  ContentToPatch_descriptor_ = file->message_type(38);
  static const int ContentToPatch_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentToPatch, typenamedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentToPatch, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentToPatch, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentToPatch, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentToPatch, toboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentToPatch, signer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentToPatch, extendedsigner_),
  };
  ContentToPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentToPatch_descriptor_,
      ContentToPatch::default_instance_,
      ContentToPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentToPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentToPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentToPatch));
  DocumentToPatch_descriptor_ = file->message_type(39);
  static const int DocumentToPatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentToPatch, documentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentToPatch, signer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentToPatch, extendedsigner_),
  };
  DocumentToPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentToPatch_descriptor_,
      DocumentToPatch::default_instance_,
      DocumentToPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentToPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentToPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentToPatch));
  DocumentPatchedContent_descriptor_ = file->message_type(40);
  static const int DocumentPatchedContent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPatchedContent, documentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPatchedContent, patchedcontentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPatchedContent, content_),
  };
  DocumentPatchedContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentPatchedContent_descriptor_,
      DocumentPatchedContent::default_instance_,
      DocumentPatchedContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPatchedContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentPatchedContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentPatchedContent));
  PrepareDocumentsToSignResponse_descriptor_ = file->message_type(41);
  static const int PrepareDocumentsToSignResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareDocumentsToSignResponse, documentpatchedcontents_),
  };
  PrepareDocumentsToSignResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepareDocumentsToSignResponse_descriptor_,
      PrepareDocumentsToSignResponse::default_instance_,
      PrepareDocumentsToSignResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareDocumentsToSignResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareDocumentsToSignResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepareDocumentsToSignResponse));
  MessageToSend_descriptor_ = file->message_type(42);
  static const int MessageToSend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, documentsignatures_),
  };
  MessageToSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageToSend_descriptor_,
      MessageToSend::default_instance_,
      MessageToSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageToSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageToSend));
  RevocationRequestAttachment_descriptor_ = file->message_type(43);
  static const int RevocationRequestAttachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestAttachment, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestAttachment, labels_),
  };
  RevocationRequestAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RevocationRequestAttachment_descriptor_,
      RevocationRequestAttachment::default_instance_,
      RevocationRequestAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevocationRequestAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RevocationRequestAttachment));
  XmlSignatureRejectionAttachment_descriptor_ = file->message_type(44);
  static const int XmlSignatureRejectionAttachment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlSignatureRejectionAttachment, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlSignatureRejectionAttachment, signedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlSignatureRejectionAttachment, labels_),
  };
  XmlSignatureRejectionAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XmlSignatureRejectionAttachment_descriptor_,
      XmlSignatureRejectionAttachment::default_instance_,
      XmlSignatureRejectionAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlSignatureRejectionAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XmlSignatureRejectionAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XmlSignatureRejectionAttachment));
  RoamingNotificationToPost_descriptor_ = file->message_type(45);
  static const int RoamingNotificationToPost_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoamingNotificationToPost, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoamingNotificationToPost, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoamingNotificationToPost, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoamingNotificationToPost, description_),
  };
  RoamingNotificationToPost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoamingNotificationToPost_descriptor_,
      RoamingNotificationToPost::default_instance_,
      RoamingNotificationToPost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoamingNotificationToPost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoamingNotificationToPost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoamingNotificationToPost));
  CustomDataPatch_descriptor_ = file->message_type(46);
  static const int CustomDataPatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDataPatch, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDataPatch, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDataPatch, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDataPatch, value_),
  };
  CustomDataPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CustomDataPatch_descriptor_,
      CustomDataPatch::default_instance_,
      CustomDataPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDataPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDataPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CustomDataPatch));
  EditDocumentPacketCommand_descriptor_ = file->message_type(47);
  static const int EditDocumentPacketCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditDocumentPacketCommand, documentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditDocumentPacketCommand, adddocumentstopacket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditDocumentPacketCommand, removedocumentsfrompacket_),
  };
  EditDocumentPacketCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditDocumentPacketCommand_descriptor_,
      EditDocumentPacketCommand::default_instance_,
      EditDocumentPacketCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditDocumentPacketCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditDocumentPacketCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditDocumentPacketCommand));
  ResolutionRouteRemoval_descriptor_ = file->message_type(48);
  static const int ResolutionRouteRemoval_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteRemoval, parententityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteRemoval, routeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteRemoval, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteRemoval, labels_),
  };
  ResolutionRouteRemoval_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolutionRouteRemoval_descriptor_,
      ResolutionRouteRemoval::default_instance_,
      ResolutionRouteRemoval_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteRemoval, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolutionRouteRemoval, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolutionRouteRemoval));
  TemplateToPost_descriptor_ = file->message_type(49);
  static const int TemplateToPost_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateToPost, fromboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateToPost, toboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateToPost, messagefromboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateToPost, messagetoboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateToPost, messagetodepartmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateToPost, documentattachments_),
  };
  TemplateToPost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TemplateToPost_descriptor_,
      TemplateToPost::default_instance_,
      TemplateToPost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateToPost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateToPost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TemplateToPost));
  TemplateDocumentAttachment_descriptor_ = file->message_type(50);
  static const int TemplateDocumentAttachment_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateDocumentAttachment, unsignedcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateDocumentAttachment, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateDocumentAttachment, typenamedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateDocumentAttachment, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateDocumentAttachment, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateDocumentAttachment, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateDocumentAttachment, workflowid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateDocumentAttachment, customdocumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateDocumentAttachment, editingsettingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateDocumentAttachment, needrecipientsignature_),
  };
  TemplateDocumentAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TemplateDocumentAttachment_descriptor_,
      TemplateDocumentAttachment::default_instance_,
      TemplateDocumentAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateDocumentAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateDocumentAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TemplateDocumentAttachment));
  UnsignedContent_descriptor_ = file->message_type(51);
  static const int UnsignedContent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsignedContent, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsignedContent, nameonshelf_),
  };
  UnsignedContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsignedContent_descriptor_,
      UnsignedContent::default_instance_,
      UnsignedContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsignedContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsignedContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsignedContent));
  TemplateTransformationToPost_descriptor_ = file->message_type(52);
  static const int TemplateTransformationToPost_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateTransformationToPost, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateTransformationToPost, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateTransformationToPost, documenttransformations_),
  };
  TemplateTransformationToPost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TemplateTransformationToPost_descriptor_,
      TemplateTransformationToPost::default_instance_,
      TemplateTransformationToPost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateTransformationToPost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateTransformationToPost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TemplateTransformationToPost));
  DocumentTransformation_descriptor_ = file->message_type(53);
  static const int DocumentTransformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTransformation, documentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTransformation, customdocumentid_),
  };
  DocumentTransformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentTransformation_descriptor_,
      DocumentTransformation::default_instance_,
      DocumentTransformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTransformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentTransformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentTransformation));
  CustomDataPatchOperation_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Events_2fDiadocMessage_2dPostApi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageToPost_descriptor_, &MessageToPost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncryptedXmlDocumentAttachment_descriptor_, &EncryptedXmlDocumentAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncryptedInvoiceAttachment_descriptor_, &EncryptedInvoiceAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncryptedDocumentMetadata_descriptor_, &EncryptedDocumentMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncryptedXmlBasicDocumentMetadata_descriptor_, &EncryptedXmlBasicDocumentMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncryptedInvoiceMetadata_descriptor_, &EncryptedInvoiceMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncryptedInvoiceCorrectionMetadata_descriptor_, &EncryptedInvoiceCorrectionMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XmlDocumentAttachment_descriptor_, &XmlDocumentAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NonformalizedAttachment_descriptor_, &NonformalizedAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BasicDocumentAttachment_descriptor_, &BasicDocumentAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Torg13Attachment_descriptor_, &Torg13Attachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptanceCertificateAttachment_descriptor_, &AcceptanceCertificateAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrustConnectionRequestAttachment_descriptor_, &TrustConnectionRequestAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StructuredDataAttachment_descriptor_, &StructuredDataAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceListAttachment_descriptor_, &PriceListAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconciliationActAttachment_descriptor_, &ReconciliationActAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContractAttachment_descriptor_, &ContractAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SupplementaryAgreementAttachment_descriptor_, &SupplementaryAgreementAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceDetailsAttachment_descriptor_, &ServiceDetailsAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentAttachment_descriptor_, &DocumentAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetadataItem_descriptor_, &MetadataItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessagePatchToPost_descriptor_, &MessagePatchToPost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignatureVerification_descriptor_, &SignatureVerification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRequestAttachment_descriptor_, &ResolutionRequestAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRouteAssignment_descriptor_, &ResolutionRouteAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRequestCancellationAttachment_descriptor_, &ResolutionRequestCancellationAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRequestDenialCancellationAttachment_descriptor_, &ResolutionRequestDenialCancellationAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRequestDenialAttachment_descriptor_, &ResolutionRequestDenialAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionAttachment_descriptor_, &ResolutionAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiptAttachment_descriptor_, &ReceiptAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CorrectionRequestAttachment_descriptor_, &CorrectionRequestAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentSignature_descriptor_, &DocumentSignature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentSenderSignature_descriptor_, &DocumentSenderSignature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestedSignatureRejection_descriptor_, &RequestedSignatureRejection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedContent_descriptor_, &SignedContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DraftToSend_descriptor_, &DraftToSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepareDocumentsToSignRequest_descriptor_, &PrepareDocumentsToSignRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DraftDocumentToPatch_descriptor_, &DraftDocumentToPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentToPatch_descriptor_, &ContentToPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentToPatch_descriptor_, &DocumentToPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentPatchedContent_descriptor_, &DocumentPatchedContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepareDocumentsToSignResponse_descriptor_, &PrepareDocumentsToSignResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageToSend_descriptor_, &MessageToSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RevocationRequestAttachment_descriptor_, &RevocationRequestAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XmlSignatureRejectionAttachment_descriptor_, &XmlSignatureRejectionAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoamingNotificationToPost_descriptor_, &RoamingNotificationToPost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CustomDataPatch_descriptor_, &CustomDataPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditDocumentPacketCommand_descriptor_, &EditDocumentPacketCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolutionRouteRemoval_descriptor_, &ResolutionRouteRemoval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TemplateToPost_descriptor_, &TemplateToPost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TemplateDocumentAttachment_descriptor_, &TemplateDocumentAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsignedContent_descriptor_, &UnsignedContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TemplateTransformationToPost_descriptor_, &TemplateTransformationToPost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentTransformation_descriptor_, &DocumentTransformation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto() {
  delete MessageToPost::default_instance_;
  delete MessageToPost_reflection_;
  delete EncryptedXmlDocumentAttachment::default_instance_;
  delete EncryptedXmlDocumentAttachment_reflection_;
  delete EncryptedInvoiceAttachment::default_instance_;
  delete EncryptedInvoiceAttachment_reflection_;
  delete EncryptedDocumentMetadata::default_instance_;
  delete EncryptedDocumentMetadata_reflection_;
  delete EncryptedXmlBasicDocumentMetadata::default_instance_;
  delete EncryptedXmlBasicDocumentMetadata_reflection_;
  delete EncryptedInvoiceMetadata::default_instance_;
  delete EncryptedInvoiceMetadata_reflection_;
  delete EncryptedInvoiceCorrectionMetadata::default_instance_;
  delete EncryptedInvoiceCorrectionMetadata_reflection_;
  delete XmlDocumentAttachment::default_instance_;
  delete XmlDocumentAttachment_reflection_;
  delete NonformalizedAttachment::default_instance_;
  delete NonformalizedAttachment_reflection_;
  delete BasicDocumentAttachment::default_instance_;
  delete BasicDocumentAttachment_reflection_;
  delete Torg13Attachment::default_instance_;
  delete Torg13Attachment_reflection_;
  delete AcceptanceCertificateAttachment::default_instance_;
  delete AcceptanceCertificateAttachment_reflection_;
  delete TrustConnectionRequestAttachment::default_instance_;
  delete TrustConnectionRequestAttachment_reflection_;
  delete StructuredDataAttachment::default_instance_;
  delete StructuredDataAttachment_reflection_;
  delete PriceListAttachment::default_instance_;
  delete PriceListAttachment_reflection_;
  delete ReconciliationActAttachment::default_instance_;
  delete ReconciliationActAttachment_reflection_;
  delete ContractAttachment::default_instance_;
  delete ContractAttachment_reflection_;
  delete SupplementaryAgreementAttachment::default_instance_;
  delete SupplementaryAgreementAttachment_reflection_;
  delete ServiceDetailsAttachment::default_instance_;
  delete ServiceDetailsAttachment_reflection_;
  delete DocumentAttachment::default_instance_;
  delete DocumentAttachment_reflection_;
  delete MetadataItem::default_instance_;
  delete MetadataItem_reflection_;
  delete MessagePatchToPost::default_instance_;
  delete MessagePatchToPost_reflection_;
  delete SignatureVerification::default_instance_;
  delete SignatureVerification_reflection_;
  delete ResolutionRequestAttachment::default_instance_;
  delete ResolutionRequestAttachment_reflection_;
  delete ResolutionRouteAssignment::default_instance_;
  delete ResolutionRouteAssignment_reflection_;
  delete ResolutionRequestCancellationAttachment::default_instance_;
  delete ResolutionRequestCancellationAttachment_reflection_;
  delete ResolutionRequestDenialCancellationAttachment::default_instance_;
  delete ResolutionRequestDenialCancellationAttachment_reflection_;
  delete ResolutionRequestDenialAttachment::default_instance_;
  delete ResolutionRequestDenialAttachment_reflection_;
  delete ResolutionAttachment::default_instance_;
  delete ResolutionAttachment_reflection_;
  delete ReceiptAttachment::default_instance_;
  delete ReceiptAttachment_reflection_;
  delete CorrectionRequestAttachment::default_instance_;
  delete CorrectionRequestAttachment_reflection_;
  delete DocumentSignature::default_instance_;
  delete DocumentSignature_reflection_;
  delete DocumentSenderSignature::default_instance_;
  delete DocumentSenderSignature_reflection_;
  delete RequestedSignatureRejection::default_instance_;
  delete RequestedSignatureRejection_reflection_;
  delete SignedContent::default_instance_;
  delete SignedContent_reflection_;
  delete DraftToSend::default_instance_;
  delete DraftToSend_reflection_;
  delete PrepareDocumentsToSignRequest::default_instance_;
  delete PrepareDocumentsToSignRequest_reflection_;
  delete DraftDocumentToPatch::default_instance_;
  delete DraftDocumentToPatch_reflection_;
  delete ContentToPatch::default_instance_;
  delete ContentToPatch_reflection_;
  delete DocumentToPatch::default_instance_;
  delete DocumentToPatch_reflection_;
  delete DocumentPatchedContent::default_instance_;
  delete DocumentPatchedContent_reflection_;
  delete PrepareDocumentsToSignResponse::default_instance_;
  delete PrepareDocumentsToSignResponse_reflection_;
  delete MessageToSend::default_instance_;
  delete MessageToSend_reflection_;
  delete RevocationRequestAttachment::default_instance_;
  delete RevocationRequestAttachment_reflection_;
  delete XmlSignatureRejectionAttachment::default_instance_;
  delete XmlSignatureRejectionAttachment_reflection_;
  delete RoamingNotificationToPost::default_instance_;
  delete RoamingNotificationToPost_reflection_;
  delete CustomDataPatch::default_instance_;
  delete CustomDataPatch_reflection_;
  delete EditDocumentPacketCommand::default_instance_;
  delete EditDocumentPacketCommand_reflection_;
  delete ResolutionRouteRemoval::default_instance_;
  delete ResolutionRouteRemoval_reflection_;
  delete TemplateToPost::default_instance_;
  delete TemplateToPost_reflection_;
  delete TemplateDocumentAttachment::default_instance_;
  delete TemplateDocumentAttachment_reflection_;
  delete UnsignedContent::default_instance_;
  delete UnsignedContent_reflection_;
  delete TemplateTransformationToPost::default_instance_;
  delete TemplateTransformationToPost_reflection_;
  delete DocumentTransformation::default_instance_;
  delete DocumentTransformation_reflection_;
}

void protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Diadoc::Api::Proto::protobuf_AddDesc_DocumentId_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_CustomDataItem_2eproto();
  ::Diadoc::Api::Proto::protobuf_AddDesc_LockMode_2eproto();
  ::Diadoc::Api::Proto::Invoicing::protobuf_AddDesc_Invoicing_2fSigner_2eproto();
  ::Diadoc::Api::Proto::Invoicing::Signers::protobuf_AddDesc_Invoicing_2fExtendedSigner_2eproto();
  ::Diadoc::Api::Proto::Events::protobuf_AddDesc_Events_2fResolutionInfo_2eproto();
  ::Diadoc::Api::Proto::Events::protobuf_AddDesc_Events_2fResolutionRequestInfo_2eproto();
  ::Diadoc::Api::Proto::Invoicing::protobuf_AddDesc_Invoicing_2fOrganizationInfo_2eproto();
  ::Diadoc::Api::Proto::Docflow::protobuf_AddDesc_Docflow_2fDocumentInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"Events/DiadocMessage-PostApi.proto\022\027Di"
    "adoc.Api.Proto.Events\032\020DocumentId.proto\032"
    "\024CustomDataItem.proto\032\016LockMode.proto\032\026I"
    "nvoicing/Signer.proto\032\036Invoicing/Extende"
    "dSigner.proto\032\033Events/ResolutionInfo.pro"
    "to\032\"Events/ResolutionRequestInfo.proto\032 "
    "Invoicing/OrganizationInfo.proto\032\032Docflo"
    "w/DocumentInfo.proto\"\251\020\n\rMessageToPost\022\021"
    "\n\tFromBoxId\030\001 \002(\t\022\017\n\007ToBoxId\030\002 \001(\t\022@\n\010In"
    "voices\030\003 \003(\0132..Diadoc.Api.Proto.Events.X"
    "mlDocumentAttachment\022P\n\026NonformalizedDoc"
    "uments\030\004 \003(\01320.Diadoc.Api.Proto.Events.N"
    "onformalizedAttachment\022I\n\017Torg12Document"
    "s\030\005 \003(\01320.Diadoc.Api.Proto.Events.BasicD"
    "ocumentAttachment\022X\n\026AcceptanceCertifica"
    "tes\030\007 \003(\01328.Diadoc.Api.Proto.Events.Acce"
    "ptanceCertificateAttachment\022T\n\031Structure"
    "dDataAttachments\030\010 \003(\01321.Diadoc.Api.Prot"
    "o.Events.StructuredDataAttachment\022J\n\020Pro"
    "formaInvoices\030\t \003(\01320.Diadoc.Api.Proto.E"
    "vents.BasicDocumentAttachment\022M\n\025XmlTorg"
    "12SellerTitles\030\n \003(\0132..Diadoc.Api.Proto."
    "Events.XmlDocumentAttachment\022\\\n$XmlAccep"
    "tanceCertificateSellerTitles\030\013 \003(\0132..Dia"
    "doc.Api.Proto.Events.XmlDocumentAttachme"
    "nt\022\026\n\016ToDepartmentId\030\014 \001(\t\022\026\n\007IsDraft\030\r "
    "\001(\010:\005false\022\030\n\tLockDraft\030\016 \001(\010:\005false\022#\n\025"
    "StrictDraftValidation\030\017 \001(\010:\004true\022\031\n\nIsI"
    "nternal\030\020 \001(\010:\005false\022\030\n\020FromDepartmentId"
    "\030\021 \001(\t\022\030\n\tDelaySend\030\022 \001(\010:\005false\022@\n\nPric"
    "eLists\030\023 \003(\0132,.Diadoc.Api.Proto.Events.P"
    "riceListAttachment\022M\n\023PriceListAgreement"
    "s\030\024 \003(\01320.Diadoc.Api.Proto.Events.Nonfor"
    "malizedAttachment\022O\n\025CertificateRegistri"
    "es\030\025 \003(\01320.Diadoc.Api.Proto.Events.Nonfo"
    "rmalizedAttachment\022P\n\022ReconciliationActs"
    "\030\026 \003(\01324.Diadoc.Api.Proto.Events.Reconci"
    "liationActAttachment\022>\n\tContracts\030\027 \003(\0132"
    "+.Diadoc.Api.Proto.Events.ContractAttach"
    "ment\022B\n\017Torg13Documents\030\030 \003(\0132).Diadoc.A"
    "pi.Proto.Events.Torg13Attachment\022R\n\027Serv"
    "iceDetailsDocuments\030\031 \003(\01321.Diadoc.Api.P"
    "roto.Events.ServiceDetailsAttachment\022\022\n\n"
    "ProxyBoxId\030\032 \001(\t\022\031\n\021ProxyDepartmentId\030\033 "
    "\001(\t\022N\n\021EncryptedInvoices\030\034 \003(\01323.Diadoc."
    "Api.Proto.Events.EncryptedInvoiceAttachm"
    "ent\022_\n\036EncryptedXmlTorg12SellerTitles\030\035 "
    "\003(\01327.Diadoc.Api.Proto.Events.EncryptedX"
    "mlDocumentAttachment\022n\n-EncryptedXmlAcce"
    "ptanceCertificateSellerTitles\030\036 \003(\01327.Di"
    "adoc.Api.Proto.Events.EncryptedXmlDocume"
    "ntAttachment\022Z\n\027SupplementaryAgreements\030"
    "\037 \003(\01329.Diadoc.Api.Proto.Events.Suppleme"
    "ntaryAgreementAttachment\022\031\n\nLockPacket\030 "
    " \001(\010:\005false\022]\n%UniversalTransferDocument"
    "SellerTitles\030! \003(\0132..Diadoc.Api.Proto.Ev"
    "ents.XmlDocumentAttachment\022H\n\023DocumentAt"
    "tachments\030\" \003(\0132+.Diadoc.Api.Proto.Event"
    "s.DocumentAttachment\0222\n\010LockMode\030# \001(\0162\032"
    ".Diadoc.Api.Proto.LockMode:\004None\"\324\003\n\036Enc"
    "ryptedXmlDocumentAttachment\022=\n\rSignedCon"
    "tent\030\001 \002(\0132&.Diadoc.Api.Proto.Events.Sig"
    "nedContent\022\017\n\007Comment\030\003 \001(\t\0228\n\022InitialDo"
    "cumentIds\030\004 \003(\0132\034.Diadoc.Api.Proto.Docum"
    "entId\022<\n\026SubordinateDocumentIds\030\005 \003(\0132\034."
    "Diadoc.Api.Proto.DocumentId\022\030\n\020CustomDoc"
    "umentId\030\006 \001(\t\0224\n\nCustomData\030\007 \003(\0132 .Diad"
    "oc.Api.Proto.CustomDataItem\022D\n\010Metadata\030"
    "\010 \002(\01322.Diadoc.Api.Proto.Events.Encrypte"
    "dDocumentMetadata\022T\n\020XmlBasicMetadata\030\t "
    "\002(\0132:.Diadoc.Api.Proto.Events.EncryptedX"
    "mlBasicDocumentMetadata\"\246\004\n\032EncryptedInv"
    "oiceAttachment\022=\n\rSignedContent\030\001 \002(\0132&."
    "Diadoc.Api.Proto.Events.SignedContent\022\017\n"
    "\007Comment\030\003 \001(\t\0228\n\022InitialDocumentIds\030\004 \003"
    "(\0132\034.Diadoc.Api.Proto.DocumentId\022<\n\026Subo"
    "rdinateDocumentIds\030\005 \003(\0132\034.Diadoc.Api.Pr"
    "oto.DocumentId\022\030\n\020CustomDocumentId\030\006 \001(\t"
    "\0224\n\nCustomData\030\007 \003(\0132 .Diadoc.Api.Proto."
    "CustomDataItem\022D\n\010Metadata\030\010 \002(\01322.Diado"
    "c.Api.Proto.Events.EncryptedDocumentMeta"
    "data\022J\n\017InvoiceMetadata\030\t \001(\01321.Diadoc.A"
    "pi.Proto.Events.EncryptedInvoiceMetadata"
    "\022^\n\031InvoiceCorrectionMetadata\030\n \001(\0132;.Di"
    "adoc.Api.Proto.Events.EncryptedInvoiceCo"
    "rrectionMetadata\"\272\001\n\031EncryptedDocumentMe"
    "tadata\022\016\n\006FileId\030\001 \002(\t\022\035\n\025BuyerFnsPartic"
    "ipantId\030\002 \002(\t\022\036\n\026SenderFnsParticipantId\030"
    "\003 \002(\t\022N\n\025DocumentDateAndNumber\030\004 \002(\0132/.D"
    "iadoc.Api.Proto.Docflow.DocumentDateAndN"
    "umber\"g\n!EncryptedXmlBasicDocumentMetada"
    "ta\022\025\n\rFormationDate\030\001 \002(\t\022\025\n\rFormationTi"
    "me\030\002 \002(\t\022\024\n\014DocumentName\030\003 \001(\t\"j\n\030Encryp"
    "tedInvoiceMetadata\022N\n\025RevisionDateAndNum"
    "ber\030\001 \001(\0132/.Diadoc.Api.Proto.Docflow.Doc"
    "umentDateAndNumber\"\273\002\n\"EncryptedInvoiceC"
    "orrectionMetadata\022U\n\034OriginalInvoiceDate"
    "AndNumber\030\001 \002(\0132/.Diadoc.Api.Proto.Docfl"
    "ow.DocumentDateAndNumber\022]\n$OriginalInvo"
    "iceRevisionDateAndNumber\030\002 \001(\0132/.Diadoc."
    "Api.Proto.Docflow.DocumentDateAndNumber\022"
    "_\n&InvoiceCorrectionRevisionDateAndNumbe"
    "r\030\003 \001(\0132/.Diadoc.Api.Proto.Docflow.Docum"
    "entDateAndNumber\"\313\002\n\025XmlDocumentAttachme"
    "nt\022=\n\rSignedContent\030\001 \002(\0132&.Diadoc.Api.P"
    "roto.Events.SignedContent\022\017\n\007Comment\030\003 \001"
    "(\t\0228\n\022InitialDocumentIds\030\004 \003(\0132\034.Diadoc."
    "Api.Proto.DocumentId\022<\n\026SubordinateDocum"
    "entIds\030\005 \003(\0132\034.Diadoc.Api.Proto.Document"
    "Id\022\030\n\020CustomDocumentId\030\006 \001(\t\022\032\n\013NeedRece"
    "ipt\030\007 \001(\010:\005false\0224\n\nCustomData\030\010 \003(\0132 .D"
    "iadoc.Api.Proto.CustomDataItem\"\264\003\n\027Nonfo"
    "rmalizedAttachment\022=\n\rSignedContent\030\001 \002("
    "\0132&.Diadoc.Api.Proto.Events.SignedConten"
    "t\022\020\n\010FileName\030\002 \002(\t\022\017\n\007Comment\030\003 \001(\t\022%\n\026"
    "NeedRecipientSignature\030\004 \001(\010:\005false\0228\n\022I"
    "nitialDocumentIds\030\005 \003(\0132\034.Diadoc.Api.Pro"
    "to.DocumentId\022<\n\026SubordinateDocumentIds\030"
    "\006 \003(\0132\034.Diadoc.Api.Proto.DocumentId\022\024\n\014D"
    "ocumentDate\030\007 \001(\t\022\026\n\016DocumentNumber\030\010 \001("
    "\t\022\030\n\020CustomDocumentId\030\t \001(\t\022\032\n\013NeedRecei"
    "pt\030\n \001(\010:\005false\0224\n\nCustomData\030\013 \003(\0132 .Di"
    "adoc.Api.Proto.CustomDataItem\"\272\003\n\027BasicD"
    "ocumentAttachment\022=\n\rSignedContent\030\001 \002(\013"
    "2&.Diadoc.Api.Proto.Events.SignedContent"
    "\022\020\n\010FileName\030\002 \002(\t\022\017\n\007Comment\030\003 \001(\t\0228\n\022I"
    "nitialDocumentIds\030\004 \003(\0132\034.Diadoc.Api.Pro"
    "to.DocumentId\022<\n\026SubordinateDocumentIds\030"
    "\005 \003(\0132\034.Diadoc.Api.Proto.DocumentId\022\024\n\014D"
    "ocumentDate\030\006 \002(\t\022\026\n\016DocumentNumber\030\007 \002("
    "\t\022\r\n\005Total\030\010 \002(\t\022\030\n\020CustomDocumentId\030\t \001"
    "(\t\022\013\n\003Vat\030\n \001(\t\022\017\n\007Grounds\030\013 \001(\t\022\032\n\013Need"
    "Receipt\030\014 \001(\010:\005false\0224\n\nCustomData\030\r \003(\013"
    "2 .Diadoc.Api.Proto.CustomDataItem\"\246\003\n\020T"
    "org13Attachment\022=\n\rSignedContent\030\001 \002(\0132&"
    ".Diadoc.Api.Proto.Events.SignedContent\022\020"
    "\n\010FileName\030\002 \002(\t\022\017\n\007Comment\030\003 \001(\t\0228\n\022Ini"
    "tialDocumentIds\030\004 \003(\0132\034.Diadoc.Api.Proto"
    ".DocumentId\022<\n\026SubordinateDocumentIds\030\005 "
    "\003(\0132\034.Diadoc.Api.Proto.DocumentId\022\024\n\014Doc"
    "umentDate\030\006 \002(\t\022\026\n\016DocumentNumber\030\007 \002(\t\022"
    "\r\n\005Total\030\010 \002(\t\022\030\n\020CustomDocumentId\030\t \001(\t"
    "\022\017\n\007Grounds\030\013 \001(\t\022\032\n\013NeedReceipt\030\014 \001(\010:\005"
    "false\0224\n\nCustomData\030\r \003(\0132 .Diadoc.Api.P"
    "roto.CustomDataItem\"\352\003\n\037AcceptanceCertif"
    "icateAttachment\022=\n\rSignedContent\030\001 \002(\0132&"
    ".Diadoc.Api.Proto.Events.SignedContent\022\020"
    "\n\010FileName\030\002 \002(\t\022\017\n\007Comment\030\003 \001(\t\0228\n\022Ini"
    "tialDocumentIds\030\004 \003(\0132\034.Diadoc.Api.Proto"
    ".DocumentId\022<\n\026SubordinateDocumentIds\030\005 "
    "\003(\0132\034.Diadoc.Api.Proto.DocumentId\022\024\n\014Doc"
    "umentDate\030\006 \002(\t\022\030\n\016DocumentNumber\030\007 \001(\t:"
    "\000\022\r\n\005Total\030\010 \002(\t\022\030\n\020CustomDocumentId\030\t \001"
    "(\t\022\013\n\003Vat\030\n \001(\t\022\017\n\007Grounds\030\013 \001(\t\022\032\n\013Need"
    "Receipt\030\014 \001(\010:\005false\022$\n\026NeedRecipientSig"
    "nature\030\r \001(\010:\004true\0224\n\nCustomData\030\016 \003(\0132 "
    ".Diadoc.Api.Proto.CustomDataItem\"\324\001\n Tru"
    "stConnectionRequestAttachment\022=\n\rSignedC"
    "ontent\030\001 \002(\0132&.Diadoc.Api.Proto.Events.S"
    "ignedContent\022\020\n\010FileName\030\002 \002(\t\022\017\n\007Commen"
    "t\030\003 \001(\t\022\030\n\020CustomDocumentId\030\004 \001(\t\0224\n\nCus"
    "tomData\030\005 \003(\0132 .Diadoc.Api.Proto.CustomD"
    "ataItem\"]\n\030StructuredDataAttachment\022\017\n\007C"
    "ontent\030\001 \002(\014\022\020\n\010FileName\030\002 \002(\t\022\036\n\026Parent"
    "CustomDocumentId\030\003 \002(\t\"\347\003\n\023PriceListAtta"
    "chment\022=\n\rSignedContent\030\001 \002(\0132&.Diadoc.A"
    "pi.Proto.Events.SignedContent\022\020\n\010FileNam"
    "e\030\002 \002(\t\022\017\n\007Comment\030\003 \001(\t\0228\n\022InitialDocum"
    "entIds\030\004 \003(\0132\034.Diadoc.Api.Proto.Document"
    "Id\022<\n\026SubordinateDocumentIds\030\005 \003(\0132\034.Dia"
    "doc.Api.Proto.DocumentId\022\030\n\020CustomDocume"
    "ntId\030\006 \001(\t\022\024\n\014DocumentDate\030\007 \002(\t\022\026\n\016Docu"
    "mentNumber\030\010 \002(\t\022\036\n\026PriceListEffectiveDa"
    "te\030\t \002(\t\022\034\n\024ContractDocumentDate\030\n \002(\t\022\036"
    "\n\026ContractDocumentNumber\030\013 \002(\t\022\032\n\013NeedRe"
    "ceipt\030\014 \001(\010:\005false\0224\n\nCustomData\030\r \003(\0132 "
    ".Diadoc.Api.Proto.CustomDataItem\"\223\003\n\033Rec"
    "onciliationActAttachment\022=\n\rSignedConten"
    "t\030\001 \002(\0132&.Diadoc.Api.Proto.Events.Signed"
    "Content\022\020\n\010FileName\030\002 \002(\t\022\017\n\007Comment\030\003 \001"
    "(\t\0228\n\022InitialDocumentIds\030\005 \003(\0132\034.Diadoc."
    "Api.Proto.DocumentId\022<\n\026SubordinateDocum"
    "entIds\030\006 \003(\0132\034.Diadoc.Api.Proto.Document"
    "Id\022\024\n\014DocumentDate\030\007 \002(\t\022\030\n\016DocumentNumb"
    "er\030\010 \001(\t:\000\022\030\n\020CustomDocumentId\030\t \001(\t\022\032\n\013"
    "NeedReceipt\030\n \001(\010:\005false\0224\n\nCustomData\030\013"
    " \003(\0132 .Diadoc.Api.Proto.CustomDataItem\"\265"
    "\003\n\022ContractAttachment\022=\n\rSignedContent\030\001"
    " \002(\0132&.Diadoc.Api.Proto.Events.SignedCon"
    "tent\022\020\n\010FileName\030\002 \002(\t\022\017\n\007Comment\030\003 \001(\t\022"
    "8\n\022InitialDocumentIds\030\004 \003(\0132\034.Diadoc.Api"
    ".Proto.DocumentId\022<\n\026SubordinateDocument"
    "Ids\030\005 \003(\0132\034.Diadoc.Api.Proto.DocumentId\022"
    "\030\n\020CustomDocumentId\030\006 \001(\t\022\024\n\014DocumentDat"
    "e\030\007 \002(\t\022\026\n\016DocumentNumber\030\010 \002(\t\022\025\n\rContr"
    "actPrice\030\t \001(\t\022\024\n\014ContractType\030\n \001(\t\022\032\n\013"
    "NeedReceipt\030\013 \001(\010:\005false\0224\n\nCustomData\030\014"
    " \003(\0132 .Diadoc.Api.Proto.CustomDataItem\"\351"
    "\003\n SupplementaryAgreementAttachment\022=\n\rS"
    "ignedContent\030\001 \002(\0132&.Diadoc.Api.Proto.Ev"
    "ents.SignedContent\022\020\n\010FileName\030\002 \002(\t\022\017\n\007"
    "Comment\030\003 \001(\t\0228\n\022InitialDocumentIds\030\004 \003("
    "\0132\034.Diadoc.Api.Proto.DocumentId\022<\n\026Subor"
    "dinateDocumentIds\030\005 \003(\0132\034.Diadoc.Api.Pro"
    "to.DocumentId\022\030\n\020CustomDocumentId\030\006 \001(\t\022"
    "\024\n\014DocumentDate\030\007 \002(\t\022\026\n\016DocumentNumber\030"
    "\010 \002(\t\022\r\n\005Total\030\t \001(\t\022\026\n\016ContractNumber\030\n"
    " \002(\t\022\024\n\014ContractDate\030\013 \002(\t\022\024\n\014ContractTy"
    "pe\030\014 \001(\t\022\032\n\013NeedReceipt\030\r \001(\010:\005false\0224\n\n"
    "CustomData\030\016 \003(\0132 .Diadoc.Api.Proto.Cust"
    "omDataItem\"\216\003\n\030ServiceDetailsAttachment\022"
    "=\n\rSignedContent\030\001 \002(\0132&.Diadoc.Api.Prot"
    "o.Events.SignedContent\022\020\n\010FileName\030\002 \002(\t"
    "\022\017\n\007Comment\030\003 \001(\t\0228\n\022InitialDocumentIds\030"
    "\005 \003(\0132\034.Diadoc.Api.Proto.DocumentId\022<\n\026S"
    "ubordinateDocumentIds\030\006 \003(\0132\034.Diadoc.Api"
    ".Proto.DocumentId\022\024\n\014DocumentDate\030\007 \001(\t\022"
    "\026\n\016DocumentNumber\030\010 \001(\t\022\030\n\020CustomDocumen"
    "tId\030\t \001(\t\022\032\n\013NeedReceipt\030\n \001(\010:\005false\0224\n"
    "\nCustomData\030\013 \003(\0132 .Diadoc.Api.Proto.Cus"
    "tomDataItem\"\220\004\n\022DocumentAttachment\022=\n\rSi"
    "gnedContent\030\001 \002(\0132&.Diadoc.Api.Proto.Eve"
    "nts.SignedContent\022\017\n\007Comment\030\003 \001(\t\022%\n\026Ne"
    "edRecipientSignature\030\004 \001(\010:\005false\0228\n\022Ini"
    "tialDocumentIds\030\005 \003(\0132\034.Diadoc.Api.Proto"
    ".DocumentId\022<\n\026SubordinateDocumentIds\030\006 "
    "\003(\0132\034.Diadoc.Api.Proto.DocumentId\022\030\n\020Cus"
    "tomDocumentId\030\t \001(\t\022\032\n\013NeedReceipt\030\n \001(\010"
    ":\005false\0224\n\nCustomData\030\013 \003(\0132 .Diadoc.Api"
    ".Proto.CustomDataItem\022\023\n\013TypeNamedId\030\014 \002"
    "(\t\022\020\n\010Function\030\r \001(\t\022\017\n\007Version\030\016 \001(\t\0227\n"
    "\010Metadata\030\017 \003(\0132%.Diadoc.Api.Proto.Event"
    "s.MetadataItem\022\022\n\nWorkflowId\030\020 \001(\005\022\032\n\013Is"
    "Encrypted\030\021 \001(\010:\005false\"*\n\014MetadataItem\022\013"
    "\n\003Key\030\001 \002(\t\022\r\n\005Value\030\002 \002(\t\"\375\r\n\022MessagePa"
    "tchToPost\022\r\n\005BoxId\030\001 \002(\t\022\021\n\tMessageId\030\002 "
    "\002(\t\022<\n\010Receipts\030\003 \003(\0132*.Diadoc.Api.Proto"
    ".Events.ReceiptAttachment\022P\n\022CorrectionR"
    "equests\030\004 \003(\01324.Diadoc.Api.Proto.Events."
    "CorrectionRequestAttachment\022>\n\nSignature"
    "s\030\005 \003(\0132*.Diadoc.Api.Proto.Events.Docume"
    "ntSignature\022Z\n\034RequestedSignatureRejecti"
    "ons\030\006 \003(\01324.Diadoc.Api.Proto.Events.Requ"
    "estedSignatureRejection\022H\n\024XmlTorg12Buye"
    "rTitles\030\007 \003(\0132*.Diadoc.Api.Proto.Events."
    "ReceiptAttachment\022W\n#XmlAcceptanceCertif"
    "icateBuyerTitles\030\010 \003(\0132*.Diadoc.Api.Prot"
    "o.Events.ReceiptAttachment\022B\n\013Resolution"
    "s\030\t \003(\0132-.Diadoc.Api.Proto.Events.Resolu"
    "tionAttachment\022P\n\022ResolutionRequests\030\n \003"
    "(\01324.Diadoc.Api.Proto.Events.ResolutionR"
    "equestAttachment\022h\n\036ResolutionRequestCan"
    "cellations\030\013 \003(\0132@.Diadoc.Api.Proto.Even"
    "ts.ResolutionRequestCancellationAttachme"
    "nt\022\\\n\030ResolutionRequestDenials\030\014 \003(\0132:.D"
    "iadoc.Api.Proto.Events.ResolutionRequest"
    "DenialAttachment\022t\n$ResolutionRequestDen"
    "ialCancellations\030\r \003(\0132F.Diadoc.Api.Prot"
    "o.Events.ResolutionRequestDenialCancella"
    "tionAttachment\022P\n\022RevocationRequests\030\016 \003"
    "(\01324.Diadoc.Api.Proto.Events.RevocationR"
    "equestAttachment\022X\n\026XmlSignatureRejectio"
    "ns\030\017 \003(\01328.Diadoc.Api.Proto.Events.XmlSi"
    "gnatureRejectionAttachment\022C\n\021CustomData"
    "Patches\030\020 \003(\0132(.Diadoc.Api.Proto.Events."
    "CustomDataPatch\022V\n\032ResolutionRouteAssign"
    "ments\030\021 \003(\01322.Diadoc.Api.Proto.Events.Re"
    "solutionRouteAssignment\022N\n\026SignatureVeri"
    "fications\030\022 \003(\0132..Diadoc.Api.Proto.Event"
    "s.SignatureVerification\022V\n\032EditDocumentP"
    "acketCommands\030\023 \003(\01322.Diadoc.Api.Proto.E"
    "vents.EditDocumentPacketCommand\022X\n$Unive"
    "rsalTransferDocumentBuyerTitles\030\024 \003(\0132*."
    "Diadoc.Api.Proto.Events.ReceiptAttachmen"
    "t\022P\n\027ResolutionRouteRemovals\030\025 \003(\0132/.Dia"
    "doc.Api.Proto.Events.ResolutionRouteRemo"
    "val\022C\n\017RecipientTitles\030\026 \003(\0132*.Diadoc.Ap"
    "i.Proto.Events.ReceiptAttachment\022@\n\016Edit"
    "ingPatches\030\027 \003(\0132(.Diadoc.Api.Proto.Even"
    "ts.CustomDataPatch\"i\n\025SignatureVerificat"
    "ion\022\031\n\021InitialDocumentId\030\001 \002(\t\022\017\n\007IsVali"
    "d\030\002 \002(\010\022\024\n\014ErrorMessage\030\003 \001(\t\022\016\n\006Labels\030"
    "\004 \003(\t\"\311\001\n\033ResolutionRequestAttachment\022\031\n"
    "\021InitialDocumentId\030\001 \002(\t\022<\n\004Type\030\002 \002(\0162."
    ".Diadoc.Api.Proto.Events.ResolutionReque"
    "stType\022\024\n\014TargetUserId\030\003 \001(\t\022\032\n\022TargetDe"
    "partmentId\030\004 \001(\t\022\017\n\007Comment\030\005 \001(\t\022\016\n\006Lab"
    "els\030\006 \003(\t\"h\n\031ResolutionRouteAssignment\022\031"
    "\n\021InitialDocumentId\030\001 \002(\t\022\017\n\007RouteId\030\002 \002"
    "(\t\022\017\n\007Comment\030\003 \001(\t\022\016\n\006Labels\030\004 \003(\t\"n\n\'R"
    "esolutionRequestCancellationAttachment\022\""
    "\n\032InitialResolutionRequestId\030\001 \002(\t\022\017\n\007Co"
    "mment\030\002 \001(\t\022\016\n\006Labels\030\003 \003(\t\"Y\n-Resolutio"
    "nRequestDenialCancellationAttachment\022(\n "
    "InitialResolutionRequestDenialId\030\001 \002(\t\"h"
    "\n!ResolutionRequestDenialAttachment\022\"\n\032I"
    "nitialResolutionRequestId\030\001 \002(\t\022\017\n\007Comme"
    "nt\030\002 \001(\t\022\016\n\006Labels\030\003 \003(\t\"\223\001\n\024ResolutionA"
    "ttachment\022\031\n\021InitialDocumentId\030\001 \002(\t\022\?\n\016"
    "ResolutionType\030\002 \002(\0162\'.Diadoc.Api.Proto."
    "Events.ResolutionType\022\017\n\007Comment\030\003 \001(\t\022\016"
    "\n\006Labels\030\004 \003(\t\"z\n\021ReceiptAttachment\022\026\n\016P"
    "arentEntityId\030\001 \002(\t\022=\n\rSignedContent\030\002 \002"
    "(\0132&.Diadoc.Api.Proto.Events.SignedConte"
    "nt\022\016\n\006Labels\030\004 \003(\t\"\204\001\n\033CorrectionRequest"
    "Attachment\022\026\n\016ParentEntityId\030\001 \002(\t\022=\n\rSi"
    "gnedContent\030\002 \002(\0132&.Diadoc.Api.Proto.Eve"
    "nts.SignedContent\022\016\n\006Labels\030\004 \003(\t\"\323\001\n\021Do"
    "cumentSignature\022\026\n\016ParentEntityId\030\001 \002(\t\022"
    "\021\n\tSignature\030\002 \001(\014\022$\n\025SignWithTestSignat"
    "ure\030\004 \001(\010:\005false\022%\n\026IsApprovementSignatu"
    "re\030\005 \001(\010:\005false\022\034\n\024SignatureNameOnShelf\030"
    "\006 \001(\t\022\030\n\020PatchedContentId\030\007 \001(\t\022\016\n\006Label"
    "s\030\010 \003(\t\"\204\001\n\027DocumentSenderSignature\022\026\n\016P"
    "arentEntityId\030\001 \002(\t\022\021\n\tSignature\030\002 \001(\014\022$"
    "\n\025SignWithTestSignature\030\004 \001(\010:\005false\022\030\n\020"
    "PatchedContentId\030\005 \001(\t\"\204\001\n\033RequestedSign"
    "atureRejection\022\026\n\016ParentEntityId\030\001 \002(\t\022="
    "\n\rSignedContent\030\002 \002(\0132&.Diadoc.Api.Proto"
    ".Events.SignedContent\022\016\n\006Labels\030\003 \003(\t\"\214\001"
    "\n\rSignedContent\022\017\n\007Content\030\001 \001(\014\022\021\n\tSign"
    "ature\030\002 \001(\014\022\023\n\013NameOnShelf\030\004 \001(\t\022$\n\025Sign"
    "WithTestSignature\030\005 \001(\010:\005false\022\034\n\024Signat"
    "ureNameOnShelf\030\006 \001(\t\"\323\001\n\013DraftToSend\022\r\n\005"
    "BoxId\030\001 \002(\t\022\017\n\007DraftId\030\002 \002(\t\022\017\n\007ToBoxId\030"
    "\003 \001(\t\022\026\n\016ToDepartmentId\030\004 \001(\t\022L\n\022Documen"
    "tSignatures\030\005 \003(\01320.Diadoc.Api.Proto.Eve"
    "nts.DocumentSenderSignature\022\022\n\nProxyBoxI"
    "d\030\006 \001(\t\022\031\n\021ProxyDepartmentId\030\007 \001(\t\"\355\001\n\035P"
    "repareDocumentsToSignRequest\022\r\n\005BoxId\030\001 "
    "\002(\t\022E\n\016DraftDocuments\030\002 \003(\0132-.Diadoc.Api"
    ".Proto.Events.DraftDocumentToPatch\022;\n\tDo"
    "cuments\030\003 \003(\0132(.Diadoc.Api.Proto.Events."
    "DocumentToPatch\0229\n\010Contents\030\004 \003(\0132\'.Diad"
    "oc.Api.Proto.Events.ContentToPatch\"\331\001\n\024D"
    "raftDocumentToPatch\0220\n\nDocumentId\030\001 \002(\0132"
    "\034.Diadoc.Api.Proto.DocumentId\022\017\n\007ToBoxId"
    "\030\002 \001(\t\0222\n\006Signer\030\003 \001(\0132\".Diadoc.Api.Prot"
    "o.Invoicing.Signer\022J\n\016ExtendedSigner\030\004 \003"
    "(\01322.Diadoc.Api.Proto.Invoicing.Signers."
    "ExtendedSigner\"\224\002\n\016ContentToPatch\022\023\n\013Typ"
    "eNamedId\030\001 \002(\t\022\020\n\010Function\030\002 \002(\t\022\017\n\007Vers"
    "ion\030\003 \002(\t\0229\n\007Content\030\004 \002(\0132(.Diadoc.Api."
    "Proto.Events.UnsignedContent\022\017\n\007ToBoxId\030"
    "\005 \001(\t\0222\n\006Signer\030\006 \001(\0132\".Diadoc.Api.Proto"
    ".Invoicing.Signer\022J\n\016ExtendedSigner\030\007 \003("
    "\01322.Diadoc.Api.Proto.Invoicing.Signers.E"
    "xtendedSigner\"\303\001\n\017DocumentToPatch\0220\n\nDoc"
    "umentId\030\001 \002(\0132\034.Diadoc.Api.Proto.Documen"
    "tId\0222\n\006Signer\030\002 \001(\0132\".Diadoc.Api.Proto.I"
    "nvoicing.Signer\022J\n\016ExtendedSigner\030\003 \003(\0132"
    "2.Diadoc.Api.Proto.Invoicing.Signers.Ext"
    "endedSigner\"u\n\026DocumentPatchedContent\0220\n"
    "\nDocumentId\030\001 \002(\0132\034.Diadoc.Api.Proto.Doc"
    "umentId\022\030\n\020PatchedContentId\030\002 \002(\t\022\017\n\007Con"
    "tent\030\003 \001(\014\"r\n\036PrepareDocumentsToSignResp"
    "onse\022P\n\027DocumentPatchedContents\030\001 \003(\0132/."
    "Diadoc.Api.Proto.Events.DocumentPatchedC"
    "ontent\"y\n\rMessageToSend\022\r\n\005BoxId\030\001 \002(\t\022\021"
    "\n\tMessageId\030\002 \002(\t\022F\n\022DocumentSignatures\030"
    "\003 \003(\0132*.Diadoc.Api.Proto.Events.Document"
    "Signature\"\204\001\n\033RevocationRequestAttachmen"
    "t\022\026\n\016ParentEntityId\030\001 \002(\t\022=\n\rSignedConte"
    "nt\030\002 \002(\0132&.Diadoc.Api.Proto.Events.Signe"
    "dContent\022\016\n\006Labels\030\003 \003(\t\"\210\001\n\037XmlSignatur"
    "eRejectionAttachment\022\026\n\016ParentEntityId\030\001"
    " \002(\t\022=\n\rSignedContent\030\002 \002(\0132&.Diadoc.Api"
    ".Proto.Events.SignedContent\022\016\n\006Labels\030\003 "
    "\003(\t\"a\n\031RoamingNotificationToPost\022\r\n\005BoxI"
    "d\030\001 \002(\t\022\017\n\007EventId\030\002 \002(\t\022\017\n\007Success\030\003 \002("
    "\010\022\023\n\013Description\030\004 \001(\t\"\213\001\n\017CustomDataPat"
    "ch\022\026\n\016ParentEntityId\030\001 \002(\t\022D\n\tOperation\030"
    "\002 \002(\01621.Diadoc.Api.Proto.Events.CustomDa"
    "taPatchOperation\022\013\n\003Key\030\003 \002(\t\022\r\n\005Value\030\004"
    " \001(\t\"\254\001\n\031EditDocumentPacketCommand\022\022\n\nDo"
    "cumentId\030\001 \002(\t\022:\n\024AddDocumentsToPacket\030\002"
    " \003(\0132\034.Diadoc.Api.Proto.DocumentId\022\?\n\031Re"
    "moveDocumentsFromPacket\030\003 \003(\0132\034.Diadoc.A"
    "pi.Proto.DocumentId\"d\n\026ResolutionRouteRe"
    "moval\022\026\n\016ParentEntityId\030\001 \002(\t\022\017\n\007RouteId"
    "\030\002 \002(\t\022\021\n\007Comment\030\003 \001(\t:\000\022\016\n\006Labels\030\004 \003("
    "\t\"\327\001\n\016TemplateToPost\022\021\n\tFromBoxId\030\001 \002(\t\022"
    "\017\n\007ToBoxId\030\002 \002(\t\022\030\n\020MessageFromBoxId\030\003 \002"
    "(\t\022\026\n\016MessageToBoxId\030\004 \002(\t\022\035\n\025MessageToD"
    "epartmentId\030\005 \001(\t\022P\n\023DocumentAttachments"
    "\030\006 \003(\01323.Diadoc.Api.Proto.Events.Templat"
    "eDocumentAttachment\"\320\002\n\032TemplateDocument"
    "Attachment\022A\n\017UnsignedContent\030\001 \002(\0132(.Di"
    "adoc.Api.Proto.Events.UnsignedContent\022\017\n"
    "\007Comment\030\002 \001(\t\022\023\n\013TypeNamedId\030\003 \002(\t\022\020\n\010F"
    "unction\030\004 \001(\t\022\017\n\007Version\030\005 \001(\t\0227\n\010Metada"
    "ta\030\006 \003(\0132%.Diadoc.Api.Proto.Events.Metad"
    "ataItem\022\022\n\nWorkflowId\030\007 \001(\005\022\030\n\020CustomDoc"
    "umentId\030\010 \001(\t\022\030\n\020EditingSettingId\030\t \001(\t\022"
    "%\n\026NeedRecipientSignature\030\n \001(\010:\005false\"7"
    "\n\017UnsignedContent\022\017\n\007Content\030\001 \001(\014\022\023\n\013Na"
    "meOnShelf\030\002 \001(\t\"\223\001\n\034TemplateTransformati"
    "onToPost\022\r\n\005BoxId\030\001 \002(\t\022\022\n\nTemplateId\030\002 "
    "\002(\t\022P\n\027DocumentTransformations\030\003 \003(\0132/.D"
    "iadoc.Api.Proto.Events.DocumentTransform"
    "ation\"F\n\026DocumentTransformation\022\022\n\nDocum"
    "entId\030\001 \002(\t\022\030\n\020CustomDocumentId\030\002 \001(\t*/\n"
    "\030CustomDataPatchOperation\022\007\n\003Set\020\000\022\n\n\006Re"
    "move\020\001", 16126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Events/DiadocMessage-PostApi.proto", &protobuf_RegisterTypes);
  MessageToPost::default_instance_ = new MessageToPost();
  EncryptedXmlDocumentAttachment::default_instance_ = new EncryptedXmlDocumentAttachment();
  EncryptedInvoiceAttachment::default_instance_ = new EncryptedInvoiceAttachment();
  EncryptedDocumentMetadata::default_instance_ = new EncryptedDocumentMetadata();
  EncryptedXmlBasicDocumentMetadata::default_instance_ = new EncryptedXmlBasicDocumentMetadata();
  EncryptedInvoiceMetadata::default_instance_ = new EncryptedInvoiceMetadata();
  EncryptedInvoiceCorrectionMetadata::default_instance_ = new EncryptedInvoiceCorrectionMetadata();
  XmlDocumentAttachment::default_instance_ = new XmlDocumentAttachment();
  NonformalizedAttachment::default_instance_ = new NonformalizedAttachment();
  BasicDocumentAttachment::default_instance_ = new BasicDocumentAttachment();
  Torg13Attachment::default_instance_ = new Torg13Attachment();
  AcceptanceCertificateAttachment::default_instance_ = new AcceptanceCertificateAttachment();
  TrustConnectionRequestAttachment::default_instance_ = new TrustConnectionRequestAttachment();
  StructuredDataAttachment::default_instance_ = new StructuredDataAttachment();
  PriceListAttachment::default_instance_ = new PriceListAttachment();
  ReconciliationActAttachment::default_instance_ = new ReconciliationActAttachment();
  ContractAttachment::default_instance_ = new ContractAttachment();
  SupplementaryAgreementAttachment::default_instance_ = new SupplementaryAgreementAttachment();
  ServiceDetailsAttachment::default_instance_ = new ServiceDetailsAttachment();
  DocumentAttachment::default_instance_ = new DocumentAttachment();
  MetadataItem::default_instance_ = new MetadataItem();
  MessagePatchToPost::default_instance_ = new MessagePatchToPost();
  SignatureVerification::default_instance_ = new SignatureVerification();
  ResolutionRequestAttachment::default_instance_ = new ResolutionRequestAttachment();
  ResolutionRouteAssignment::default_instance_ = new ResolutionRouteAssignment();
  ResolutionRequestCancellationAttachment::default_instance_ = new ResolutionRequestCancellationAttachment();
  ResolutionRequestDenialCancellationAttachment::default_instance_ = new ResolutionRequestDenialCancellationAttachment();
  ResolutionRequestDenialAttachment::default_instance_ = new ResolutionRequestDenialAttachment();
  ResolutionAttachment::default_instance_ = new ResolutionAttachment();
  ReceiptAttachment::default_instance_ = new ReceiptAttachment();
  CorrectionRequestAttachment::default_instance_ = new CorrectionRequestAttachment();
  DocumentSignature::default_instance_ = new DocumentSignature();
  DocumentSenderSignature::default_instance_ = new DocumentSenderSignature();
  RequestedSignatureRejection::default_instance_ = new RequestedSignatureRejection();
  SignedContent::default_instance_ = new SignedContent();
  DraftToSend::default_instance_ = new DraftToSend();
  PrepareDocumentsToSignRequest::default_instance_ = new PrepareDocumentsToSignRequest();
  DraftDocumentToPatch::default_instance_ = new DraftDocumentToPatch();
  ContentToPatch::default_instance_ = new ContentToPatch();
  DocumentToPatch::default_instance_ = new DocumentToPatch();
  DocumentPatchedContent::default_instance_ = new DocumentPatchedContent();
  PrepareDocumentsToSignResponse::default_instance_ = new PrepareDocumentsToSignResponse();
  MessageToSend::default_instance_ = new MessageToSend();
  RevocationRequestAttachment::default_instance_ = new RevocationRequestAttachment();
  XmlSignatureRejectionAttachment::default_instance_ = new XmlSignatureRejectionAttachment();
  RoamingNotificationToPost::default_instance_ = new RoamingNotificationToPost();
  CustomDataPatch::default_instance_ = new CustomDataPatch();
  EditDocumentPacketCommand::default_instance_ = new EditDocumentPacketCommand();
  ResolutionRouteRemoval::default_instance_ = new ResolutionRouteRemoval();
  TemplateToPost::default_instance_ = new TemplateToPost();
  TemplateDocumentAttachment::default_instance_ = new TemplateDocumentAttachment();
  UnsignedContent::default_instance_ = new UnsignedContent();
  TemplateTransformationToPost::default_instance_ = new TemplateTransformationToPost();
  DocumentTransformation::default_instance_ = new DocumentTransformation();
  MessageToPost::default_instance_->InitAsDefaultInstance();
  EncryptedXmlDocumentAttachment::default_instance_->InitAsDefaultInstance();
  EncryptedInvoiceAttachment::default_instance_->InitAsDefaultInstance();
  EncryptedDocumentMetadata::default_instance_->InitAsDefaultInstance();
  EncryptedXmlBasicDocumentMetadata::default_instance_->InitAsDefaultInstance();
  EncryptedInvoiceMetadata::default_instance_->InitAsDefaultInstance();
  EncryptedInvoiceCorrectionMetadata::default_instance_->InitAsDefaultInstance();
  XmlDocumentAttachment::default_instance_->InitAsDefaultInstance();
  NonformalizedAttachment::default_instance_->InitAsDefaultInstance();
  BasicDocumentAttachment::default_instance_->InitAsDefaultInstance();
  Torg13Attachment::default_instance_->InitAsDefaultInstance();
  AcceptanceCertificateAttachment::default_instance_->InitAsDefaultInstance();
  TrustConnectionRequestAttachment::default_instance_->InitAsDefaultInstance();
  StructuredDataAttachment::default_instance_->InitAsDefaultInstance();
  PriceListAttachment::default_instance_->InitAsDefaultInstance();
  ReconciliationActAttachment::default_instance_->InitAsDefaultInstance();
  ContractAttachment::default_instance_->InitAsDefaultInstance();
  SupplementaryAgreementAttachment::default_instance_->InitAsDefaultInstance();
  ServiceDetailsAttachment::default_instance_->InitAsDefaultInstance();
  DocumentAttachment::default_instance_->InitAsDefaultInstance();
  MetadataItem::default_instance_->InitAsDefaultInstance();
  MessagePatchToPost::default_instance_->InitAsDefaultInstance();
  SignatureVerification::default_instance_->InitAsDefaultInstance();
  ResolutionRequestAttachment::default_instance_->InitAsDefaultInstance();
  ResolutionRouteAssignment::default_instance_->InitAsDefaultInstance();
  ResolutionRequestCancellationAttachment::default_instance_->InitAsDefaultInstance();
  ResolutionRequestDenialCancellationAttachment::default_instance_->InitAsDefaultInstance();
  ResolutionRequestDenialAttachment::default_instance_->InitAsDefaultInstance();
  ResolutionAttachment::default_instance_->InitAsDefaultInstance();
  ReceiptAttachment::default_instance_->InitAsDefaultInstance();
  CorrectionRequestAttachment::default_instance_->InitAsDefaultInstance();
  DocumentSignature::default_instance_->InitAsDefaultInstance();
  DocumentSenderSignature::default_instance_->InitAsDefaultInstance();
  RequestedSignatureRejection::default_instance_->InitAsDefaultInstance();
  SignedContent::default_instance_->InitAsDefaultInstance();
  DraftToSend::default_instance_->InitAsDefaultInstance();
  PrepareDocumentsToSignRequest::default_instance_->InitAsDefaultInstance();
  DraftDocumentToPatch::default_instance_->InitAsDefaultInstance();
  ContentToPatch::default_instance_->InitAsDefaultInstance();
  DocumentToPatch::default_instance_->InitAsDefaultInstance();
  DocumentPatchedContent::default_instance_->InitAsDefaultInstance();
  PrepareDocumentsToSignResponse::default_instance_->InitAsDefaultInstance();
  MessageToSend::default_instance_->InitAsDefaultInstance();
  RevocationRequestAttachment::default_instance_->InitAsDefaultInstance();
  XmlSignatureRejectionAttachment::default_instance_->InitAsDefaultInstance();
  RoamingNotificationToPost::default_instance_->InitAsDefaultInstance();
  CustomDataPatch::default_instance_->InitAsDefaultInstance();
  EditDocumentPacketCommand::default_instance_->InitAsDefaultInstance();
  ResolutionRouteRemoval::default_instance_->InitAsDefaultInstance();
  TemplateToPost::default_instance_->InitAsDefaultInstance();
  TemplateDocumentAttachment::default_instance_->InitAsDefaultInstance();
  UnsignedContent::default_instance_->InitAsDefaultInstance();
  TemplateTransformationToPost::default_instance_->InitAsDefaultInstance();
  DocumentTransformation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Events_2fDiadocMessage_2dPostApi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Events_2fDiadocMessage_2dPostApi_2eproto {
  StaticDescriptorInitializer_Events_2fDiadocMessage_2dPostApi_2eproto() {
    protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  }
} static_descriptor_initializer_Events_2fDiadocMessage_2dPostApi_2eproto_;
const ::google::protobuf::EnumDescriptor* CustomDataPatchOperation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomDataPatchOperation_descriptor_;
}
bool CustomDataPatchOperation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MessageToPost::kFromBoxIdFieldNumber;
const int MessageToPost::kToBoxIdFieldNumber;
const int MessageToPost::kInvoicesFieldNumber;
const int MessageToPost::kNonformalizedDocumentsFieldNumber;
const int MessageToPost::kTorg12DocumentsFieldNumber;
const int MessageToPost::kAcceptanceCertificatesFieldNumber;
const int MessageToPost::kStructuredDataAttachmentsFieldNumber;
const int MessageToPost::kProformaInvoicesFieldNumber;
const int MessageToPost::kXmlTorg12SellerTitlesFieldNumber;
const int MessageToPost::kXmlAcceptanceCertificateSellerTitlesFieldNumber;
const int MessageToPost::kToDepartmentIdFieldNumber;
const int MessageToPost::kIsDraftFieldNumber;
const int MessageToPost::kLockDraftFieldNumber;
const int MessageToPost::kStrictDraftValidationFieldNumber;
const int MessageToPost::kIsInternalFieldNumber;
const int MessageToPost::kFromDepartmentIdFieldNumber;
const int MessageToPost::kDelaySendFieldNumber;
const int MessageToPost::kPriceListsFieldNumber;
const int MessageToPost::kPriceListAgreementsFieldNumber;
const int MessageToPost::kCertificateRegistriesFieldNumber;
const int MessageToPost::kReconciliationActsFieldNumber;
const int MessageToPost::kContractsFieldNumber;
const int MessageToPost::kTorg13DocumentsFieldNumber;
const int MessageToPost::kServiceDetailsDocumentsFieldNumber;
const int MessageToPost::kProxyBoxIdFieldNumber;
const int MessageToPost::kProxyDepartmentIdFieldNumber;
const int MessageToPost::kEncryptedInvoicesFieldNumber;
const int MessageToPost::kEncryptedXmlTorg12SellerTitlesFieldNumber;
const int MessageToPost::kEncryptedXmlAcceptanceCertificateSellerTitlesFieldNumber;
const int MessageToPost::kSupplementaryAgreementsFieldNumber;
const int MessageToPost::kLockPacketFieldNumber;
const int MessageToPost::kUniversalTransferDocumentSellerTitlesFieldNumber;
const int MessageToPost::kDocumentAttachmentsFieldNumber;
const int MessageToPost::kLockModeFieldNumber;
#endif  // !_MSC_VER

MessageToPost::MessageToPost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.MessageToPost)
}

void MessageToPost::InitAsDefaultInstance() {
}

MessageToPost::MessageToPost(const MessageToPost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.MessageToPost)
}

void MessageToPost::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fromboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isdraft_ = false;
  lockdraft_ = false;
  strictdraftvalidation_ = true;
  isinternal_ = false;
  fromdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delaysend_ = false;
  proxyboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxydepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lockpacket_ = false;
  lockmode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageToPost::~MessageToPost() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.MessageToPost)
  SharedDtor();
}

void MessageToPost::SharedDtor() {
  if (fromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromboxid_;
  }
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toboxid_;
  }
  if (todepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete todepartmentid_;
  }
  if (fromdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromdepartmentid_;
  }
  if (proxyboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyboxid_;
  }
  if (proxydepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxydepartmentid_;
  }
  if (this != default_instance_) {
  }
}

void MessageToPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageToPost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageToPost_descriptor_;
}

const MessageToPost& MessageToPost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

MessageToPost* MessageToPost::default_instance_ = NULL;

MessageToPost* MessageToPost::New() const {
  return new MessageToPost;
}

void MessageToPost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageToPost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 3) {
    if (has_fromboxid()) {
      if (fromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromboxid_->clear();
      }
    }
    if (has_toboxid()) {
      if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        toboxid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 64512) {
    ZR_(isdraft_, lockdraft_);
    if (has_todepartmentid()) {
      if (todepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        todepartmentid_->clear();
      }
    }
    strictdraftvalidation_ = true;
    isinternal_ = false;
    if (has_fromdepartmentid()) {
      if (fromdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromdepartmentid_->clear();
      }
    }
  }
  delaysend_ = false;
  if (_has_bits_[24 / 32] & 1124073472) {
    if (has_proxyboxid()) {
      if (proxyboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyboxid_->clear();
      }
    }
    if (has_proxydepartmentid()) {
      if (proxydepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxydepartmentid_->clear();
      }
    }
    lockpacket_ = false;
  }
  lockmode_ = 1;

#undef OFFSET_OF_FIELD_
#undef ZR_

  invoices_.Clear();
  nonformalizeddocuments_.Clear();
  torg12documents_.Clear();
  acceptancecertificates_.Clear();
  structureddataattachments_.Clear();
  proformainvoices_.Clear();
  xmltorg12sellertitles_.Clear();
  xmlacceptancecertificatesellertitles_.Clear();
  pricelists_.Clear();
  pricelistagreements_.Clear();
  certificateregistries_.Clear();
  reconciliationacts_.Clear();
  contracts_.Clear();
  torg13documents_.Clear();
  servicedetailsdocuments_.Clear();
  encryptedinvoices_.Clear();
  encryptedxmltorg12sellertitles_.Clear();
  encryptedxmlacceptancecertificatesellertitles_.Clear();
  supplementaryagreements_.Clear();
  universaltransferdocumentsellertitles_.Clear();
  documentattachments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageToPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.MessageToPost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FromBoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromboxid().data(), this->fromboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fromboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ToBoxId;
        break;
      }

      // optional string ToBoxId = 2;
      case 2: {
        if (tag == 18) {
         parse_ToBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->toboxid().data(), this->toboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "toboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Invoices;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment Invoices = 3;
      case 3: {
        if (tag == 26) {
         parse_Invoices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invoices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Invoices;
        if (input->ExpectTag(34)) goto parse_NonformalizedDocuments;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment NonformalizedDocuments = 4;
      case 4: {
        if (tag == 34) {
         parse_NonformalizedDocuments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nonformalizeddocuments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_NonformalizedDocuments;
        if (input->ExpectTag(42)) goto parse_Torg12Documents;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment Torg12Documents = 5;
      case 5: {
        if (tag == 42) {
         parse_Torg12Documents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_torg12documents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Torg12Documents;
        if (input->ExpectTag(58)) goto parse_AcceptanceCertificates;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment AcceptanceCertificates = 7;
      case 7: {
        if (tag == 58) {
         parse_AcceptanceCertificates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acceptancecertificates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_AcceptanceCertificates;
        if (input->ExpectTag(66)) goto parse_StructuredDataAttachments;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.StructuredDataAttachment StructuredDataAttachments = 8;
      case 8: {
        if (tag == 66) {
         parse_StructuredDataAttachments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_structureddataattachments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_StructuredDataAttachments;
        if (input->ExpectTag(74)) goto parse_ProformaInvoices;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment ProformaInvoices = 9;
      case 9: {
        if (tag == 74) {
         parse_ProformaInvoices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proformainvoices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ProformaInvoices;
        if (input->ExpectTag(82)) goto parse_XmlTorg12SellerTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlTorg12SellerTitles = 10;
      case 10: {
        if (tag == 82) {
         parse_XmlTorg12SellerTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xmltorg12sellertitles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_XmlTorg12SellerTitles;
        if (input->ExpectTag(90)) goto parse_XmlAcceptanceCertificateSellerTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlAcceptanceCertificateSellerTitles = 11;
      case 11: {
        if (tag == 90) {
         parse_XmlAcceptanceCertificateSellerTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xmlacceptancecertificatesellertitles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_XmlAcceptanceCertificateSellerTitles;
        if (input->ExpectTag(98)) goto parse_ToDepartmentId;
        break;
      }

      // optional string ToDepartmentId = 12;
      case 12: {
        if (tag == 98) {
         parse_ToDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->todepartmentid().data(), this->todepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "todepartmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_IsDraft;
        break;
      }

      // optional bool IsDraft = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_IsDraft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdraft_)));
          set_has_isdraft();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_LockDraft;
        break;
      }

      // optional bool LockDraft = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_LockDraft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lockdraft_)));
          set_has_lockdraft();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_StrictDraftValidation;
        break;
      }

      // optional bool StrictDraftValidation = 15 [default = true];
      case 15: {
        if (tag == 120) {
         parse_StrictDraftValidation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strictdraftvalidation_)));
          set_has_strictdraftvalidation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_IsInternal;
        break;
      }

      // optional bool IsInternal = 16 [default = false];
      case 16: {
        if (tag == 128) {
         parse_IsInternal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinternal_)));
          set_has_isinternal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_FromDepartmentId;
        break;
      }

      // optional string FromDepartmentId = 17;
      case 17: {
        if (tag == 138) {
         parse_FromDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromdepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromdepartmentid().data(), this->fromdepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fromdepartmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_DelaySend;
        break;
      }

      // optional bool DelaySend = 18 [default = false];
      case 18: {
        if (tag == 144) {
         parse_DelaySend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delaysend_)));
          set_has_delaysend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_PriceLists;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.PriceListAttachment PriceLists = 19;
      case 19: {
        if (tag == 154) {
         parse_PriceLists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pricelists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_PriceLists;
        if (input->ExpectTag(162)) goto parse_PriceListAgreements;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment PriceListAgreements = 20;
      case 20: {
        if (tag == 162) {
         parse_PriceListAgreements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pricelistagreements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_PriceListAgreements;
        if (input->ExpectTag(170)) goto parse_CertificateRegistries;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment CertificateRegistries = 21;
      case 21: {
        if (tag == 170) {
         parse_CertificateRegistries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_certificateregistries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_CertificateRegistries;
        if (input->ExpectTag(178)) goto parse_ReconciliationActs;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ReconciliationActAttachment ReconciliationActs = 22;
      case 22: {
        if (tag == 178) {
         parse_ReconciliationActs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reconciliationacts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_ReconciliationActs;
        if (input->ExpectTag(186)) goto parse_Contracts;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ContractAttachment Contracts = 23;
      case 23: {
        if (tag == 186) {
         parse_Contracts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contracts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_Contracts;
        if (input->ExpectTag(194)) goto parse_Torg13Documents;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.Torg13Attachment Torg13Documents = 24;
      case 24: {
        if (tag == 194) {
         parse_Torg13Documents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_torg13documents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_Torg13Documents;
        if (input->ExpectTag(202)) goto parse_ServiceDetailsDocuments;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ServiceDetailsAttachment ServiceDetailsDocuments = 25;
      case 25: {
        if (tag == 202) {
         parse_ServiceDetailsDocuments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servicedetailsdocuments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_ServiceDetailsDocuments;
        if (input->ExpectTag(210)) goto parse_ProxyBoxId;
        break;
      }

      // optional string ProxyBoxId = 26;
      case 26: {
        if (tag == 210) {
         parse_ProxyBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyboxid().data(), this->proxyboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_ProxyDepartmentId;
        break;
      }

      // optional string ProxyDepartmentId = 27;
      case 27: {
        if (tag == 218) {
         parse_ProxyDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxydepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxydepartmentid().data(), this->proxydepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxydepartmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_EncryptedInvoices;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment EncryptedInvoices = 28;
      case 28: {
        if (tag == 226) {
         parse_EncryptedInvoices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_encryptedinvoices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_EncryptedInvoices;
        if (input->ExpectTag(234)) goto parse_EncryptedXmlTorg12SellerTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment EncryptedXmlTorg12SellerTitles = 29;
      case 29: {
        if (tag == 234) {
         parse_EncryptedXmlTorg12SellerTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_encryptedxmltorg12sellertitles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_EncryptedXmlTorg12SellerTitles;
        if (input->ExpectTag(242)) goto parse_EncryptedXmlAcceptanceCertificateSellerTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment EncryptedXmlAcceptanceCertificateSellerTitles = 30;
      case 30: {
        if (tag == 242) {
         parse_EncryptedXmlAcceptanceCertificateSellerTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_encryptedxmlacceptancecertificatesellertitles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_EncryptedXmlAcceptanceCertificateSellerTitles;
        if (input->ExpectTag(250)) goto parse_SupplementaryAgreements;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment SupplementaryAgreements = 31;
      case 31: {
        if (tag == 250) {
         parse_SupplementaryAgreements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_supplementaryagreements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_SupplementaryAgreements;
        if (input->ExpectTag(256)) goto parse_LockPacket;
        break;
      }

      // optional bool LockPacket = 32 [default = false];
      case 32: {
        if (tag == 256) {
         parse_LockPacket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lockpacket_)));
          set_has_lockpacket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_UniversalTransferDocumentSellerTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment UniversalTransferDocumentSellerTitles = 33;
      case 33: {
        if (tag == 266) {
         parse_UniversalTransferDocumentSellerTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_universaltransferdocumentsellertitles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_UniversalTransferDocumentSellerTitles;
        if (input->ExpectTag(274)) goto parse_DocumentAttachments;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.DocumentAttachment DocumentAttachments = 34;
      case 34: {
        if (tag == 274) {
         parse_DocumentAttachments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documentattachments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_DocumentAttachments;
        if (input->ExpectTag(280)) goto parse_LockMode;
        break;
      }

      // optional .Diadoc.Api.Proto.LockMode LockMode = 35 [default = None];
      case 35: {
        if (tag == 280) {
         parse_LockMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::LockMode_IsValid(value)) {
            set_lockmode(static_cast< ::Diadoc::Api::Proto::LockMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(35, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.MessageToPost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.MessageToPost)
  return false;
#undef DO_
}

void MessageToPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.MessageToPost)
  // required string FromBoxId = 1;
  if (has_fromboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromboxid().data(), this->fromboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fromboxid(), output);
  }

  // optional string ToBoxId = 2;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->toboxid(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment Invoices = 3;
  for (int i = 0; i < this->invoices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invoices(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment NonformalizedDocuments = 4;
  for (int i = 0; i < this->nonformalizeddocuments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nonformalizeddocuments(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment Torg12Documents = 5;
  for (int i = 0; i < this->torg12documents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->torg12documents(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment AcceptanceCertificates = 7;
  for (int i = 0; i < this->acceptancecertificates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->acceptancecertificates(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.StructuredDataAttachment StructuredDataAttachments = 8;
  for (int i = 0; i < this->structureddataattachments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->structureddataattachments(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment ProformaInvoices = 9;
  for (int i = 0; i < this->proformainvoices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->proformainvoices(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlTorg12SellerTitles = 10;
  for (int i = 0; i < this->xmltorg12sellertitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->xmltorg12sellertitles(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlAcceptanceCertificateSellerTitles = 11;
  for (int i = 0; i < this->xmlacceptancecertificatesellertitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->xmlacceptancecertificatesellertitles(i), output);
  }

  // optional string ToDepartmentId = 12;
  if (has_todepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->todepartmentid().data(), this->todepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "todepartmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->todepartmentid(), output);
  }

  // optional bool IsDraft = 13 [default = false];
  if (has_isdraft()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isdraft(), output);
  }

  // optional bool LockDraft = 14 [default = false];
  if (has_lockdraft()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->lockdraft(), output);
  }

  // optional bool StrictDraftValidation = 15 [default = true];
  if (has_strictdraftvalidation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->strictdraftvalidation(), output);
  }

  // optional bool IsInternal = 16 [default = false];
  if (has_isinternal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isinternal(), output);
  }

  // optional string FromDepartmentId = 17;
  if (has_fromdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromdepartmentid().data(), this->fromdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromdepartmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->fromdepartmentid(), output);
  }

  // optional bool DelaySend = 18 [default = false];
  if (has_delaysend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->delaysend(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.PriceListAttachment PriceLists = 19;
  for (int i = 0; i < this->pricelists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->pricelists(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment PriceListAgreements = 20;
  for (int i = 0; i < this->pricelistagreements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->pricelistagreements(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment CertificateRegistries = 21;
  for (int i = 0; i < this->certificateregistries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->certificateregistries(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ReconciliationActAttachment ReconciliationActs = 22;
  for (int i = 0; i < this->reconciliationacts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->reconciliationacts(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ContractAttachment Contracts = 23;
  for (int i = 0; i < this->contracts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->contracts(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.Torg13Attachment Torg13Documents = 24;
  for (int i = 0; i < this->torg13documents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->torg13documents(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ServiceDetailsAttachment ServiceDetailsDocuments = 25;
  for (int i = 0; i < this->servicedetailsdocuments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->servicedetailsdocuments(i), output);
  }

  // optional string ProxyBoxId = 26;
  if (has_proxyboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyboxid().data(), this->proxyboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->proxyboxid(), output);
  }

  // optional string ProxyDepartmentId = 27;
  if (has_proxydepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxydepartmentid().data(), this->proxydepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxydepartmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->proxydepartmentid(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment EncryptedInvoices = 28;
  for (int i = 0; i < this->encryptedinvoices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->encryptedinvoices(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment EncryptedXmlTorg12SellerTitles = 29;
  for (int i = 0; i < this->encryptedxmltorg12sellertitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->encryptedxmltorg12sellertitles(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment EncryptedXmlAcceptanceCertificateSellerTitles = 30;
  for (int i = 0; i < this->encryptedxmlacceptancecertificatesellertitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->encryptedxmlacceptancecertificatesellertitles(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment SupplementaryAgreements = 31;
  for (int i = 0; i < this->supplementaryagreements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->supplementaryagreements(i), output);
  }

  // optional bool LockPacket = 32 [default = false];
  if (has_lockpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->lockpacket(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment UniversalTransferDocumentSellerTitles = 33;
  for (int i = 0; i < this->universaltransferdocumentsellertitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->universaltransferdocumentsellertitles(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentAttachment DocumentAttachments = 34;
  for (int i = 0; i < this->documentattachments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->documentattachments(i), output);
  }

  // optional .Diadoc.Api.Proto.LockMode LockMode = 35 [default = None];
  if (has_lockmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      35, this->lockmode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.MessageToPost)
}

::google::protobuf::uint8* MessageToPost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.MessageToPost)
  // required string FromBoxId = 1;
  if (has_fromboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromboxid().data(), this->fromboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromboxid(), target);
  }

  // optional string ToBoxId = 2;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->toboxid(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment Invoices = 3;
  for (int i = 0; i < this->invoices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->invoices(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment NonformalizedDocuments = 4;
  for (int i = 0; i < this->nonformalizeddocuments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nonformalizeddocuments(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment Torg12Documents = 5;
  for (int i = 0; i < this->torg12documents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->torg12documents(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment AcceptanceCertificates = 7;
  for (int i = 0; i < this->acceptancecertificates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->acceptancecertificates(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.StructuredDataAttachment StructuredDataAttachments = 8;
  for (int i = 0; i < this->structureddataattachments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->structureddataattachments(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment ProformaInvoices = 9;
  for (int i = 0; i < this->proformainvoices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->proformainvoices(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlTorg12SellerTitles = 10;
  for (int i = 0; i < this->xmltorg12sellertitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->xmltorg12sellertitles(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlAcceptanceCertificateSellerTitles = 11;
  for (int i = 0; i < this->xmlacceptancecertificatesellertitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->xmlacceptancecertificatesellertitles(i), target);
  }

  // optional string ToDepartmentId = 12;
  if (has_todepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->todepartmentid().data(), this->todepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "todepartmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->todepartmentid(), target);
  }

  // optional bool IsDraft = 13 [default = false];
  if (has_isdraft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isdraft(), target);
  }

  // optional bool LockDraft = 14 [default = false];
  if (has_lockdraft()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->lockdraft(), target);
  }

  // optional bool StrictDraftValidation = 15 [default = true];
  if (has_strictdraftvalidation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->strictdraftvalidation(), target);
  }

  // optional bool IsInternal = 16 [default = false];
  if (has_isinternal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isinternal(), target);
  }

  // optional string FromDepartmentId = 17;
  if (has_fromdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromdepartmentid().data(), this->fromdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromdepartmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->fromdepartmentid(), target);
  }

  // optional bool DelaySend = 18 [default = false];
  if (has_delaysend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->delaysend(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.PriceListAttachment PriceLists = 19;
  for (int i = 0; i < this->pricelists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->pricelists(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment PriceListAgreements = 20;
  for (int i = 0; i < this->pricelistagreements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->pricelistagreements(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment CertificateRegistries = 21;
  for (int i = 0; i < this->certificateregistries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->certificateregistries(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ReconciliationActAttachment ReconciliationActs = 22;
  for (int i = 0; i < this->reconciliationacts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->reconciliationacts(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ContractAttachment Contracts = 23;
  for (int i = 0; i < this->contracts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->contracts(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.Torg13Attachment Torg13Documents = 24;
  for (int i = 0; i < this->torg13documents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->torg13documents(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ServiceDetailsAttachment ServiceDetailsDocuments = 25;
  for (int i = 0; i < this->servicedetailsdocuments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->servicedetailsdocuments(i), target);
  }

  // optional string ProxyBoxId = 26;
  if (has_proxyboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyboxid().data(), this->proxyboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->proxyboxid(), target);
  }

  // optional string ProxyDepartmentId = 27;
  if (has_proxydepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxydepartmentid().data(), this->proxydepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxydepartmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->proxydepartmentid(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment EncryptedInvoices = 28;
  for (int i = 0; i < this->encryptedinvoices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->encryptedinvoices(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment EncryptedXmlTorg12SellerTitles = 29;
  for (int i = 0; i < this->encryptedxmltorg12sellertitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->encryptedxmltorg12sellertitles(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment EncryptedXmlAcceptanceCertificateSellerTitles = 30;
  for (int i = 0; i < this->encryptedxmlacceptancecertificatesellertitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->encryptedxmlacceptancecertificatesellertitles(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment SupplementaryAgreements = 31;
  for (int i = 0; i < this->supplementaryagreements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->supplementaryagreements(i), target);
  }

  // optional bool LockPacket = 32 [default = false];
  if (has_lockpacket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->lockpacket(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment UniversalTransferDocumentSellerTitles = 33;
  for (int i = 0; i < this->universaltransferdocumentsellertitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->universaltransferdocumentsellertitles(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentAttachment DocumentAttachments = 34;
  for (int i = 0; i < this->documentattachments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->documentattachments(i), target);
  }

  // optional .Diadoc.Api.Proto.LockMode LockMode = 35 [default = None];
  if (has_lockmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      35, this->lockmode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.MessageToPost)
  return target;
}

int MessageToPost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FromBoxId = 1;
    if (has_fromboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromboxid());
    }

    // optional string ToBoxId = 2;
    if (has_toboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toboxid());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional string ToDepartmentId = 12;
    if (has_todepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->todepartmentid());
    }

    // optional bool IsDraft = 13 [default = false];
    if (has_isdraft()) {
      total_size += 1 + 1;
    }

    // optional bool LockDraft = 14 [default = false];
    if (has_lockdraft()) {
      total_size += 1 + 1;
    }

    // optional bool StrictDraftValidation = 15 [default = true];
    if (has_strictdraftvalidation()) {
      total_size += 1 + 1;
    }

    // optional bool IsInternal = 16 [default = false];
    if (has_isinternal()) {
      total_size += 2 + 1;
    }

    // optional string FromDepartmentId = 17;
    if (has_fromdepartmentid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromdepartmentid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool DelaySend = 18 [default = false];
    if (has_delaysend()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string ProxyBoxId = 26;
    if (has_proxyboxid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyboxid());
    }

    // optional string ProxyDepartmentId = 27;
    if (has_proxydepartmentid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxydepartmentid());
    }

    // optional bool LockPacket = 32 [default = false];
    if (has_lockpacket()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    // optional .Diadoc.Api.Proto.LockMode LockMode = 35 [default = None];
    if (has_lockmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lockmode());
    }

  }
  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment Invoices = 3;
  total_size += 1 * this->invoices_size();
  for (int i = 0; i < this->invoices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invoices(i));
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment NonformalizedDocuments = 4;
  total_size += 1 * this->nonformalizeddocuments_size();
  for (int i = 0; i < this->nonformalizeddocuments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nonformalizeddocuments(i));
  }

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment Torg12Documents = 5;
  total_size += 1 * this->torg12documents_size();
  for (int i = 0; i < this->torg12documents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->torg12documents(i));
  }

  // repeated .Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment AcceptanceCertificates = 7;
  total_size += 1 * this->acceptancecertificates_size();
  for (int i = 0; i < this->acceptancecertificates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acceptancecertificates(i));
  }

  // repeated .Diadoc.Api.Proto.Events.StructuredDataAttachment StructuredDataAttachments = 8;
  total_size += 1 * this->structureddataattachments_size();
  for (int i = 0; i < this->structureddataattachments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->structureddataattachments(i));
  }

  // repeated .Diadoc.Api.Proto.Events.BasicDocumentAttachment ProformaInvoices = 9;
  total_size += 1 * this->proformainvoices_size();
  for (int i = 0; i < this->proformainvoices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proformainvoices(i));
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlTorg12SellerTitles = 10;
  total_size += 1 * this->xmltorg12sellertitles_size();
  for (int i = 0; i < this->xmltorg12sellertitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xmltorg12sellertitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment XmlAcceptanceCertificateSellerTitles = 11;
  total_size += 1 * this->xmlacceptancecertificatesellertitles_size();
  for (int i = 0; i < this->xmlacceptancecertificatesellertitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xmlacceptancecertificatesellertitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.PriceListAttachment PriceLists = 19;
  total_size += 2 * this->pricelists_size();
  for (int i = 0; i < this->pricelists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pricelists(i));
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment PriceListAgreements = 20;
  total_size += 2 * this->pricelistagreements_size();
  for (int i = 0; i < this->pricelistagreements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pricelistagreements(i));
  }

  // repeated .Diadoc.Api.Proto.Events.NonformalizedAttachment CertificateRegistries = 21;
  total_size += 2 * this->certificateregistries_size();
  for (int i = 0; i < this->certificateregistries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->certificateregistries(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ReconciliationActAttachment ReconciliationActs = 22;
  total_size += 2 * this->reconciliationacts_size();
  for (int i = 0; i < this->reconciliationacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reconciliationacts(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ContractAttachment Contracts = 23;
  total_size += 2 * this->contracts_size();
  for (int i = 0; i < this->contracts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contracts(i));
  }

  // repeated .Diadoc.Api.Proto.Events.Torg13Attachment Torg13Documents = 24;
  total_size += 2 * this->torg13documents_size();
  for (int i = 0; i < this->torg13documents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->torg13documents(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ServiceDetailsAttachment ServiceDetailsDocuments = 25;
  total_size += 2 * this->servicedetailsdocuments_size();
  for (int i = 0; i < this->servicedetailsdocuments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servicedetailsdocuments(i));
  }

  // repeated .Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment EncryptedInvoices = 28;
  total_size += 2 * this->encryptedinvoices_size();
  for (int i = 0; i < this->encryptedinvoices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->encryptedinvoices(i));
  }

  // repeated .Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment EncryptedXmlTorg12SellerTitles = 29;
  total_size += 2 * this->encryptedxmltorg12sellertitles_size();
  for (int i = 0; i < this->encryptedxmltorg12sellertitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->encryptedxmltorg12sellertitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment EncryptedXmlAcceptanceCertificateSellerTitles = 30;
  total_size += 2 * this->encryptedxmlacceptancecertificatesellertitles_size();
  for (int i = 0; i < this->encryptedxmlacceptancecertificatesellertitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->encryptedxmlacceptancecertificatesellertitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment SupplementaryAgreements = 31;
  total_size += 2 * this->supplementaryagreements_size();
  for (int i = 0; i < this->supplementaryagreements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->supplementaryagreements(i));
  }

  // repeated .Diadoc.Api.Proto.Events.XmlDocumentAttachment UniversalTransferDocumentSellerTitles = 33;
  total_size += 2 * this->universaltransferdocumentsellertitles_size();
  for (int i = 0; i < this->universaltransferdocumentsellertitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->universaltransferdocumentsellertitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentAttachment DocumentAttachments = 34;
  total_size += 2 * this->documentattachments_size();
  for (int i = 0; i < this->documentattachments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documentattachments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageToPost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageToPost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageToPost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageToPost::MergeFrom(const MessageToPost& from) {
  GOOGLE_CHECK_NE(&from, this);
  invoices_.MergeFrom(from.invoices_);
  nonformalizeddocuments_.MergeFrom(from.nonformalizeddocuments_);
  torg12documents_.MergeFrom(from.torg12documents_);
  acceptancecertificates_.MergeFrom(from.acceptancecertificates_);
  structureddataattachments_.MergeFrom(from.structureddataattachments_);
  proformainvoices_.MergeFrom(from.proformainvoices_);
  xmltorg12sellertitles_.MergeFrom(from.xmltorg12sellertitles_);
  xmlacceptancecertificatesellertitles_.MergeFrom(from.xmlacceptancecertificatesellertitles_);
  pricelists_.MergeFrom(from.pricelists_);
  pricelistagreements_.MergeFrom(from.pricelistagreements_);
  certificateregistries_.MergeFrom(from.certificateregistries_);
  reconciliationacts_.MergeFrom(from.reconciliationacts_);
  contracts_.MergeFrom(from.contracts_);
  torg13documents_.MergeFrom(from.torg13documents_);
  servicedetailsdocuments_.MergeFrom(from.servicedetailsdocuments_);
  encryptedinvoices_.MergeFrom(from.encryptedinvoices_);
  encryptedxmltorg12sellertitles_.MergeFrom(from.encryptedxmltorg12sellertitles_);
  encryptedxmlacceptancecertificatesellertitles_.MergeFrom(from.encryptedxmlacceptancecertificatesellertitles_);
  supplementaryagreements_.MergeFrom(from.supplementaryagreements_);
  universaltransferdocumentsellertitles_.MergeFrom(from.universaltransferdocumentsellertitles_);
  documentattachments_.MergeFrom(from.documentattachments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromboxid()) {
      set_fromboxid(from.fromboxid());
    }
    if (from.has_toboxid()) {
      set_toboxid(from.toboxid());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_todepartmentid()) {
      set_todepartmentid(from.todepartmentid());
    }
    if (from.has_isdraft()) {
      set_isdraft(from.isdraft());
    }
    if (from.has_lockdraft()) {
      set_lockdraft(from.lockdraft());
    }
    if (from.has_strictdraftvalidation()) {
      set_strictdraftvalidation(from.strictdraftvalidation());
    }
    if (from.has_isinternal()) {
      set_isinternal(from.isinternal());
    }
    if (from.has_fromdepartmentid()) {
      set_fromdepartmentid(from.fromdepartmentid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_delaysend()) {
      set_delaysend(from.delaysend());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_proxyboxid()) {
      set_proxyboxid(from.proxyboxid());
    }
    if (from.has_proxydepartmentid()) {
      set_proxydepartmentid(from.proxydepartmentid());
    }
    if (from.has_lockpacket()) {
      set_lockpacket(from.lockpacket());
    }
  }
  if (from._has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    if (from.has_lockmode()) {
      set_lockmode(from.lockmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageToPost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToPost::CopyFrom(const MessageToPost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToPost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->invoices())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->nonformalizeddocuments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->torg12documents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->acceptancecertificates())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->structureddataattachments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->proformainvoices())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->xmltorg12sellertitles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->xmlacceptancecertificatesellertitles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pricelists())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pricelistagreements())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->certificateregistries())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reconciliationacts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->contracts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->torg13documents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->servicedetailsdocuments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->encryptedinvoices())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->encryptedxmltorg12sellertitles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->encryptedxmlacceptancecertificatesellertitles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->supplementaryagreements())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->universaltransferdocumentsellertitles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->documentattachments())) return false;
  return true;
}

void MessageToPost::Swap(MessageToPost* other) {
  if (other != this) {
    std::swap(fromboxid_, other->fromboxid_);
    std::swap(toboxid_, other->toboxid_);
    invoices_.Swap(&other->invoices_);
    nonformalizeddocuments_.Swap(&other->nonformalizeddocuments_);
    torg12documents_.Swap(&other->torg12documents_);
    acceptancecertificates_.Swap(&other->acceptancecertificates_);
    structureddataattachments_.Swap(&other->structureddataattachments_);
    proformainvoices_.Swap(&other->proformainvoices_);
    xmltorg12sellertitles_.Swap(&other->xmltorg12sellertitles_);
    xmlacceptancecertificatesellertitles_.Swap(&other->xmlacceptancecertificatesellertitles_);
    std::swap(todepartmentid_, other->todepartmentid_);
    std::swap(isdraft_, other->isdraft_);
    std::swap(lockdraft_, other->lockdraft_);
    std::swap(strictdraftvalidation_, other->strictdraftvalidation_);
    std::swap(isinternal_, other->isinternal_);
    std::swap(fromdepartmentid_, other->fromdepartmentid_);
    std::swap(delaysend_, other->delaysend_);
    pricelists_.Swap(&other->pricelists_);
    pricelistagreements_.Swap(&other->pricelistagreements_);
    certificateregistries_.Swap(&other->certificateregistries_);
    reconciliationacts_.Swap(&other->reconciliationacts_);
    contracts_.Swap(&other->contracts_);
    torg13documents_.Swap(&other->torg13documents_);
    servicedetailsdocuments_.Swap(&other->servicedetailsdocuments_);
    std::swap(proxyboxid_, other->proxyboxid_);
    std::swap(proxydepartmentid_, other->proxydepartmentid_);
    encryptedinvoices_.Swap(&other->encryptedinvoices_);
    encryptedxmltorg12sellertitles_.Swap(&other->encryptedxmltorg12sellertitles_);
    encryptedxmlacceptancecertificatesellertitles_.Swap(&other->encryptedxmlacceptancecertificatesellertitles_);
    supplementaryagreements_.Swap(&other->supplementaryagreements_);
    std::swap(lockpacket_, other->lockpacket_);
    universaltransferdocumentsellertitles_.Swap(&other->universaltransferdocumentsellertitles_);
    documentattachments_.Swap(&other->documentattachments_);
    std::swap(lockmode_, other->lockmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageToPost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageToPost_descriptor_;
  metadata.reflection = MessageToPost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncryptedXmlDocumentAttachment::kSignedContentFieldNumber;
const int EncryptedXmlDocumentAttachment::kCommentFieldNumber;
const int EncryptedXmlDocumentAttachment::kInitialDocumentIdsFieldNumber;
const int EncryptedXmlDocumentAttachment::kSubordinateDocumentIdsFieldNumber;
const int EncryptedXmlDocumentAttachment::kCustomDocumentIdFieldNumber;
const int EncryptedXmlDocumentAttachment::kCustomDataFieldNumber;
const int EncryptedXmlDocumentAttachment::kMetadataFieldNumber;
const int EncryptedXmlDocumentAttachment::kXmlBasicMetadataFieldNumber;
#endif  // !_MSC_VER

EncryptedXmlDocumentAttachment::EncryptedXmlDocumentAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment)
}

void EncryptedXmlDocumentAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
  metadata_ = const_cast< ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata*>(&::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata::default_instance());
  xmlbasicmetadata_ = const_cast< ::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata*>(&::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata::default_instance());
}

EncryptedXmlDocumentAttachment::EncryptedXmlDocumentAttachment(const EncryptedXmlDocumentAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment)
}

void EncryptedXmlDocumentAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_ = NULL;
  xmlbasicmetadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptedXmlDocumentAttachment::~EncryptedXmlDocumentAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment)
  SharedDtor();
}

void EncryptedXmlDocumentAttachment::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
    delete metadata_;
    delete xmlbasicmetadata_;
  }
}

void EncryptedXmlDocumentAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptedXmlDocumentAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptedXmlDocumentAttachment_descriptor_;
}

const EncryptedXmlDocumentAttachment& EncryptedXmlDocumentAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

EncryptedXmlDocumentAttachment* EncryptedXmlDocumentAttachment::default_instance_ = NULL;

EncryptedXmlDocumentAttachment* EncryptedXmlDocumentAttachment::New() const {
  return new EncryptedXmlDocumentAttachment;
}

void EncryptedXmlDocumentAttachment::Clear() {
  if (_has_bits_[0 / 32] & 211) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata::Clear();
    }
    if (has_xmlbasicmetadata()) {
      if (xmlbasicmetadata_ != NULL) xmlbasicmetadata_->::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata::Clear();
    }
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncryptedXmlDocumentAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (tag == 34) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 6;
      case 6: {
        if (tag == 50) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 7;
      case 7: {
        if (tag == 58) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_CustomData;
        if (input->ExpectTag(66)) goto parse_Metadata;
        break;
      }

      // required .Diadoc.Api.Proto.Events.EncryptedDocumentMetadata Metadata = 8;
      case 8: {
        if (tag == 66) {
         parse_Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_XmlBasicMetadata;
        break;
      }

      // required .Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata XmlBasicMetadata = 9;
      case 9: {
        if (tag == 74) {
         parse_XmlBasicMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xmlbasicmetadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment)
  return false;
#undef DO_
}

void EncryptedXmlDocumentAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->customdocumentid(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 7;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->customdata(i), output);
  }

  // required .Diadoc.Api.Proto.Events.EncryptedDocumentMetadata Metadata = 8;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->metadata(), output);
  }

  // required .Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata XmlBasicMetadata = 9;
  if (has_xmlbasicmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->xmlbasicmetadata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment)
}

::google::protobuf::uint8* EncryptedXmlDocumentAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->customdocumentid(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 7;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->customdata(i), target);
  }

  // required .Diadoc.Api.Proto.Events.EncryptedDocumentMetadata Metadata = 8;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->metadata(), target);
  }

  // required .Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata XmlBasicMetadata = 9;
  if (has_xmlbasicmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->xmlbasicmetadata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.EncryptedXmlDocumentAttachment)
  return target;
}

int EncryptedXmlDocumentAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string CustomDocumentId = 6;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // required .Diadoc.Api.Proto.Events.EncryptedDocumentMetadata Metadata = 8;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }

    // required .Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata XmlBasicMetadata = 9;
    if (has_xmlbasicmetadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xmlbasicmetadata());
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 7;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptedXmlDocumentAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncryptedXmlDocumentAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncryptedXmlDocumentAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncryptedXmlDocumentAttachment::MergeFrom(const EncryptedXmlDocumentAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_metadata()) {
      mutable_metadata()->::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata::MergeFrom(from.metadata());
    }
    if (from.has_xmlbasicmetadata()) {
      mutable_xmlbasicmetadata()->::Diadoc::Api::Proto::Events::EncryptedXmlBasicDocumentMetadata::MergeFrom(from.xmlbasicmetadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncryptedXmlDocumentAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptedXmlDocumentAttachment::CopyFrom(const EncryptedXmlDocumentAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedXmlDocumentAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c1) != 0x000000c1) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  if (has_metadata()) {
    if (!this->metadata().IsInitialized()) return false;
  }
  if (has_xmlbasicmetadata()) {
    if (!this->xmlbasicmetadata().IsInitialized()) return false;
  }
  return true;
}

void EncryptedXmlDocumentAttachment::Swap(EncryptedXmlDocumentAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(customdocumentid_, other->customdocumentid_);
    customdata_.Swap(&other->customdata_);
    std::swap(metadata_, other->metadata_);
    std::swap(xmlbasicmetadata_, other->xmlbasicmetadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncryptedXmlDocumentAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncryptedXmlDocumentAttachment_descriptor_;
  metadata.reflection = EncryptedXmlDocumentAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncryptedInvoiceAttachment::kSignedContentFieldNumber;
const int EncryptedInvoiceAttachment::kCommentFieldNumber;
const int EncryptedInvoiceAttachment::kInitialDocumentIdsFieldNumber;
const int EncryptedInvoiceAttachment::kSubordinateDocumentIdsFieldNumber;
const int EncryptedInvoiceAttachment::kCustomDocumentIdFieldNumber;
const int EncryptedInvoiceAttachment::kCustomDataFieldNumber;
const int EncryptedInvoiceAttachment::kMetadataFieldNumber;
const int EncryptedInvoiceAttachment::kInvoiceMetadataFieldNumber;
const int EncryptedInvoiceAttachment::kInvoiceCorrectionMetadataFieldNumber;
#endif  // !_MSC_VER

EncryptedInvoiceAttachment::EncryptedInvoiceAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment)
}

void EncryptedInvoiceAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
  metadata_ = const_cast< ::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata*>(&::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata::default_instance());
  invoicemetadata_ = const_cast< ::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata*>(&::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata::default_instance());
  invoicecorrectionmetadata_ = const_cast< ::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata*>(&::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata::default_instance());
}

EncryptedInvoiceAttachment::EncryptedInvoiceAttachment(const EncryptedInvoiceAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment)
}

void EncryptedInvoiceAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_ = NULL;
  invoicemetadata_ = NULL;
  invoicecorrectionmetadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptedInvoiceAttachment::~EncryptedInvoiceAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment)
  SharedDtor();
}

void EncryptedInvoiceAttachment::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
    delete metadata_;
    delete invoicemetadata_;
    delete invoicecorrectionmetadata_;
  }
}

void EncryptedInvoiceAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptedInvoiceAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptedInvoiceAttachment_descriptor_;
}

const EncryptedInvoiceAttachment& EncryptedInvoiceAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

EncryptedInvoiceAttachment* EncryptedInvoiceAttachment::default_instance_ = NULL;

EncryptedInvoiceAttachment* EncryptedInvoiceAttachment::New() const {
  return new EncryptedInvoiceAttachment;
}

void EncryptedInvoiceAttachment::Clear() {
  if (_has_bits_[0 / 32] & 211) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata::Clear();
    }
    if (has_invoicemetadata()) {
      if (invoicemetadata_ != NULL) invoicemetadata_->::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata::Clear();
    }
  }
  if (has_invoicecorrectionmetadata()) {
    if (invoicecorrectionmetadata_ != NULL) invoicecorrectionmetadata_->::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata::Clear();
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncryptedInvoiceAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (tag == 34) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 6;
      case 6: {
        if (tag == 50) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 7;
      case 7: {
        if (tag == 58) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_CustomData;
        if (input->ExpectTag(66)) goto parse_Metadata;
        break;
      }

      // required .Diadoc.Api.Proto.Events.EncryptedDocumentMetadata Metadata = 8;
      case 8: {
        if (tag == 66) {
         parse_Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_InvoiceMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata InvoiceMetadata = 9;
      case 9: {
        if (tag == 74) {
         parse_InvoiceMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoicemetadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_InvoiceCorrectionMetadata;
        break;
      }

      // optional .Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata InvoiceCorrectionMetadata = 10;
      case 10: {
        if (tag == 82) {
         parse_InvoiceCorrectionMetadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoicecorrectionmetadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment)
  return false;
#undef DO_
}

void EncryptedInvoiceAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->customdocumentid(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 7;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->customdata(i), output);
  }

  // required .Diadoc.Api.Proto.Events.EncryptedDocumentMetadata Metadata = 8;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->metadata(), output);
  }

  // optional .Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata InvoiceMetadata = 9;
  if (has_invoicemetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->invoicemetadata(), output);
  }

  // optional .Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata InvoiceCorrectionMetadata = 10;
  if (has_invoicecorrectionmetadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->invoicecorrectionmetadata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment)
}

::google::protobuf::uint8* EncryptedInvoiceAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->customdocumentid(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 7;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->customdata(i), target);
  }

  // required .Diadoc.Api.Proto.Events.EncryptedDocumentMetadata Metadata = 8;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->metadata(), target);
  }

  // optional .Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata InvoiceMetadata = 9;
  if (has_invoicemetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->invoicemetadata(), target);
  }

  // optional .Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata InvoiceCorrectionMetadata = 10;
  if (has_invoicecorrectionmetadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->invoicecorrectionmetadata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.EncryptedInvoiceAttachment)
  return target;
}

int EncryptedInvoiceAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string CustomDocumentId = 6;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // required .Diadoc.Api.Proto.Events.EncryptedDocumentMetadata Metadata = 8;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }

    // optional .Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata InvoiceMetadata = 9;
    if (has_invoicemetadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoicemetadata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata InvoiceCorrectionMetadata = 10;
    if (has_invoicecorrectionmetadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoicecorrectionmetadata());
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 7;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptedInvoiceAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncryptedInvoiceAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncryptedInvoiceAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncryptedInvoiceAttachment::MergeFrom(const EncryptedInvoiceAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_metadata()) {
      mutable_metadata()->::Diadoc::Api::Proto::Events::EncryptedDocumentMetadata::MergeFrom(from.metadata());
    }
    if (from.has_invoicemetadata()) {
      mutable_invoicemetadata()->::Diadoc::Api::Proto::Events::EncryptedInvoiceMetadata::MergeFrom(from.invoicemetadata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_invoicecorrectionmetadata()) {
      mutable_invoicecorrectionmetadata()->::Diadoc::Api::Proto::Events::EncryptedInvoiceCorrectionMetadata::MergeFrom(from.invoicecorrectionmetadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncryptedInvoiceAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptedInvoiceAttachment::CopyFrom(const EncryptedInvoiceAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedInvoiceAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  if (has_metadata()) {
    if (!this->metadata().IsInitialized()) return false;
  }
  if (has_invoicecorrectionmetadata()) {
    if (!this->invoicecorrectionmetadata().IsInitialized()) return false;
  }
  return true;
}

void EncryptedInvoiceAttachment::Swap(EncryptedInvoiceAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(customdocumentid_, other->customdocumentid_);
    customdata_.Swap(&other->customdata_);
    std::swap(metadata_, other->metadata_);
    std::swap(invoicemetadata_, other->invoicemetadata_);
    std::swap(invoicecorrectionmetadata_, other->invoicecorrectionmetadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncryptedInvoiceAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncryptedInvoiceAttachment_descriptor_;
  metadata.reflection = EncryptedInvoiceAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncryptedDocumentMetadata::kFileIdFieldNumber;
const int EncryptedDocumentMetadata::kBuyerFnsParticipantIdFieldNumber;
const int EncryptedDocumentMetadata::kSenderFnsParticipantIdFieldNumber;
const int EncryptedDocumentMetadata::kDocumentDateAndNumberFieldNumber;
#endif  // !_MSC_VER

EncryptedDocumentMetadata::EncryptedDocumentMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata)
}

void EncryptedDocumentMetadata::InitAsDefaultInstance() {
  documentdateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
}

EncryptedDocumentMetadata::EncryptedDocumentMetadata(const EncryptedDocumentMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata)
}

void EncryptedDocumentMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyerfnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderfnsparticipantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentdateandnumber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptedDocumentMetadata::~EncryptedDocumentMetadata() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata)
  SharedDtor();
}

void EncryptedDocumentMetadata::SharedDtor() {
  if (fileid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fileid_;
  }
  if (buyerfnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyerfnsparticipantid_;
  }
  if (senderfnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete senderfnsparticipantid_;
  }
  if (this != default_instance_) {
    delete documentdateandnumber_;
  }
}

void EncryptedDocumentMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptedDocumentMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptedDocumentMetadata_descriptor_;
}

const EncryptedDocumentMetadata& EncryptedDocumentMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

EncryptedDocumentMetadata* EncryptedDocumentMetadata::default_instance_ = NULL;

EncryptedDocumentMetadata* EncryptedDocumentMetadata::New() const {
  return new EncryptedDocumentMetadata;
}

void EncryptedDocumentMetadata::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_fileid()) {
      if (fileid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fileid_->clear();
      }
    }
    if (has_buyerfnsparticipantid()) {
      if (buyerfnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyerfnsparticipantid_->clear();
      }
    }
    if (has_senderfnsparticipantid()) {
      if (senderfnsparticipantid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        senderfnsparticipantid_->clear();
      }
    }
    if (has_documentdateandnumber()) {
      if (documentdateandnumber_ != NULL) documentdateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncryptedDocumentMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FileId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileid().data(), this->fileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fileid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BuyerFnsParticipantId;
        break;
      }

      // required string BuyerFnsParticipantId = 2;
      case 2: {
        if (tag == 18) {
         parse_BuyerFnsParticipantId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyerfnsparticipantid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyerfnsparticipantid().data(), this->buyerfnsparticipantid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buyerfnsparticipantid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SenderFnsParticipantId;
        break;
      }

      // required string SenderFnsParticipantId = 3;
      case 3: {
        if (tag == 26) {
         parse_SenderFnsParticipantId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderfnsparticipantid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->senderfnsparticipantid().data(), this->senderfnsparticipantid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "senderfnsparticipantid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DocumentDateAndNumber;
        break;
      }

      // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 4;
      case 4: {
        if (tag == 34) {
         parse_DocumentDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentdateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata)
  return false;
#undef DO_
}

void EncryptedDocumentMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata)
  // required string FileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fileid(), output);
  }

  // required string BuyerFnsParticipantId = 2;
  if (has_buyerfnsparticipantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyerfnsparticipantid().data(), this->buyerfnsparticipantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyerfnsparticipantid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buyerfnsparticipantid(), output);
  }

  // required string SenderFnsParticipantId = 3;
  if (has_senderfnsparticipantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->senderfnsparticipantid().data(), this->senderfnsparticipantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "senderfnsparticipantid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->senderfnsparticipantid(), output);
  }

  // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 4;
  if (has_documentdateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->documentdateandnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata)
}

::google::protobuf::uint8* EncryptedDocumentMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata)
  // required string FileId = 1;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileid().data(), this->fileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fileid(), target);
  }

  // required string BuyerFnsParticipantId = 2;
  if (has_buyerfnsparticipantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyerfnsparticipantid().data(), this->buyerfnsparticipantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buyerfnsparticipantid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buyerfnsparticipantid(), target);
  }

  // required string SenderFnsParticipantId = 3;
  if (has_senderfnsparticipantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->senderfnsparticipantid().data(), this->senderfnsparticipantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "senderfnsparticipantid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->senderfnsparticipantid(), target);
  }

  // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 4;
  if (has_documentdateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->documentdateandnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.EncryptedDocumentMetadata)
  return target;
}

int EncryptedDocumentMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FileId = 1;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileid());
    }

    // required string BuyerFnsParticipantId = 2;
    if (has_buyerfnsparticipantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyerfnsparticipantid());
    }

    // required string SenderFnsParticipantId = 3;
    if (has_senderfnsparticipantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->senderfnsparticipantid());
    }

    // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber DocumentDateAndNumber = 4;
    if (has_documentdateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentdateandnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptedDocumentMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncryptedDocumentMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncryptedDocumentMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncryptedDocumentMetadata::MergeFrom(const EncryptedDocumentMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_buyerfnsparticipantid()) {
      set_buyerfnsparticipantid(from.buyerfnsparticipantid());
    }
    if (from.has_senderfnsparticipantid()) {
      set_senderfnsparticipantid(from.senderfnsparticipantid());
    }
    if (from.has_documentdateandnumber()) {
      mutable_documentdateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.documentdateandnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncryptedDocumentMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptedDocumentMetadata::CopyFrom(const EncryptedDocumentMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedDocumentMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void EncryptedDocumentMetadata::Swap(EncryptedDocumentMetadata* other) {
  if (other != this) {
    std::swap(fileid_, other->fileid_);
    std::swap(buyerfnsparticipantid_, other->buyerfnsparticipantid_);
    std::swap(senderfnsparticipantid_, other->senderfnsparticipantid_);
    std::swap(documentdateandnumber_, other->documentdateandnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncryptedDocumentMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncryptedDocumentMetadata_descriptor_;
  metadata.reflection = EncryptedDocumentMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncryptedXmlBasicDocumentMetadata::kFormationDateFieldNumber;
const int EncryptedXmlBasicDocumentMetadata::kFormationTimeFieldNumber;
const int EncryptedXmlBasicDocumentMetadata::kDocumentNameFieldNumber;
#endif  // !_MSC_VER

EncryptedXmlBasicDocumentMetadata::EncryptedXmlBasicDocumentMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata)
}

void EncryptedXmlBasicDocumentMetadata::InitAsDefaultInstance() {
}

EncryptedXmlBasicDocumentMetadata::EncryptedXmlBasicDocumentMetadata(const EncryptedXmlBasicDocumentMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata)
}

void EncryptedXmlBasicDocumentMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  formationdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  formationtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptedXmlBasicDocumentMetadata::~EncryptedXmlBasicDocumentMetadata() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata)
  SharedDtor();
}

void EncryptedXmlBasicDocumentMetadata::SharedDtor() {
  if (formationdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete formationdate_;
  }
  if (formationtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete formationtime_;
  }
  if (documentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentname_;
  }
  if (this != default_instance_) {
  }
}

void EncryptedXmlBasicDocumentMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptedXmlBasicDocumentMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptedXmlBasicDocumentMetadata_descriptor_;
}

const EncryptedXmlBasicDocumentMetadata& EncryptedXmlBasicDocumentMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

EncryptedXmlBasicDocumentMetadata* EncryptedXmlBasicDocumentMetadata::default_instance_ = NULL;

EncryptedXmlBasicDocumentMetadata* EncryptedXmlBasicDocumentMetadata::New() const {
  return new EncryptedXmlBasicDocumentMetadata;
}

void EncryptedXmlBasicDocumentMetadata::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_formationdate()) {
      if (formationdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        formationdate_->clear();
      }
    }
    if (has_formationtime()) {
      if (formationtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        formationtime_->clear();
      }
    }
    if (has_documentname()) {
      if (documentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncryptedXmlBasicDocumentMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FormationDate = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_formationdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->formationdate().data(), this->formationdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "formationdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FormationTime;
        break;
      }

      // required string FormationTime = 2;
      case 2: {
        if (tag == 18) {
         parse_FormationTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_formationtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->formationtime().data(), this->formationtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "formationtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DocumentName;
        break;
      }

      // optional string DocumentName = 3;
      case 3: {
        if (tag == 26) {
         parse_DocumentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentname().data(), this->documentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata)
  return false;
#undef DO_
}

void EncryptedXmlBasicDocumentMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata)
  // required string FormationDate = 1;
  if (has_formationdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->formationdate().data(), this->formationdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "formationdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->formationdate(), output);
  }

  // required string FormationTime = 2;
  if (has_formationtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->formationtime().data(), this->formationtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "formationtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->formationtime(), output);
  }

  // optional string DocumentName = 3;
  if (has_documentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentname().data(), this->documentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->documentname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata)
}

::google::protobuf::uint8* EncryptedXmlBasicDocumentMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata)
  // required string FormationDate = 1;
  if (has_formationdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->formationdate().data(), this->formationdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "formationdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->formationdate(), target);
  }

  // required string FormationTime = 2;
  if (has_formationtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->formationtime().data(), this->formationtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "formationtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->formationtime(), target);
  }

  // optional string DocumentName = 3;
  if (has_documentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentname().data(), this->documentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->documentname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.EncryptedXmlBasicDocumentMetadata)
  return target;
}

int EncryptedXmlBasicDocumentMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FormationDate = 1;
    if (has_formationdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->formationdate());
    }

    // required string FormationTime = 2;
    if (has_formationtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->formationtime());
    }

    // optional string DocumentName = 3;
    if (has_documentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptedXmlBasicDocumentMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncryptedXmlBasicDocumentMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncryptedXmlBasicDocumentMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncryptedXmlBasicDocumentMetadata::MergeFrom(const EncryptedXmlBasicDocumentMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationdate()) {
      set_formationdate(from.formationdate());
    }
    if (from.has_formationtime()) {
      set_formationtime(from.formationtime());
    }
    if (from.has_documentname()) {
      set_documentname(from.documentname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncryptedXmlBasicDocumentMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptedXmlBasicDocumentMetadata::CopyFrom(const EncryptedXmlBasicDocumentMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedXmlBasicDocumentMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EncryptedXmlBasicDocumentMetadata::Swap(EncryptedXmlBasicDocumentMetadata* other) {
  if (other != this) {
    std::swap(formationdate_, other->formationdate_);
    std::swap(formationtime_, other->formationtime_);
    std::swap(documentname_, other->documentname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncryptedXmlBasicDocumentMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncryptedXmlBasicDocumentMetadata_descriptor_;
  metadata.reflection = EncryptedXmlBasicDocumentMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncryptedInvoiceMetadata::kRevisionDateAndNumberFieldNumber;
#endif  // !_MSC_VER

EncryptedInvoiceMetadata::EncryptedInvoiceMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata)
}

void EncryptedInvoiceMetadata::InitAsDefaultInstance() {
  revisiondateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
}

EncryptedInvoiceMetadata::EncryptedInvoiceMetadata(const EncryptedInvoiceMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata)
}

void EncryptedInvoiceMetadata::SharedCtor() {
  _cached_size_ = 0;
  revisiondateandnumber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptedInvoiceMetadata::~EncryptedInvoiceMetadata() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata)
  SharedDtor();
}

void EncryptedInvoiceMetadata::SharedDtor() {
  if (this != default_instance_) {
    delete revisiondateandnumber_;
  }
}

void EncryptedInvoiceMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptedInvoiceMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptedInvoiceMetadata_descriptor_;
}

const EncryptedInvoiceMetadata& EncryptedInvoiceMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

EncryptedInvoiceMetadata* EncryptedInvoiceMetadata::default_instance_ = NULL;

EncryptedInvoiceMetadata* EncryptedInvoiceMetadata::New() const {
  return new EncryptedInvoiceMetadata;
}

void EncryptedInvoiceMetadata::Clear() {
  if (has_revisiondateandnumber()) {
    if (revisiondateandnumber_ != NULL) revisiondateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncryptedInvoiceMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber RevisionDateAndNumber = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revisiondateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata)
  return false;
#undef DO_
}

void EncryptedInvoiceMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata)
  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber RevisionDateAndNumber = 1;
  if (has_revisiondateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->revisiondateandnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata)
}

::google::protobuf::uint8* EncryptedInvoiceMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata)
  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber RevisionDateAndNumber = 1;
  if (has_revisiondateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->revisiondateandnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.EncryptedInvoiceMetadata)
  return target;
}

int EncryptedInvoiceMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber RevisionDateAndNumber = 1;
    if (has_revisiondateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revisiondateandnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptedInvoiceMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncryptedInvoiceMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncryptedInvoiceMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncryptedInvoiceMetadata::MergeFrom(const EncryptedInvoiceMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_revisiondateandnumber()) {
      mutable_revisiondateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.revisiondateandnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncryptedInvoiceMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptedInvoiceMetadata::CopyFrom(const EncryptedInvoiceMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedInvoiceMetadata::IsInitialized() const {

  return true;
}

void EncryptedInvoiceMetadata::Swap(EncryptedInvoiceMetadata* other) {
  if (other != this) {
    std::swap(revisiondateandnumber_, other->revisiondateandnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncryptedInvoiceMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncryptedInvoiceMetadata_descriptor_;
  metadata.reflection = EncryptedInvoiceMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncryptedInvoiceCorrectionMetadata::kOriginalInvoiceDateAndNumberFieldNumber;
const int EncryptedInvoiceCorrectionMetadata::kOriginalInvoiceRevisionDateAndNumberFieldNumber;
const int EncryptedInvoiceCorrectionMetadata::kInvoiceCorrectionRevisionDateAndNumberFieldNumber;
#endif  // !_MSC_VER

EncryptedInvoiceCorrectionMetadata::EncryptedInvoiceCorrectionMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata)
}

void EncryptedInvoiceCorrectionMetadata::InitAsDefaultInstance() {
  originalinvoicedateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
  originalinvoicerevisiondateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
  invoicecorrectionrevisiondateandnumber_ = const_cast< ::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber*>(&::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::default_instance());
}

EncryptedInvoiceCorrectionMetadata::EncryptedInvoiceCorrectionMetadata(const EncryptedInvoiceCorrectionMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata)
}

void EncryptedInvoiceCorrectionMetadata::SharedCtor() {
  _cached_size_ = 0;
  originalinvoicedateandnumber_ = NULL;
  originalinvoicerevisiondateandnumber_ = NULL;
  invoicecorrectionrevisiondateandnumber_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptedInvoiceCorrectionMetadata::~EncryptedInvoiceCorrectionMetadata() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata)
  SharedDtor();
}

void EncryptedInvoiceCorrectionMetadata::SharedDtor() {
  if (this != default_instance_) {
    delete originalinvoicedateandnumber_;
    delete originalinvoicerevisiondateandnumber_;
    delete invoicecorrectionrevisiondateandnumber_;
  }
}

void EncryptedInvoiceCorrectionMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptedInvoiceCorrectionMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptedInvoiceCorrectionMetadata_descriptor_;
}

const EncryptedInvoiceCorrectionMetadata& EncryptedInvoiceCorrectionMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

EncryptedInvoiceCorrectionMetadata* EncryptedInvoiceCorrectionMetadata::default_instance_ = NULL;

EncryptedInvoiceCorrectionMetadata* EncryptedInvoiceCorrectionMetadata::New() const {
  return new EncryptedInvoiceCorrectionMetadata;
}

void EncryptedInvoiceCorrectionMetadata::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_originalinvoicedateandnumber()) {
      if (originalinvoicedateandnumber_ != NULL) originalinvoicedateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
    if (has_originalinvoicerevisiondateandnumber()) {
      if (originalinvoicerevisiondateandnumber_ != NULL) originalinvoicerevisiondateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
    if (has_invoicecorrectionrevisiondateandnumber()) {
      if (invoicecorrectionrevisiondateandnumber_ != NULL) invoicecorrectionrevisiondateandnumber_->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncryptedInvoiceCorrectionMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originalinvoicedateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_OriginalInvoiceRevisionDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceRevisionDateAndNumber = 2;
      case 2: {
        if (tag == 18) {
         parse_OriginalInvoiceRevisionDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originalinvoicerevisiondateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InvoiceCorrectionRevisionDateAndNumber;
        break;
      }

      // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber InvoiceCorrectionRevisionDateAndNumber = 3;
      case 3: {
        if (tag == 26) {
         parse_InvoiceCorrectionRevisionDateAndNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invoicecorrectionrevisiondateandnumber()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata)
  return false;
#undef DO_
}

void EncryptedInvoiceCorrectionMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata)
  // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 1;
  if (has_originalinvoicedateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->originalinvoicedateandnumber(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceRevisionDateAndNumber = 2;
  if (has_originalinvoicerevisiondateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->originalinvoicerevisiondateandnumber(), output);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber InvoiceCorrectionRevisionDateAndNumber = 3;
  if (has_invoicecorrectionrevisiondateandnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invoicecorrectionrevisiondateandnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata)
}

::google::protobuf::uint8* EncryptedInvoiceCorrectionMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata)
  // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 1;
  if (has_originalinvoicedateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->originalinvoicedateandnumber(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceRevisionDateAndNumber = 2;
  if (has_originalinvoicerevisiondateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->originalinvoicerevisiondateandnumber(), target);
  }

  // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber InvoiceCorrectionRevisionDateAndNumber = 3;
  if (has_invoicecorrectionrevisiondateandnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->invoicecorrectionrevisiondateandnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.EncryptedInvoiceCorrectionMetadata)
  return target;
}

int EncryptedInvoiceCorrectionMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 1;
    if (has_originalinvoicedateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originalinvoicedateandnumber());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber OriginalInvoiceRevisionDateAndNumber = 2;
    if (has_originalinvoicerevisiondateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originalinvoicerevisiondateandnumber());
    }

    // optional .Diadoc.Api.Proto.Docflow.DocumentDateAndNumber InvoiceCorrectionRevisionDateAndNumber = 3;
    if (has_invoicecorrectionrevisiondateandnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invoicecorrectionrevisiondateandnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptedInvoiceCorrectionMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncryptedInvoiceCorrectionMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncryptedInvoiceCorrectionMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncryptedInvoiceCorrectionMetadata::MergeFrom(const EncryptedInvoiceCorrectionMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_originalinvoicedateandnumber()) {
      mutable_originalinvoicedateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.originalinvoicedateandnumber());
    }
    if (from.has_originalinvoicerevisiondateandnumber()) {
      mutable_originalinvoicerevisiondateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.originalinvoicerevisiondateandnumber());
    }
    if (from.has_invoicecorrectionrevisiondateandnumber()) {
      mutable_invoicecorrectionrevisiondateandnumber()->::Diadoc::Api::Proto::Docflow::DocumentDateAndNumber::MergeFrom(from.invoicecorrectionrevisiondateandnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncryptedInvoiceCorrectionMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptedInvoiceCorrectionMetadata::CopyFrom(const EncryptedInvoiceCorrectionMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedInvoiceCorrectionMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EncryptedInvoiceCorrectionMetadata::Swap(EncryptedInvoiceCorrectionMetadata* other) {
  if (other != this) {
    std::swap(originalinvoicedateandnumber_, other->originalinvoicedateandnumber_);
    std::swap(originalinvoicerevisiondateandnumber_, other->originalinvoicerevisiondateandnumber_);
    std::swap(invoicecorrectionrevisiondateandnumber_, other->invoicecorrectionrevisiondateandnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncryptedInvoiceCorrectionMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncryptedInvoiceCorrectionMetadata_descriptor_;
  metadata.reflection = EncryptedInvoiceCorrectionMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XmlDocumentAttachment::kSignedContentFieldNumber;
const int XmlDocumentAttachment::kCommentFieldNumber;
const int XmlDocumentAttachment::kInitialDocumentIdsFieldNumber;
const int XmlDocumentAttachment::kSubordinateDocumentIdsFieldNumber;
const int XmlDocumentAttachment::kCustomDocumentIdFieldNumber;
const int XmlDocumentAttachment::kNeedReceiptFieldNumber;
const int XmlDocumentAttachment::kCustomDataFieldNumber;
#endif  // !_MSC_VER

XmlDocumentAttachment::XmlDocumentAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.XmlDocumentAttachment)
}

void XmlDocumentAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

XmlDocumentAttachment::XmlDocumentAttachment(const XmlDocumentAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.XmlDocumentAttachment)
}

void XmlDocumentAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XmlDocumentAttachment::~XmlDocumentAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.XmlDocumentAttachment)
  SharedDtor();
}

void XmlDocumentAttachment::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void XmlDocumentAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmlDocumentAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XmlDocumentAttachment_descriptor_;
}

const XmlDocumentAttachment& XmlDocumentAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

XmlDocumentAttachment* XmlDocumentAttachment::default_instance_ = NULL;

XmlDocumentAttachment* XmlDocumentAttachment::New() const {
  return new XmlDocumentAttachment;
}

void XmlDocumentAttachment::Clear() {
  if (_has_bits_[0 / 32] & 51) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XmlDocumentAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.XmlDocumentAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (tag == 34) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 6;
      case 6: {
        if (tag == 50) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 8;
      case 8: {
        if (tag == 66) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_CustomData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.XmlDocumentAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.XmlDocumentAttachment)
  return false;
#undef DO_
}

void XmlDocumentAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.XmlDocumentAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->customdocumentid(), output);
  }

  // optional bool NeedReceipt = 7 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->needreceipt(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 8;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->customdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.XmlDocumentAttachment)
}

::google::protobuf::uint8* XmlDocumentAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.XmlDocumentAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->customdocumentid(), target);
  }

  // optional bool NeedReceipt = 7 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->needreceipt(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 8;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->customdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.XmlDocumentAttachment)
  return target;
}

int XmlDocumentAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string CustomDocumentId = 6;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional bool NeedReceipt = 7 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 8;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmlDocumentAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XmlDocumentAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XmlDocumentAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XmlDocumentAttachment::MergeFrom(const XmlDocumentAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XmlDocumentAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmlDocumentAttachment::CopyFrom(const XmlDocumentAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlDocumentAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  return true;
}

void XmlDocumentAttachment::Swap(XmlDocumentAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(needreceipt_, other->needreceipt_);
    customdata_.Swap(&other->customdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XmlDocumentAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XmlDocumentAttachment_descriptor_;
  metadata.reflection = XmlDocumentAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NonformalizedAttachment::kSignedContentFieldNumber;
const int NonformalizedAttachment::kFileNameFieldNumber;
const int NonformalizedAttachment::kCommentFieldNumber;
const int NonformalizedAttachment::kNeedRecipientSignatureFieldNumber;
const int NonformalizedAttachment::kInitialDocumentIdsFieldNumber;
const int NonformalizedAttachment::kSubordinateDocumentIdsFieldNumber;
const int NonformalizedAttachment::kDocumentDateFieldNumber;
const int NonformalizedAttachment::kDocumentNumberFieldNumber;
const int NonformalizedAttachment::kCustomDocumentIdFieldNumber;
const int NonformalizedAttachment::kNeedReceiptFieldNumber;
const int NonformalizedAttachment::kCustomDataFieldNumber;
#endif  // !_MSC_VER

NonformalizedAttachment::NonformalizedAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.NonformalizedAttachment)
}

void NonformalizedAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

NonformalizedAttachment::NonformalizedAttachment(const NonformalizedAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.NonformalizedAttachment)
}

void NonformalizedAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needrecipientsignature_ = false;
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NonformalizedAttachment::~NonformalizedAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.NonformalizedAttachment)
  SharedDtor();
}

void NonformalizedAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void NonformalizedAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NonformalizedAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NonformalizedAttachment_descriptor_;
}

const NonformalizedAttachment& NonformalizedAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

NonformalizedAttachment* NonformalizedAttachment::default_instance_ = NULL;

NonformalizedAttachment* NonformalizedAttachment::New() const {
  return new NonformalizedAttachment;
}

void NonformalizedAttachment::Clear() {
  if (_has_bits_[0 / 32] & 207) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    needrecipientsignature_ = false;
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NonformalizedAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.NonformalizedAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_NeedRecipientSignature;
        break;
      }

      // optional bool NeedRecipientSignature = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_NeedRecipientSignature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needrecipientsignature_)));
          set_has_needrecipientsignature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
      case 6: {
        if (tag == 50) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(58)) goto parse_DocumentDate;
        break;
      }

      // optional string DocumentDate = 7;
      case 7: {
        if (tag == 58) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DocumentNumber;
        break;
      }

      // optional string DocumentNumber = 8;
      case 8: {
        if (tag == 66) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (tag == 74) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
      case 11: {
        if (tag == 90) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_CustomData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.NonformalizedAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.NonformalizedAttachment)
  return false;
#undef DO_
}

void NonformalizedAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.NonformalizedAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // optional bool NeedRecipientSignature = 4 [default = false];
  if (has_needrecipientsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->needrecipientsignature(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->subordinatedocumentids(i), output);
  }

  // optional string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->documentdate(), output);
  }

  // optional string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->documentnumber(), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->customdocumentid(), output);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->needreceipt(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->customdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.NonformalizedAttachment)
}

::google::protobuf::uint8* NonformalizedAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.NonformalizedAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // optional bool NeedRecipientSignature = 4 [default = false];
  if (has_needrecipientsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->needrecipientsignature(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->subordinatedocumentids(i), target);
  }

  // optional string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentdate(), target);
  }

  // optional string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->documentnumber(), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->needreceipt(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->customdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.NonformalizedAttachment)
  return target;
}

int NonformalizedAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional bool NeedRecipientSignature = 4 [default = false];
    if (has_needrecipientsignature()) {
      total_size += 1 + 1;
    }

    // optional string DocumentDate = 7;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // optional string DocumentNumber = 8;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional bool NeedReceipt = 10 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NonformalizedAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NonformalizedAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NonformalizedAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NonformalizedAttachment::MergeFrom(const NonformalizedAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_needrecipientsignature()) {
      set_needrecipientsignature(from.needrecipientsignature());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NonformalizedAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NonformalizedAttachment::CopyFrom(const NonformalizedAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonformalizedAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  return true;
}

void NonformalizedAttachment::Swap(NonformalizedAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    std::swap(needrecipientsignature_, other->needrecipientsignature_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(needreceipt_, other->needreceipt_);
    customdata_.Swap(&other->customdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NonformalizedAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NonformalizedAttachment_descriptor_;
  metadata.reflection = NonformalizedAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BasicDocumentAttachment::kSignedContentFieldNumber;
const int BasicDocumentAttachment::kFileNameFieldNumber;
const int BasicDocumentAttachment::kCommentFieldNumber;
const int BasicDocumentAttachment::kInitialDocumentIdsFieldNumber;
const int BasicDocumentAttachment::kSubordinateDocumentIdsFieldNumber;
const int BasicDocumentAttachment::kDocumentDateFieldNumber;
const int BasicDocumentAttachment::kDocumentNumberFieldNumber;
const int BasicDocumentAttachment::kTotalFieldNumber;
const int BasicDocumentAttachment::kCustomDocumentIdFieldNumber;
const int BasicDocumentAttachment::kVatFieldNumber;
const int BasicDocumentAttachment::kGroundsFieldNumber;
const int BasicDocumentAttachment::kNeedReceiptFieldNumber;
const int BasicDocumentAttachment::kCustomDataFieldNumber;
#endif  // !_MSC_VER

BasicDocumentAttachment::BasicDocumentAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.BasicDocumentAttachment)
}

void BasicDocumentAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

BasicDocumentAttachment::BasicDocumentAttachment(const BasicDocumentAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.BasicDocumentAttachment)
}

void BasicDocumentAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicDocumentAttachment::~BasicDocumentAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.BasicDocumentAttachment)
  SharedDtor();
}

void BasicDocumentAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grounds_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void BasicDocumentAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicDocumentAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicDocumentAttachment_descriptor_;
}

const BasicDocumentAttachment& BasicDocumentAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

BasicDocumentAttachment* BasicDocumentAttachment::default_instance_ = NULL;

BasicDocumentAttachment* BasicDocumentAttachment::New() const {
  return new BasicDocumentAttachment;
}

void BasicDocumentAttachment::Clear() {
  if (_has_bits_[0 / 32] & 231) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    if (has_grounds()) {
      if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grounds_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BasicDocumentAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.BasicDocumentAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (tag == 34) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 6;
      case 6: {
        if (tag == 50) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DocumentNumber;
        break;
      }

      // required string DocumentNumber = 7;
      case 7: {
        if (tag == 58) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Total;
        break;
      }

      // required string Total = 8;
      case 8: {
        if (tag == 66) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (tag == 74) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Vat;
        break;
      }

      // optional string Vat = 10;
      case 10: {
        if (tag == 82) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Grounds;
        break;
      }

      // optional string Grounds = 11;
      case 11: {
        if (tag == 90) {
         parse_Grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grounds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grounds().data(), this->grounds().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grounds");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
      case 13: {
        if (tag == 106) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_CustomData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.BasicDocumentAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.BasicDocumentAttachment)
  return false;
#undef DO_
}

void BasicDocumentAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.BasicDocumentAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // required string DocumentDate = 6;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->documentdate(), output);
  }

  // required string DocumentNumber = 7;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->documentnumber(), output);
  }

  // required string Total = 8;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->total(), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->customdocumentid(), output);
  }

  // optional string Vat = 10;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->vat(), output);
  }

  // optional string Grounds = 11;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->grounds(), output);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->needreceipt(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->customdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.BasicDocumentAttachment)
}

::google::protobuf::uint8* BasicDocumentAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.BasicDocumentAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // required string DocumentDate = 6;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->documentdate(), target);
  }

  // required string DocumentNumber = 7;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentnumber(), target);
  }

  // required string Total = 8;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->total(), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional string Vat = 10;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->vat(), target);
  }

  // optional string Grounds = 11;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->grounds(), target);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->needreceipt(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->customdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.BasicDocumentAttachment)
  return target;
}

int BasicDocumentAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required string DocumentDate = 6;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // required string DocumentNumber = 7;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // required string Total = 8;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional string Vat = 10;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // optional string Grounds = 11;
    if (has_grounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grounds());
    }

    // optional bool NeedReceipt = 12 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicDocumentAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BasicDocumentAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BasicDocumentAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasicDocumentAttachment::MergeFrom(const BasicDocumentAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_grounds()) {
      set_grounds(from.grounds());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BasicDocumentAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicDocumentAttachment::CopyFrom(const BasicDocumentAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicDocumentAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e3) != 0x000000e3) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  return true;
}

void BasicDocumentAttachment::Swap(BasicDocumentAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(total_, other->total_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(vat_, other->vat_);
    std::swap(grounds_, other->grounds_);
    std::swap(needreceipt_, other->needreceipt_);
    customdata_.Swap(&other->customdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BasicDocumentAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicDocumentAttachment_descriptor_;
  metadata.reflection = BasicDocumentAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Torg13Attachment::kSignedContentFieldNumber;
const int Torg13Attachment::kFileNameFieldNumber;
const int Torg13Attachment::kCommentFieldNumber;
const int Torg13Attachment::kInitialDocumentIdsFieldNumber;
const int Torg13Attachment::kSubordinateDocumentIdsFieldNumber;
const int Torg13Attachment::kDocumentDateFieldNumber;
const int Torg13Attachment::kDocumentNumberFieldNumber;
const int Torg13Attachment::kTotalFieldNumber;
const int Torg13Attachment::kCustomDocumentIdFieldNumber;
const int Torg13Attachment::kGroundsFieldNumber;
const int Torg13Attachment::kNeedReceiptFieldNumber;
const int Torg13Attachment::kCustomDataFieldNumber;
#endif  // !_MSC_VER

Torg13Attachment::Torg13Attachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.Torg13Attachment)
}

void Torg13Attachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

Torg13Attachment::Torg13Attachment(const Torg13Attachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.Torg13Attachment)
}

void Torg13Attachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Torg13Attachment::~Torg13Attachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.Torg13Attachment)
  SharedDtor();
}

void Torg13Attachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grounds_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void Torg13Attachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Torg13Attachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Torg13Attachment_descriptor_;
}

const Torg13Attachment& Torg13Attachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

Torg13Attachment* Torg13Attachment::default_instance_ = NULL;

Torg13Attachment* Torg13Attachment::New() const {
  return new Torg13Attachment;
}

void Torg13Attachment::Clear() {
  if (_has_bits_[0 / 32] & 231) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
    if (has_grounds()) {
      if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grounds_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Torg13Attachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.Torg13Attachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (tag == 34) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 6;
      case 6: {
        if (tag == 50) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DocumentNumber;
        break;
      }

      // required string DocumentNumber = 7;
      case 7: {
        if (tag == 58) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Total;
        break;
      }

      // required string Total = 8;
      case 8: {
        if (tag == 66) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (tag == 74) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Grounds;
        break;
      }

      // optional string Grounds = 11;
      case 11: {
        if (tag == 90) {
         parse_Grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grounds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grounds().data(), this->grounds().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grounds");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
      case 13: {
        if (tag == 106) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_CustomData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.Torg13Attachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.Torg13Attachment)
  return false;
#undef DO_
}

void Torg13Attachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.Torg13Attachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // required string DocumentDate = 6;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->documentdate(), output);
  }

  // required string DocumentNumber = 7;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->documentnumber(), output);
  }

  // required string Total = 8;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->total(), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->customdocumentid(), output);
  }

  // optional string Grounds = 11;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->grounds(), output);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->needreceipt(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->customdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.Torg13Attachment)
}

::google::protobuf::uint8* Torg13Attachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.Torg13Attachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // required string DocumentDate = 6;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->documentdate(), target);
  }

  // required string DocumentNumber = 7;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentnumber(), target);
  }

  // required string Total = 8;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->total(), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional string Grounds = 11;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->grounds(), target);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->needreceipt(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->customdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.Torg13Attachment)
  return target;
}

int Torg13Attachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required string DocumentDate = 6;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // required string DocumentNumber = 7;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // required string Total = 8;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional string Grounds = 11;
    if (has_grounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grounds());
    }

    // optional bool NeedReceipt = 12 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Torg13Attachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Torg13Attachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Torg13Attachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Torg13Attachment::MergeFrom(const Torg13Attachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_grounds()) {
      set_grounds(from.grounds());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Torg13Attachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Torg13Attachment::CopyFrom(const Torg13Attachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Torg13Attachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e3) != 0x000000e3) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  return true;
}

void Torg13Attachment::Swap(Torg13Attachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(total_, other->total_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(grounds_, other->grounds_);
    std::swap(needreceipt_, other->needreceipt_);
    customdata_.Swap(&other->customdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Torg13Attachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Torg13Attachment_descriptor_;
  metadata.reflection = Torg13Attachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptanceCertificateAttachment::kSignedContentFieldNumber;
const int AcceptanceCertificateAttachment::kFileNameFieldNumber;
const int AcceptanceCertificateAttachment::kCommentFieldNumber;
const int AcceptanceCertificateAttachment::kInitialDocumentIdsFieldNumber;
const int AcceptanceCertificateAttachment::kSubordinateDocumentIdsFieldNumber;
const int AcceptanceCertificateAttachment::kDocumentDateFieldNumber;
const int AcceptanceCertificateAttachment::kDocumentNumberFieldNumber;
const int AcceptanceCertificateAttachment::kTotalFieldNumber;
const int AcceptanceCertificateAttachment::kCustomDocumentIdFieldNumber;
const int AcceptanceCertificateAttachment::kVatFieldNumber;
const int AcceptanceCertificateAttachment::kGroundsFieldNumber;
const int AcceptanceCertificateAttachment::kNeedReceiptFieldNumber;
const int AcceptanceCertificateAttachment::kNeedRecipientSignatureFieldNumber;
const int AcceptanceCertificateAttachment::kCustomDataFieldNumber;
#endif  // !_MSC_VER

AcceptanceCertificateAttachment::AcceptanceCertificateAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment)
}

void AcceptanceCertificateAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

AcceptanceCertificateAttachment::AcceptanceCertificateAttachment(const AcceptanceCertificateAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment)
}

void AcceptanceCertificateAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grounds_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needreceipt_ = false;
  needrecipientsignature_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptanceCertificateAttachment::~AcceptanceCertificateAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment)
  SharedDtor();
}

void AcceptanceCertificateAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vat_;
  }
  if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grounds_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void AcceptanceCertificateAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptanceCertificateAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptanceCertificateAttachment_descriptor_;
}

const AcceptanceCertificateAttachment& AcceptanceCertificateAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

AcceptanceCertificateAttachment* AcceptanceCertificateAttachment::default_instance_ = NULL;

AcceptanceCertificateAttachment* AcceptanceCertificateAttachment::New() const {
  return new AcceptanceCertificateAttachment;
}

void AcceptanceCertificateAttachment::Clear() {
  if (_has_bits_[0 / 32] & 231) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
    if (has_vat()) {
      if (vat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vat_->clear();
      }
    }
    if (has_grounds()) {
      if (grounds_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grounds_->clear();
      }
    }
    needreceipt_ = false;
    needrecipientsignature_ = true;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptanceCertificateAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (tag == 34) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 6;
      case 6: {
        if (tag == 50) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DocumentNumber;
        break;
      }

      // optional string DocumentNumber = 7 [default = ""];
      case 7: {
        if (tag == 58) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Total;
        break;
      }

      // required string Total = 8;
      case 8: {
        if (tag == 66) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (tag == 74) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Vat;
        break;
      }

      // optional string Vat = 10;
      case 10: {
        if (tag == 82) {
         parse_Vat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vat().data(), this->vat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Grounds;
        break;
      }

      // optional string Grounds = 11;
      case 11: {
        if (tag == 90) {
         parse_Grounds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grounds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grounds().data(), this->grounds().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grounds");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_NeedRecipientSignature;
        break;
      }

      // optional bool NeedRecipientSignature = 13 [default = true];
      case 13: {
        if (tag == 104) {
         parse_NeedRecipientSignature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needrecipientsignature_)));
          set_has_needrecipientsignature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 14;
      case 14: {
        if (tag == 114) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_CustomData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment)
  return false;
#undef DO_
}

void AcceptanceCertificateAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // required string DocumentDate = 6;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->documentdate(), output);
  }

  // optional string DocumentNumber = 7 [default = ""];
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->documentnumber(), output);
  }

  // required string Total = 8;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->total(), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->customdocumentid(), output);
  }

  // optional string Vat = 10;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->vat(), output);
  }

  // optional string Grounds = 11;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->grounds(), output);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->needreceipt(), output);
  }

  // optional bool NeedRecipientSignature = 13 [default = true];
  if (has_needrecipientsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->needrecipientsignature(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 14;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->customdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment)
}

::google::protobuf::uint8* AcceptanceCertificateAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // required string DocumentDate = 6;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->documentdate(), target);
  }

  // optional string DocumentNumber = 7 [default = ""];
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentnumber(), target);
  }

  // required string Total = 8;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->total(), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional string Vat = 10;
  if (has_vat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vat().data(), this->vat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->vat(), target);
  }

  // optional string Grounds = 11;
  if (has_grounds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grounds().data(), this->grounds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grounds");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->grounds(), target);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->needreceipt(), target);
  }

  // optional bool NeedRecipientSignature = 13 [default = true];
  if (has_needrecipientsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->needrecipientsignature(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 14;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->customdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.AcceptanceCertificateAttachment)
  return target;
}

int AcceptanceCertificateAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required string DocumentDate = 6;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // optional string DocumentNumber = 7 [default = ""];
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // required string Total = 8;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional string Vat = 10;
    if (has_vat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vat());
    }

    // optional string Grounds = 11;
    if (has_grounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grounds());
    }

    // optional bool NeedReceipt = 12 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

    // optional bool NeedRecipientSignature = 13 [default = true];
    if (has_needrecipientsignature()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 14;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptanceCertificateAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptanceCertificateAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptanceCertificateAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptanceCertificateAttachment::MergeFrom(const AcceptanceCertificateAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_vat()) {
      set_vat(from.vat());
    }
    if (from.has_grounds()) {
      set_grounds(from.grounds());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
    if (from.has_needrecipientsignature()) {
      set_needrecipientsignature(from.needrecipientsignature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptanceCertificateAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptanceCertificateAttachment::CopyFrom(const AcceptanceCertificateAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptanceCertificateAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000a3) != 0x000000a3) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  return true;
}

void AcceptanceCertificateAttachment::Swap(AcceptanceCertificateAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(total_, other->total_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(vat_, other->vat_);
    std::swap(grounds_, other->grounds_);
    std::swap(needreceipt_, other->needreceipt_);
    std::swap(needrecipientsignature_, other->needrecipientsignature_);
    customdata_.Swap(&other->customdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptanceCertificateAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptanceCertificateAttachment_descriptor_;
  metadata.reflection = AcceptanceCertificateAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrustConnectionRequestAttachment::kSignedContentFieldNumber;
const int TrustConnectionRequestAttachment::kFileNameFieldNumber;
const int TrustConnectionRequestAttachment::kCommentFieldNumber;
const int TrustConnectionRequestAttachment::kCustomDocumentIdFieldNumber;
const int TrustConnectionRequestAttachment::kCustomDataFieldNumber;
#endif  // !_MSC_VER

TrustConnectionRequestAttachment::TrustConnectionRequestAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment)
}

void TrustConnectionRequestAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

TrustConnectionRequestAttachment::TrustConnectionRequestAttachment(const TrustConnectionRequestAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment)
}

void TrustConnectionRequestAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrustConnectionRequestAttachment::~TrustConnectionRequestAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment)
  SharedDtor();
}

void TrustConnectionRequestAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void TrustConnectionRequestAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrustConnectionRequestAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrustConnectionRequestAttachment_descriptor_;
}

const TrustConnectionRequestAttachment& TrustConnectionRequestAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

TrustConnectionRequestAttachment* TrustConnectionRequestAttachment::default_instance_ = NULL;

TrustConnectionRequestAttachment* TrustConnectionRequestAttachment::New() const {
  return new TrustConnectionRequestAttachment;
}

void TrustConnectionRequestAttachment::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
  }
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrustConnectionRequestAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 4;
      case 4: {
        if (tag == 34) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 5;
      case 5: {
        if (tag == 42) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_CustomData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment)
  return false;
#undef DO_
}

void TrustConnectionRequestAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // optional string CustomDocumentId = 4;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->customdocumentid(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 5;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->customdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment)
}

::google::protobuf::uint8* TrustConnectionRequestAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // optional string CustomDocumentId = 4;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->customdocumentid(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 5;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->customdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.TrustConnectionRequestAttachment)
  return target;
}

int TrustConnectionRequestAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string CustomDocumentId = 4;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

  }
  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 5;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrustConnectionRequestAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrustConnectionRequestAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrustConnectionRequestAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrustConnectionRequestAttachment::MergeFrom(const TrustConnectionRequestAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrustConnectionRequestAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrustConnectionRequestAttachment::CopyFrom(const TrustConnectionRequestAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustConnectionRequestAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  return true;
}

void TrustConnectionRequestAttachment::Swap(TrustConnectionRequestAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    std::swap(customdocumentid_, other->customdocumentid_);
    customdata_.Swap(&other->customdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrustConnectionRequestAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrustConnectionRequestAttachment_descriptor_;
  metadata.reflection = TrustConnectionRequestAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StructuredDataAttachment::kContentFieldNumber;
const int StructuredDataAttachment::kFileNameFieldNumber;
const int StructuredDataAttachment::kParentCustomDocumentIdFieldNumber;
#endif  // !_MSC_VER

StructuredDataAttachment::StructuredDataAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.StructuredDataAttachment)
}

void StructuredDataAttachment::InitAsDefaultInstance() {
}

StructuredDataAttachment::StructuredDataAttachment(const StructuredDataAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.StructuredDataAttachment)
}

void StructuredDataAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parentcustomdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StructuredDataAttachment::~StructuredDataAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.StructuredDataAttachment)
  SharedDtor();
}

void StructuredDataAttachment::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (parentcustomdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parentcustomdocumentid_;
  }
  if (this != default_instance_) {
  }
}

void StructuredDataAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StructuredDataAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StructuredDataAttachment_descriptor_;
}

const StructuredDataAttachment& StructuredDataAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

StructuredDataAttachment* StructuredDataAttachment::default_instance_ = NULL;

StructuredDataAttachment* StructuredDataAttachment::New() const {
  return new StructuredDataAttachment;
}

void StructuredDataAttachment::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_parentcustomdocumentid()) {
      if (parentcustomdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parentcustomdocumentid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StructuredDataAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.StructuredDataAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ParentCustomDocumentId;
        break;
      }

      // required string ParentCustomDocumentId = 3;
      case 3: {
        if (tag == 26) {
         parse_ParentCustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentcustomdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parentcustomdocumentid().data(), this->parentcustomdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parentcustomdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.StructuredDataAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.StructuredDataAttachment)
  return false;
#undef DO_
}

void StructuredDataAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.StructuredDataAttachment)
  // required bytes Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // required string ParentCustomDocumentId = 3;
  if (has_parentcustomdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentcustomdocumentid().data(), this->parentcustomdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parentcustomdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parentcustomdocumentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.StructuredDataAttachment)
}

::google::protobuf::uint8* StructuredDataAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.StructuredDataAttachment)
  // required bytes Content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // required string ParentCustomDocumentId = 3;
  if (has_parentcustomdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parentcustomdocumentid().data(), this->parentcustomdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parentcustomdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parentcustomdocumentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.StructuredDataAttachment)
  return target;
}

int StructuredDataAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required string ParentCustomDocumentId = 3;
    if (has_parentcustomdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentcustomdocumentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StructuredDataAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StructuredDataAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StructuredDataAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StructuredDataAttachment::MergeFrom(const StructuredDataAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_parentcustomdocumentid()) {
      set_parentcustomdocumentid(from.parentcustomdocumentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StructuredDataAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StructuredDataAttachment::CopyFrom(const StructuredDataAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredDataAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StructuredDataAttachment::Swap(StructuredDataAttachment* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(filename_, other->filename_);
    std::swap(parentcustomdocumentid_, other->parentcustomdocumentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StructuredDataAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StructuredDataAttachment_descriptor_;
  metadata.reflection = StructuredDataAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PriceListAttachment::kSignedContentFieldNumber;
const int PriceListAttachment::kFileNameFieldNumber;
const int PriceListAttachment::kCommentFieldNumber;
const int PriceListAttachment::kInitialDocumentIdsFieldNumber;
const int PriceListAttachment::kSubordinateDocumentIdsFieldNumber;
const int PriceListAttachment::kCustomDocumentIdFieldNumber;
const int PriceListAttachment::kDocumentDateFieldNumber;
const int PriceListAttachment::kDocumentNumberFieldNumber;
const int PriceListAttachment::kPriceListEffectiveDateFieldNumber;
const int PriceListAttachment::kContractDocumentDateFieldNumber;
const int PriceListAttachment::kContractDocumentNumberFieldNumber;
const int PriceListAttachment::kNeedReceiptFieldNumber;
const int PriceListAttachment::kCustomDataFieldNumber;
#endif  // !_MSC_VER

PriceListAttachment::PriceListAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.PriceListAttachment)
}

void PriceListAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

PriceListAttachment::PriceListAttachment(const PriceListAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.PriceListAttachment)
}

void PriceListAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pricelisteffectivedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractdocumentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractdocumentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceListAttachment::~PriceListAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.PriceListAttachment)
  SharedDtor();
}

void PriceListAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (pricelisteffectivedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pricelisteffectivedate_;
  }
  if (contractdocumentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractdocumentdate_;
  }
  if (contractdocumentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractdocumentnumber_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void PriceListAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceListAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceListAttachment_descriptor_;
}

const PriceListAttachment& PriceListAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

PriceListAttachment* PriceListAttachment::default_instance_ = NULL;

PriceListAttachment* PriceListAttachment::New() const {
  return new PriceListAttachment;
}

void PriceListAttachment::Clear() {
  if (_has_bits_[0 / 32] & 231) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_pricelisteffectivedate()) {
      if (pricelisteffectivedate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pricelisteffectivedate_->clear();
      }
    }
    if (has_contractdocumentdate()) {
      if (contractdocumentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractdocumentdate_->clear();
      }
    }
    if (has_contractdocumentnumber()) {
      if (contractdocumentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractdocumentnumber_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceListAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.PriceListAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (tag == 34) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 6;
      case 6: {
        if (tag == 50) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 7;
      case 7: {
        if (tag == 58) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DocumentNumber;
        break;
      }

      // required string DocumentNumber = 8;
      case 8: {
        if (tag == 66) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_PriceListEffectiveDate;
        break;
      }

      // required string PriceListEffectiveDate = 9;
      case 9: {
        if (tag == 74) {
         parse_PriceListEffectiveDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricelisteffectivedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pricelisteffectivedate().data(), this->pricelisteffectivedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pricelisteffectivedate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ContractDocumentDate;
        break;
      }

      // required string ContractDocumentDate = 10;
      case 10: {
        if (tag == 82) {
         parse_ContractDocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractdocumentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractdocumentdate().data(), this->contractdocumentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractdocumentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ContractDocumentNumber;
        break;
      }

      // required string ContractDocumentNumber = 11;
      case 11: {
        if (tag == 90) {
         parse_ContractDocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractdocumentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractdocumentnumber().data(), this->contractdocumentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractdocumentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
      case 13: {
        if (tag == 106) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_CustomData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.PriceListAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.PriceListAttachment)
  return false;
#undef DO_
}

void PriceListAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.PriceListAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->customdocumentid(), output);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->documentdate(), output);
  }

  // required string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->documentnumber(), output);
  }

  // required string PriceListEffectiveDate = 9;
  if (has_pricelisteffectivedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricelisteffectivedate().data(), this->pricelisteffectivedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pricelisteffectivedate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->pricelisteffectivedate(), output);
  }

  // required string ContractDocumentDate = 10;
  if (has_contractdocumentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractdocumentdate().data(), this->contractdocumentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractdocumentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->contractdocumentdate(), output);
  }

  // required string ContractDocumentNumber = 11;
  if (has_contractdocumentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractdocumentnumber().data(), this->contractdocumentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractdocumentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->contractdocumentnumber(), output);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->needreceipt(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->customdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.PriceListAttachment)
}

::google::protobuf::uint8* PriceListAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.PriceListAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->customdocumentid(), target);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentdate(), target);
  }

  // required string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->documentnumber(), target);
  }

  // required string PriceListEffectiveDate = 9;
  if (has_pricelisteffectivedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pricelisteffectivedate().data(), this->pricelisteffectivedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pricelisteffectivedate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->pricelisteffectivedate(), target);
  }

  // required string ContractDocumentDate = 10;
  if (has_contractdocumentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractdocumentdate().data(), this->contractdocumentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractdocumentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->contractdocumentdate(), target);
  }

  // required string ContractDocumentNumber = 11;
  if (has_contractdocumentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractdocumentnumber().data(), this->contractdocumentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractdocumentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->contractdocumentnumber(), target);
  }

  // optional bool NeedReceipt = 12 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->needreceipt(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->customdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.PriceListAttachment)
  return target;
}

int PriceListAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string CustomDocumentId = 6;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // required string DocumentDate = 7;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // required string DocumentNumber = 8;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string PriceListEffectiveDate = 9;
    if (has_pricelisteffectivedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricelisteffectivedate());
    }

    // required string ContractDocumentDate = 10;
    if (has_contractdocumentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractdocumentdate());
    }

    // required string ContractDocumentNumber = 11;
    if (has_contractdocumentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractdocumentnumber());
    }

    // optional bool NeedReceipt = 12 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 13;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceListAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceListAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceListAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceListAttachment::MergeFrom(const PriceListAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pricelisteffectivedate()) {
      set_pricelisteffectivedate(from.pricelisteffectivedate());
    }
    if (from.has_contractdocumentdate()) {
      set_contractdocumentdate(from.contractdocumentdate());
    }
    if (from.has_contractdocumentnumber()) {
      set_contractdocumentnumber(from.contractdocumentnumber());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceListAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceListAttachment::CopyFrom(const PriceListAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceListAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007c3) != 0x000007c3) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  return true;
}

void PriceListAttachment::Swap(PriceListAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(pricelisteffectivedate_, other->pricelisteffectivedate_);
    std::swap(contractdocumentdate_, other->contractdocumentdate_);
    std::swap(contractdocumentnumber_, other->contractdocumentnumber_);
    std::swap(needreceipt_, other->needreceipt_);
    customdata_.Swap(&other->customdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceListAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceListAttachment_descriptor_;
  metadata.reflection = PriceListAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconciliationActAttachment::kSignedContentFieldNumber;
const int ReconciliationActAttachment::kFileNameFieldNumber;
const int ReconciliationActAttachment::kCommentFieldNumber;
const int ReconciliationActAttachment::kInitialDocumentIdsFieldNumber;
const int ReconciliationActAttachment::kSubordinateDocumentIdsFieldNumber;
const int ReconciliationActAttachment::kDocumentDateFieldNumber;
const int ReconciliationActAttachment::kDocumentNumberFieldNumber;
const int ReconciliationActAttachment::kCustomDocumentIdFieldNumber;
const int ReconciliationActAttachment::kNeedReceiptFieldNumber;
const int ReconciliationActAttachment::kCustomDataFieldNumber;
#endif  // !_MSC_VER

ReconciliationActAttachment::ReconciliationActAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ReconciliationActAttachment)
}

void ReconciliationActAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

ReconciliationActAttachment::ReconciliationActAttachment(const ReconciliationActAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ReconciliationActAttachment)
}

void ReconciliationActAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconciliationActAttachment::~ReconciliationActAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ReconciliationActAttachment)
  SharedDtor();
}

void ReconciliationActAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void ReconciliationActAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconciliationActAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconciliationActAttachment_descriptor_;
}

const ReconciliationActAttachment& ReconciliationActAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

ReconciliationActAttachment* ReconciliationActAttachment::default_instance_ = NULL;

ReconciliationActAttachment* ReconciliationActAttachment::New() const {
  return new ReconciliationActAttachment;
}

void ReconciliationActAttachment::Clear() {
  if (_has_bits_[0 / 32] & 231) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
  }
  needreceipt_ = false;
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconciliationActAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ReconciliationActAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
      case 6: {
        if (tag == 50) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(58)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 7;
      case 7: {
        if (tag == 58) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DocumentNumber;
        break;
      }

      // optional string DocumentNumber = 8 [default = ""];
      case 8: {
        if (tag == 66) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (tag == 74) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
      case 11: {
        if (tag == 90) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_CustomData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ReconciliationActAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ReconciliationActAttachment)
  return false;
#undef DO_
}

void ReconciliationActAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ReconciliationActAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->subordinatedocumentids(i), output);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->documentdate(), output);
  }

  // optional string DocumentNumber = 8 [default = ""];
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->documentnumber(), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->customdocumentid(), output);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->needreceipt(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->customdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ReconciliationActAttachment)
}

::google::protobuf::uint8* ReconciliationActAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ReconciliationActAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->subordinatedocumentids(i), target);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentdate(), target);
  }

  // optional string DocumentNumber = 8 [default = ""];
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->documentnumber(), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->needreceipt(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->customdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ReconciliationActAttachment)
  return target;
}

int ReconciliationActAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required string DocumentDate = 7;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // optional string DocumentNumber = 8 [default = ""];
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool NeedReceipt = 10 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconciliationActAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconciliationActAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconciliationActAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconciliationActAttachment::MergeFrom(const ReconciliationActAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconciliationActAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconciliationActAttachment::CopyFrom(const ReconciliationActAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconciliationActAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  return true;
}

void ReconciliationActAttachment::Swap(ReconciliationActAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(needreceipt_, other->needreceipt_);
    customdata_.Swap(&other->customdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconciliationActAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconciliationActAttachment_descriptor_;
  metadata.reflection = ReconciliationActAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContractAttachment::kSignedContentFieldNumber;
const int ContractAttachment::kFileNameFieldNumber;
const int ContractAttachment::kCommentFieldNumber;
const int ContractAttachment::kInitialDocumentIdsFieldNumber;
const int ContractAttachment::kSubordinateDocumentIdsFieldNumber;
const int ContractAttachment::kCustomDocumentIdFieldNumber;
const int ContractAttachment::kDocumentDateFieldNumber;
const int ContractAttachment::kDocumentNumberFieldNumber;
const int ContractAttachment::kContractPriceFieldNumber;
const int ContractAttachment::kContractTypeFieldNumber;
const int ContractAttachment::kNeedReceiptFieldNumber;
const int ContractAttachment::kCustomDataFieldNumber;
#endif  // !_MSC_VER

ContractAttachment::ContractAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ContractAttachment)
}

void ContractAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

ContractAttachment::ContractAttachment(const ContractAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ContractAttachment)
}

void ContractAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContractAttachment::~ContractAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ContractAttachment)
  SharedDtor();
}

void ContractAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (contractprice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractprice_;
  }
  if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contracttype_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void ContractAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContractAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContractAttachment_descriptor_;
}

const ContractAttachment& ContractAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

ContractAttachment* ContractAttachment::default_instance_ = NULL;

ContractAttachment* ContractAttachment::New() const {
  return new ContractAttachment;
}

void ContractAttachment::Clear() {
  if (_has_bits_[0 / 32] & 231) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_contractprice()) {
      if (contractprice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractprice_->clear();
      }
    }
    if (has_contracttype()) {
      if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contracttype_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContractAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ContractAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (tag == 34) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 6;
      case 6: {
        if (tag == 50) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 7;
      case 7: {
        if (tag == 58) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DocumentNumber;
        break;
      }

      // required string DocumentNumber = 8;
      case 8: {
        if (tag == 66) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ContractPrice;
        break;
      }

      // optional string ContractPrice = 9;
      case 9: {
        if (tag == 74) {
         parse_ContractPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractprice().data(), this->contractprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractprice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ContractType;
        break;
      }

      // optional string ContractType = 10;
      case 10: {
        if (tag == 82) {
         parse_ContractType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contracttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contracttype().data(), this->contracttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contracttype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 12;
      case 12: {
        if (tag == 98) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_CustomData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ContractAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ContractAttachment)
  return false;
#undef DO_
}

void ContractAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ContractAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->customdocumentid(), output);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->documentdate(), output);
  }

  // required string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->documentnumber(), output);
  }

  // optional string ContractPrice = 9;
  if (has_contractprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractprice().data(), this->contractprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractprice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->contractprice(), output);
  }

  // optional string ContractType = 10;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contracttype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->contracttype(), output);
  }

  // optional bool NeedReceipt = 11 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->needreceipt(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 12;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->customdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ContractAttachment)
}

::google::protobuf::uint8* ContractAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ContractAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->customdocumentid(), target);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentdate(), target);
  }

  // required string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->documentnumber(), target);
  }

  // optional string ContractPrice = 9;
  if (has_contractprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractprice().data(), this->contractprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractprice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->contractprice(), target);
  }

  // optional string ContractType = 10;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contracttype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->contracttype(), target);
  }

  // optional bool NeedReceipt = 11 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->needreceipt(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 12;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->customdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ContractAttachment)
  return target;
}

int ContractAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string CustomDocumentId = 6;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // required string DocumentDate = 7;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // required string DocumentNumber = 8;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ContractPrice = 9;
    if (has_contractprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractprice());
    }

    // optional string ContractType = 10;
    if (has_contracttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contracttype());
    }

    // optional bool NeedReceipt = 11 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 12;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContractAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContractAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContractAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContractAttachment::MergeFrom(const ContractAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contractprice()) {
      set_contractprice(from.contractprice());
    }
    if (from.has_contracttype()) {
      set_contracttype(from.contracttype());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContractAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractAttachment::CopyFrom(const ContractAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c3) != 0x000000c3) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  return true;
}

void ContractAttachment::Swap(ContractAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(contractprice_, other->contractprice_);
    std::swap(contracttype_, other->contracttype_);
    std::swap(needreceipt_, other->needreceipt_);
    customdata_.Swap(&other->customdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContractAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContractAttachment_descriptor_;
  metadata.reflection = ContractAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SupplementaryAgreementAttachment::kSignedContentFieldNumber;
const int SupplementaryAgreementAttachment::kFileNameFieldNumber;
const int SupplementaryAgreementAttachment::kCommentFieldNumber;
const int SupplementaryAgreementAttachment::kInitialDocumentIdsFieldNumber;
const int SupplementaryAgreementAttachment::kSubordinateDocumentIdsFieldNumber;
const int SupplementaryAgreementAttachment::kCustomDocumentIdFieldNumber;
const int SupplementaryAgreementAttachment::kDocumentDateFieldNumber;
const int SupplementaryAgreementAttachment::kDocumentNumberFieldNumber;
const int SupplementaryAgreementAttachment::kTotalFieldNumber;
const int SupplementaryAgreementAttachment::kContractNumberFieldNumber;
const int SupplementaryAgreementAttachment::kContractDateFieldNumber;
const int SupplementaryAgreementAttachment::kContractTypeFieldNumber;
const int SupplementaryAgreementAttachment::kNeedReceiptFieldNumber;
const int SupplementaryAgreementAttachment::kCustomDataFieldNumber;
#endif  // !_MSC_VER

SupplementaryAgreementAttachment::SupplementaryAgreementAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment)
}

void SupplementaryAgreementAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

SupplementaryAgreementAttachment::SupplementaryAgreementAttachment(const SupplementaryAgreementAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment)
}

void SupplementaryAgreementAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contractdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contracttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SupplementaryAgreementAttachment::~SupplementaryAgreementAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment)
  SharedDtor();
}

void SupplementaryAgreementAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete total_;
  }
  if (contractnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractnumber_;
  }
  if (contractdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contractdate_;
  }
  if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contracttype_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void SupplementaryAgreementAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SupplementaryAgreementAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SupplementaryAgreementAttachment_descriptor_;
}

const SupplementaryAgreementAttachment& SupplementaryAgreementAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

SupplementaryAgreementAttachment* SupplementaryAgreementAttachment::default_instance_ = NULL;

SupplementaryAgreementAttachment* SupplementaryAgreementAttachment::New() const {
  return new SupplementaryAgreementAttachment;
}

void SupplementaryAgreementAttachment::Clear() {
  if (_has_bits_[0 / 32] & 231) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_total()) {
      if (total_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        total_->clear();
      }
    }
    if (has_contractnumber()) {
      if (contractnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractnumber_->clear();
      }
    }
    if (has_contractdate()) {
      if (contractdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contractdate_->clear();
      }
    }
    if (has_contracttype()) {
      if (contracttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contracttype_->clear();
      }
    }
    needreceipt_ = false;
  }
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SupplementaryAgreementAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
      case 4: {
        if (tag == 34) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(50)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 6;
      case 6: {
        if (tag == 50) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_DocumentDate;
        break;
      }

      // required string DocumentDate = 7;
      case 7: {
        if (tag == 58) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DocumentNumber;
        break;
      }

      // required string DocumentNumber = 8;
      case 8: {
        if (tag == 66) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Total;
        break;
      }

      // optional string Total = 9;
      case 9: {
        if (tag == 74) {
         parse_Total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_total()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->total().data(), this->total().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "total");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ContractNumber;
        break;
      }

      // required string ContractNumber = 10;
      case 10: {
        if (tag == 82) {
         parse_ContractNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractnumber().data(), this->contractnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ContractDate;
        break;
      }

      // required string ContractDate = 11;
      case 11: {
        if (tag == 90) {
         parse_ContractDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contractdate().data(), this->contractdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contractdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ContractType;
        break;
      }

      // optional string ContractType = 12;
      case 12: {
        if (tag == 98) {
         parse_ContractType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contracttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contracttype().data(), this->contracttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contracttype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 14;
      case 14: {
        if (tag == 114) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_CustomData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment)
  return false;
#undef DO_
}

void SupplementaryAgreementAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subordinatedocumentids(i), output);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->customdocumentid(), output);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->documentdate(), output);
  }

  // required string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->documentnumber(), output);
  }

  // optional string Total = 9;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->total(), output);
  }

  // required string ContractNumber = 10;
  if (has_contractnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractnumber().data(), this->contractnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->contractnumber(), output);
  }

  // required string ContractDate = 11;
  if (has_contractdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractdate().data(), this->contractdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->contractdate(), output);
  }

  // optional string ContractType = 12;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contracttype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->contracttype(), output);
  }

  // optional bool NeedReceipt = 13 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->needreceipt(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 14;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->customdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment)
}

::google::protobuf::uint8* SupplementaryAgreementAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subordinatedocumentids(i), target);
  }

  // optional string CustomDocumentId = 6;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->customdocumentid(), target);
  }

  // required string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentdate(), target);
  }

  // required string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->documentnumber(), target);
  }

  // optional string Total = 9;
  if (has_total()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->total().data(), this->total().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "total");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->total(), target);
  }

  // required string ContractNumber = 10;
  if (has_contractnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractnumber().data(), this->contractnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->contractnumber(), target);
  }

  // required string ContractDate = 11;
  if (has_contractdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contractdate().data(), this->contractdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contractdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->contractdate(), target);
  }

  // optional string ContractType = 12;
  if (has_contracttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contracttype().data(), this->contracttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contracttype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->contracttype(), target);
  }

  // optional bool NeedReceipt = 13 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->needreceipt(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 14;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->customdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.SupplementaryAgreementAttachment)
  return target;
}

int SupplementaryAgreementAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string CustomDocumentId = 6;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // required string DocumentDate = 7;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // required string DocumentNumber = 8;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Total = 9;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->total());
    }

    // required string ContractNumber = 10;
    if (has_contractnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractnumber());
    }

    // required string ContractDate = 11;
    if (has_contractdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractdate());
    }

    // optional string ContractType = 12;
    if (has_contracttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contracttype());
    }

    // optional bool NeedReceipt = 13 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 4;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 5;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 14;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SupplementaryAgreementAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SupplementaryAgreementAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SupplementaryAgreementAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SupplementaryAgreementAttachment::MergeFrom(const SupplementaryAgreementAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_contractnumber()) {
      set_contractnumber(from.contractnumber());
    }
    if (from.has_contractdate()) {
      set_contractdate(from.contractdate());
    }
    if (from.has_contracttype()) {
      set_contracttype(from.contracttype());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SupplementaryAgreementAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupplementaryAgreementAttachment::CopyFrom(const SupplementaryAgreementAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupplementaryAgreementAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x000006c3) != 0x000006c3) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  return true;
}

void SupplementaryAgreementAttachment::Swap(SupplementaryAgreementAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(total_, other->total_);
    std::swap(contractnumber_, other->contractnumber_);
    std::swap(contractdate_, other->contractdate_);
    std::swap(contracttype_, other->contracttype_);
    std::swap(needreceipt_, other->needreceipt_);
    customdata_.Swap(&other->customdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SupplementaryAgreementAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SupplementaryAgreementAttachment_descriptor_;
  metadata.reflection = SupplementaryAgreementAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceDetailsAttachment::kSignedContentFieldNumber;
const int ServiceDetailsAttachment::kFileNameFieldNumber;
const int ServiceDetailsAttachment::kCommentFieldNumber;
const int ServiceDetailsAttachment::kInitialDocumentIdsFieldNumber;
const int ServiceDetailsAttachment::kSubordinateDocumentIdsFieldNumber;
const int ServiceDetailsAttachment::kDocumentDateFieldNumber;
const int ServiceDetailsAttachment::kDocumentNumberFieldNumber;
const int ServiceDetailsAttachment::kCustomDocumentIdFieldNumber;
const int ServiceDetailsAttachment::kNeedReceiptFieldNumber;
const int ServiceDetailsAttachment::kCustomDataFieldNumber;
#endif  // !_MSC_VER

ServiceDetailsAttachment::ServiceDetailsAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ServiceDetailsAttachment)
}

void ServiceDetailsAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

ServiceDetailsAttachment::ServiceDetailsAttachment(const ServiceDetailsAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ServiceDetailsAttachment)
}

void ServiceDetailsAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  documentnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needreceipt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceDetailsAttachment::~ServiceDetailsAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ServiceDetailsAttachment)
  SharedDtor();
}

void ServiceDetailsAttachment::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentdate_;
  }
  if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentnumber_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void ServiceDetailsAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceDetailsAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceDetailsAttachment_descriptor_;
}

const ServiceDetailsAttachment& ServiceDetailsAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

ServiceDetailsAttachment* ServiceDetailsAttachment::default_instance_ = NULL;

ServiceDetailsAttachment* ServiceDetailsAttachment::New() const {
  return new ServiceDetailsAttachment;
}

void ServiceDetailsAttachment::Clear() {
  if (_has_bits_[0 / 32] & 231) {
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_documentdate()) {
      if (documentdate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentdate_->clear();
      }
    }
    if (has_documentnumber()) {
      if (documentnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentnumber_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
  }
  needreceipt_ = false;
  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceDetailsAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ServiceDetailsAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FileName;
        break;
      }

      // required string FileName = 2;
      case 2: {
        if (tag == 18) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
      case 6: {
        if (tag == 50) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(58)) goto parse_DocumentDate;
        break;
      }

      // optional string DocumentDate = 7;
      case 7: {
        if (tag == 58) {
         parse_DocumentDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentdate().data(), this->documentdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DocumentNumber;
        break;
      }

      // optional string DocumentNumber = 8;
      case 8: {
        if (tag == 66) {
         parse_DocumentNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentnumber().data(), this->documentnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentnumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (tag == 74) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
      case 11: {
        if (tag == 90) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_CustomData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ServiceDetailsAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ServiceDetailsAttachment)
  return false;
#undef DO_
}

void ServiceDetailsAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ServiceDetailsAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->subordinatedocumentids(i), output);
  }

  // optional string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->documentdate(), output);
  }

  // optional string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->documentnumber(), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->customdocumentid(), output);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->needreceipt(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->customdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ServiceDetailsAttachment)
}

::google::protobuf::uint8* ServiceDetailsAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ServiceDetailsAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // required string FileName = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->subordinatedocumentids(i), target);
  }

  // optional string DocumentDate = 7;
  if (has_documentdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentdate().data(), this->documentdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->documentdate(), target);
  }

  // optional string DocumentNumber = 8;
  if (has_documentnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentnumber().data(), this->documentnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentnumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->documentnumber(), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->needreceipt(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->customdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ServiceDetailsAttachment)
  return target;
}

int ServiceDetailsAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // required string FileName = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string DocumentDate = 7;
    if (has_documentdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentdate());
    }

    // optional string DocumentNumber = 8;
    if (has_documentnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentnumber());
    }

    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool NeedReceipt = 10 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceDetailsAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceDetailsAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceDetailsAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceDetailsAttachment::MergeFrom(const ServiceDetailsAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_documentdate()) {
      set_documentdate(from.documentdate());
    }
    if (from.has_documentnumber()) {
      set_documentnumber(from.documentnumber());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceDetailsAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceDetailsAttachment::CopyFrom(const ServiceDetailsAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDetailsAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  return true;
}

void ServiceDetailsAttachment::Swap(ServiceDetailsAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(filename_, other->filename_);
    std::swap(comment_, other->comment_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(documentdate_, other->documentdate_);
    std::swap(documentnumber_, other->documentnumber_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(needreceipt_, other->needreceipt_);
    customdata_.Swap(&other->customdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceDetailsAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceDetailsAttachment_descriptor_;
  metadata.reflection = ServiceDetailsAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentAttachment::kSignedContentFieldNumber;
const int DocumentAttachment::kCommentFieldNumber;
const int DocumentAttachment::kNeedRecipientSignatureFieldNumber;
const int DocumentAttachment::kInitialDocumentIdsFieldNumber;
const int DocumentAttachment::kSubordinateDocumentIdsFieldNumber;
const int DocumentAttachment::kCustomDocumentIdFieldNumber;
const int DocumentAttachment::kNeedReceiptFieldNumber;
const int DocumentAttachment::kCustomDataFieldNumber;
const int DocumentAttachment::kTypeNamedIdFieldNumber;
const int DocumentAttachment::kFunctionFieldNumber;
const int DocumentAttachment::kVersionFieldNumber;
const int DocumentAttachment::kMetadataFieldNumber;
const int DocumentAttachment::kWorkflowIdFieldNumber;
const int DocumentAttachment::kIsEncryptedFieldNumber;
#endif  // !_MSC_VER

DocumentAttachment::DocumentAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.DocumentAttachment)
}

void DocumentAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

DocumentAttachment::DocumentAttachment(const DocumentAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.DocumentAttachment)
}

void DocumentAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signedcontent_ = NULL;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needrecipientsignature_ = false;
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needreceipt_ = false;
  typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workflowid_ = 0;
  isencrypted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentAttachment::~DocumentAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.DocumentAttachment)
  SharedDtor();
}

void DocumentAttachment::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typenamedid_;
  }
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void DocumentAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentAttachment_descriptor_;
}

const DocumentAttachment& DocumentAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

DocumentAttachment* DocumentAttachment::default_instance_ = NULL;

DocumentAttachment* DocumentAttachment::New() const {
  return new DocumentAttachment;
}

void DocumentAttachment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DocumentAttachment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 103) {
    ZR_(needrecipientsignature_, needreceipt_);
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 14080) {
    ZR_(isencrypted_, workflowid_);
    if (has_typenamedid()) {
      if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        typenamedid_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  initialdocumentids_.Clear();
  subordinatedocumentids_.Clear();
  customdata_.Clear();
  metadata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.DocumentAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_NeedRecipientSignature;
        break;
      }

      // optional bool NeedRecipientSignature = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_NeedRecipientSignature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needrecipientsignature_)));
          set_has_needrecipientsignature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
      case 5: {
        if (tag == 42) {
         parse_InitialDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialdocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_InitialDocumentIds;
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
      case 6: {
        if (tag == 50) {
         parse_SubordinateDocumentIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subordinatedocumentids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SubordinateDocumentIds;
        if (input->ExpectTag(74)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 9;
      case 9: {
        if (tag == 74) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_NeedReceipt;
        break;
      }

      // optional bool NeedReceipt = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_NeedReceipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needreceipt_)));
          set_has_needreceipt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_CustomData;
        break;
      }

      // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
      case 11: {
        if (tag == 90) {
         parse_CustomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_CustomData;
        if (input->ExpectTag(98)) goto parse_TypeNamedId;
        break;
      }

      // required string TypeNamedId = 12;
      case 12: {
        if (tag == 98) {
         parse_TypeNamedId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typenamedid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->typenamedid().data(), this->typenamedid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "typenamedid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Function;
        break;
      }

      // optional string Function = 13;
      case 13: {
        if (tag == 106) {
         parse_Function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "function");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_Version;
        break;
      }

      // optional string Version = 14;
      case 14: {
        if (tag == 114) {
         parse_Version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_Metadata;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 15;
      case 15: {
        if (tag == 122) {
         parse_Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_Metadata;
        if (input->ExpectTag(128)) goto parse_WorkflowId;
        break;
      }

      // optional int32 WorkflowId = 16;
      case 16: {
        if (tag == 128) {
         parse_WorkflowId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workflowid_)));
          set_has_workflowid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_IsEncrypted;
        break;
      }

      // optional bool IsEncrypted = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_IsEncrypted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isencrypted_)));
          set_has_isencrypted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.DocumentAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.DocumentAttachment)
  return false;
#undef DO_
}

void DocumentAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.DocumentAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signedcontent(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // optional bool NeedRecipientSignature = 4 [default = false];
  if (has_needrecipientsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->needrecipientsignature(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->initialdocumentids(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->subordinatedocumentids(i), output);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->customdocumentid(), output);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->needreceipt(), output);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->customdata(i), output);
  }

  // required string TypeNamedId = 12;
  if (has_typenamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typenamedid().data(), this->typenamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typenamedid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->typenamedid(), output);
  }

  // optional string Function = 13;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->function(), output);
  }

  // optional string Version = 14;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->version(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 15;
  for (int i = 0; i < this->metadata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->metadata(i), output);
  }

  // optional int32 WorkflowId = 16;
  if (has_workflowid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->workflowid(), output);
  }

  // optional bool IsEncrypted = 17 [default = false];
  if (has_isencrypted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->isencrypted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.DocumentAttachment)
}

::google::protobuf::uint8* DocumentAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.DocumentAttachment)
  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signedcontent(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // optional bool NeedRecipientSignature = 4 [default = false];
  if (has_needrecipientsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->needrecipientsignature(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->initialdocumentids(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->subordinatedocumentids(i), target);
  }

  // optional string CustomDocumentId = 9;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->customdocumentid(), target);
  }

  // optional bool NeedReceipt = 10 [default = false];
  if (has_needreceipt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->needreceipt(), target);
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->customdata(i), target);
  }

  // required string TypeNamedId = 12;
  if (has_typenamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typenamedid().data(), this->typenamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typenamedid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->typenamedid(), target);
  }

  // optional string Function = 13;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->function(), target);
  }

  // optional string Version = 14;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->version(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 15;
  for (int i = 0; i < this->metadata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->metadata(i), target);
  }

  // optional int32 WorkflowId = 16;
  if (has_workflowid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->workflowid(), target);
  }

  // optional bool IsEncrypted = 17 [default = false];
  if (has_isencrypted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->isencrypted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.DocumentAttachment)
  return target;
}

int DocumentAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 1;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional bool NeedRecipientSignature = 4 [default = false];
    if (has_needrecipientsignature()) {
      total_size += 1 + 1;
    }

    // optional string CustomDocumentId = 9;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

    // optional bool NeedReceipt = 10 [default = false];
    if (has_needreceipt()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string TypeNamedId = 12;
    if (has_typenamedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typenamedid());
    }

    // optional string Function = 13;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }

    // optional string Version = 14;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 WorkflowId = 16;
    if (has_workflowid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workflowid());
    }

    // optional bool IsEncrypted = 17 [default = false];
    if (has_isencrypted()) {
      total_size += 2 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId InitialDocumentIds = 5;
  total_size += 1 * this->initialdocumentids_size();
  for (int i = 0; i < this->initialdocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialdocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId SubordinateDocumentIds = 6;
  total_size += 1 * this->subordinatedocumentids_size();
  for (int i = 0; i < this->subordinatedocumentids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subordinatedocumentids(i));
  }

  // repeated .Diadoc.Api.Proto.CustomDataItem CustomData = 11;
  total_size += 1 * this->customdata_size();
  for (int i = 0; i < this->customdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdata(i));
  }

  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 15;
  total_size += 1 * this->metadata_size();
  for (int i = 0; i < this->metadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metadata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentAttachment::MergeFrom(const DocumentAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialdocumentids_.MergeFrom(from.initialdocumentids_);
  subordinatedocumentids_.MergeFrom(from.subordinatedocumentids_);
  customdata_.MergeFrom(from.customdata_);
  metadata_.MergeFrom(from.metadata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_needrecipientsignature()) {
      set_needrecipientsignature(from.needrecipientsignature());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
    if (from.has_needreceipt()) {
      set_needreceipt(from.needreceipt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_typenamedid()) {
      set_typenamedid(from.typenamedid());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_workflowid()) {
      set_workflowid(from.workflowid());
    }
    if (from.has_isencrypted()) {
      set_isencrypted(from.isencrypted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentAttachment::CopyFrom(const DocumentAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000101) != 0x00000101) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->initialdocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subordinatedocumentids())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdata())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->metadata())) return false;
  return true;
}

void DocumentAttachment::Swap(DocumentAttachment* other) {
  if (other != this) {
    std::swap(signedcontent_, other->signedcontent_);
    std::swap(comment_, other->comment_);
    std::swap(needrecipientsignature_, other->needrecipientsignature_);
    initialdocumentids_.Swap(&other->initialdocumentids_);
    subordinatedocumentids_.Swap(&other->subordinatedocumentids_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(needreceipt_, other->needreceipt_);
    customdata_.Swap(&other->customdata_);
    std::swap(typenamedid_, other->typenamedid_);
    std::swap(function_, other->function_);
    std::swap(version_, other->version_);
    metadata_.Swap(&other->metadata_);
    std::swap(workflowid_, other->workflowid_);
    std::swap(isencrypted_, other->isencrypted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentAttachment_descriptor_;
  metadata.reflection = DocumentAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetadataItem::kKeyFieldNumber;
const int MetadataItem::kValueFieldNumber;
#endif  // !_MSC_VER

MetadataItem::MetadataItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.MetadataItem)
}

void MetadataItem::InitAsDefaultInstance() {
}

MetadataItem::MetadataItem(const MetadataItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.MetadataItem)
}

void MetadataItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetadataItem::~MetadataItem() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.MetadataItem)
  SharedDtor();
}

void MetadataItem::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MetadataItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetadataItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetadataItem_descriptor_;
}

const MetadataItem& MetadataItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

MetadataItem* MetadataItem::default_instance_ = NULL;

MetadataItem* MetadataItem::New() const {
  return new MetadataItem;
}

void MetadataItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetadataItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.MetadataItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // required string Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.MetadataItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.MetadataItem)
  return false;
#undef DO_
}

void MetadataItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.MetadataItem)
  // required string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.MetadataItem)
}

::google::protobuf::uint8* MetadataItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.MetadataItem)
  // required string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.MetadataItem)
  return target;
}

int MetadataItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetadataItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetadataItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetadataItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetadataItem::MergeFrom(const MetadataItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetadataItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetadataItem::CopyFrom(const MetadataItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MetadataItem::Swap(MetadataItem* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetadataItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetadataItem_descriptor_;
  metadata.reflection = MetadataItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessagePatchToPost::kBoxIdFieldNumber;
const int MessagePatchToPost::kMessageIdFieldNumber;
const int MessagePatchToPost::kReceiptsFieldNumber;
const int MessagePatchToPost::kCorrectionRequestsFieldNumber;
const int MessagePatchToPost::kSignaturesFieldNumber;
const int MessagePatchToPost::kRequestedSignatureRejectionsFieldNumber;
const int MessagePatchToPost::kXmlTorg12BuyerTitlesFieldNumber;
const int MessagePatchToPost::kXmlAcceptanceCertificateBuyerTitlesFieldNumber;
const int MessagePatchToPost::kResolutionsFieldNumber;
const int MessagePatchToPost::kResolutionRequestsFieldNumber;
const int MessagePatchToPost::kResolutionRequestCancellationsFieldNumber;
const int MessagePatchToPost::kResolutionRequestDenialsFieldNumber;
const int MessagePatchToPost::kResolutionRequestDenialCancellationsFieldNumber;
const int MessagePatchToPost::kRevocationRequestsFieldNumber;
const int MessagePatchToPost::kXmlSignatureRejectionsFieldNumber;
const int MessagePatchToPost::kCustomDataPatchesFieldNumber;
const int MessagePatchToPost::kResolutionRouteAssignmentsFieldNumber;
const int MessagePatchToPost::kSignatureVerificationsFieldNumber;
const int MessagePatchToPost::kEditDocumentPacketCommandsFieldNumber;
const int MessagePatchToPost::kUniversalTransferDocumentBuyerTitlesFieldNumber;
const int MessagePatchToPost::kResolutionRouteRemovalsFieldNumber;
const int MessagePatchToPost::kRecipientTitlesFieldNumber;
const int MessagePatchToPost::kEditingPatchesFieldNumber;
#endif  // !_MSC_VER

MessagePatchToPost::MessagePatchToPost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.MessagePatchToPost)
}

void MessagePatchToPost::InitAsDefaultInstance() {
}

MessagePatchToPost::MessagePatchToPost(const MessagePatchToPost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.MessagePatchToPost)
}

void MessagePatchToPost::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagePatchToPost::~MessagePatchToPost() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.MessagePatchToPost)
  SharedDtor();
}

void MessagePatchToPost::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messageid_;
  }
  if (this != default_instance_) {
  }
}

void MessagePatchToPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagePatchToPost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagePatchToPost_descriptor_;
}

const MessagePatchToPost& MessagePatchToPost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

MessagePatchToPost* MessagePatchToPost::default_instance_ = NULL;

MessagePatchToPost* MessagePatchToPost::New() const {
  return new MessagePatchToPost;
}

void MessagePatchToPost::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxid_->clear();
      }
    }
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messageid_->clear();
      }
    }
  }
  receipts_.Clear();
  correctionrequests_.Clear();
  signatures_.Clear();
  requestedsignaturerejections_.Clear();
  xmltorg12buyertitles_.Clear();
  xmlacceptancecertificatebuyertitles_.Clear();
  resolutions_.Clear();
  resolutionrequests_.Clear();
  resolutionrequestcancellations_.Clear();
  resolutionrequestdenials_.Clear();
  resolutionrequestdenialcancellations_.Clear();
  revocationrequests_.Clear();
  xmlsignaturerejections_.Clear();
  customdatapatches_.Clear();
  resolutionrouteassignments_.Clear();
  signatureverifications_.Clear();
  editdocumentpacketcommands_.Clear();
  universaltransferdocumentbuyertitles_.Clear();
  resolutionrouteremovals_.Clear();
  recipienttitles_.Clear();
  editingpatches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessagePatchToPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.MessagePatchToPost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MessageId;
        break;
      }

      // required string MessageId = 2;
      case 2: {
        if (tag == 18) {
         parse_MessageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messageid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Receipts;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment Receipts = 3;
      case 3: {
        if (tag == 26) {
         parse_Receipts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receipts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Receipts;
        if (input->ExpectTag(34)) goto parse_CorrectionRequests;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.CorrectionRequestAttachment CorrectionRequests = 4;
      case 4: {
        if (tag == 34) {
         parse_CorrectionRequests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_correctionrequests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CorrectionRequests;
        if (input->ExpectTag(42)) goto parse_Signatures;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.DocumentSignature Signatures = 5;
      case 5: {
        if (tag == 42) {
         parse_Signatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signatures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Signatures;
        if (input->ExpectTag(50)) goto parse_RequestedSignatureRejections;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.RequestedSignatureRejection RequestedSignatureRejections = 6;
      case 6: {
        if (tag == 50) {
         parse_RequestedSignatureRejections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requestedsignaturerejections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RequestedSignatureRejections;
        if (input->ExpectTag(58)) goto parse_XmlTorg12BuyerTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlTorg12BuyerTitles = 7;
      case 7: {
        if (tag == 58) {
         parse_XmlTorg12BuyerTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xmltorg12buyertitles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_XmlTorg12BuyerTitles;
        if (input->ExpectTag(66)) goto parse_XmlAcceptanceCertificateBuyerTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlAcceptanceCertificateBuyerTitles = 8;
      case 8: {
        if (tag == 66) {
         parse_XmlAcceptanceCertificateBuyerTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xmlacceptancecertificatebuyertitles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_XmlAcceptanceCertificateBuyerTitles;
        if (input->ExpectTag(74)) goto parse_Resolutions;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ResolutionAttachment Resolutions = 9;
      case 9: {
        if (tag == 74) {
         parse_Resolutions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Resolutions;
        if (input->ExpectTag(82)) goto parse_ResolutionRequests;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ResolutionRequestAttachment ResolutionRequests = 10;
      case 10: {
        if (tag == 82) {
         parse_ResolutionRequests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutionrequests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ResolutionRequests;
        if (input->ExpectTag(90)) goto parse_ResolutionRequestCancellations;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment ResolutionRequestCancellations = 11;
      case 11: {
        if (tag == 90) {
         parse_ResolutionRequestCancellations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutionrequestcancellations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ResolutionRequestCancellations;
        if (input->ExpectTag(98)) goto parse_ResolutionRequestDenials;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment ResolutionRequestDenials = 12;
      case 12: {
        if (tag == 98) {
         parse_ResolutionRequestDenials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutionrequestdenials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ResolutionRequestDenials;
        if (input->ExpectTag(106)) goto parse_ResolutionRequestDenialCancellations;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment ResolutionRequestDenialCancellations = 13;
      case 13: {
        if (tag == 106) {
         parse_ResolutionRequestDenialCancellations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutionrequestdenialcancellations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ResolutionRequestDenialCancellations;
        if (input->ExpectTag(114)) goto parse_RevocationRequests;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.RevocationRequestAttachment RevocationRequests = 14;
      case 14: {
        if (tag == 114) {
         parse_RevocationRequests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_revocationrequests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_RevocationRequests;
        if (input->ExpectTag(122)) goto parse_XmlSignatureRejections;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment XmlSignatureRejections = 15;
      case 15: {
        if (tag == 122) {
         parse_XmlSignatureRejections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xmlsignaturerejections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_XmlSignatureRejections;
        if (input->ExpectTag(130)) goto parse_CustomDataPatches;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.CustomDataPatch CustomDataPatches = 16;
      case 16: {
        if (tag == 130) {
         parse_CustomDataPatches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customdatapatches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_CustomDataPatches;
        if (input->ExpectTag(138)) goto parse_ResolutionRouteAssignments;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ResolutionRouteAssignment ResolutionRouteAssignments = 17;
      case 17: {
        if (tag == 138) {
         parse_ResolutionRouteAssignments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutionrouteassignments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_ResolutionRouteAssignments;
        if (input->ExpectTag(146)) goto parse_SignatureVerifications;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.SignatureVerification SignatureVerifications = 18;
      case 18: {
        if (tag == 146) {
         parse_SignatureVerifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signatureverifications()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_SignatureVerifications;
        if (input->ExpectTag(154)) goto parse_EditDocumentPacketCommands;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.EditDocumentPacketCommand EditDocumentPacketCommands = 19;
      case 19: {
        if (tag == 154) {
         parse_EditDocumentPacketCommands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_editdocumentpacketcommands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_EditDocumentPacketCommands;
        if (input->ExpectTag(162)) goto parse_UniversalTransferDocumentBuyerTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment UniversalTransferDocumentBuyerTitles = 20;
      case 20: {
        if (tag == 162) {
         parse_UniversalTransferDocumentBuyerTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_universaltransferdocumentbuyertitles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_UniversalTransferDocumentBuyerTitles;
        if (input->ExpectTag(170)) goto parse_ResolutionRouteRemovals;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ResolutionRouteRemoval ResolutionRouteRemovals = 21;
      case 21: {
        if (tag == 170) {
         parse_ResolutionRouteRemovals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resolutionrouteremovals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_ResolutionRouteRemovals;
        if (input->ExpectTag(178)) goto parse_RecipientTitles;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment RecipientTitles = 22;
      case 22: {
        if (tag == 178) {
         parse_RecipientTitles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recipienttitles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_RecipientTitles;
        if (input->ExpectTag(186)) goto parse_EditingPatches;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.CustomDataPatch EditingPatches = 23;
      case 23: {
        if (tag == 186) {
         parse_EditingPatches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_editingpatches()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_EditingPatches;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.MessagePatchToPost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.MessagePatchToPost)
  return false;
#undef DO_
}

void MessagePatchToPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.MessagePatchToPost)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->boxid(), output);
  }

  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messageid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->messageid(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment Receipts = 3;
  for (int i = 0; i < this->receipts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->receipts(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.CorrectionRequestAttachment CorrectionRequests = 4;
  for (int i = 0; i < this->correctionrequests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->correctionrequests(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature Signatures = 5;
  for (int i = 0; i < this->signatures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->signatures(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.RequestedSignatureRejection RequestedSignatureRejections = 6;
  for (int i = 0; i < this->requestedsignaturerejections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->requestedsignaturerejections(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlTorg12BuyerTitles = 7;
  for (int i = 0; i < this->xmltorg12buyertitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->xmltorg12buyertitles(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlAcceptanceCertificateBuyerTitles = 8;
  for (int i = 0; i < this->xmlacceptancecertificatebuyertitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->xmlacceptancecertificatebuyertitles(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionAttachment Resolutions = 9;
  for (int i = 0; i < this->resolutions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->resolutions(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestAttachment ResolutionRequests = 10;
  for (int i = 0; i < this->resolutionrequests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->resolutionrequests(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment ResolutionRequestCancellations = 11;
  for (int i = 0; i < this->resolutionrequestcancellations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->resolutionrequestcancellations(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment ResolutionRequestDenials = 12;
  for (int i = 0; i < this->resolutionrequestdenials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->resolutionrequestdenials(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment ResolutionRequestDenialCancellations = 13;
  for (int i = 0; i < this->resolutionrequestdenialcancellations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->resolutionrequestdenialcancellations(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.RevocationRequestAttachment RevocationRequests = 14;
  for (int i = 0; i < this->revocationrequests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->revocationrequests(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment XmlSignatureRejections = 15;
  for (int i = 0; i < this->xmlsignaturerejections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->xmlsignaturerejections(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.CustomDataPatch CustomDataPatches = 16;
  for (int i = 0; i < this->customdatapatches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->customdatapatches(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRouteAssignment ResolutionRouteAssignments = 17;
  for (int i = 0; i < this->resolutionrouteassignments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->resolutionrouteassignments(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.SignatureVerification SignatureVerifications = 18;
  for (int i = 0; i < this->signatureverifications_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->signatureverifications(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.EditDocumentPacketCommand EditDocumentPacketCommands = 19;
  for (int i = 0; i < this->editdocumentpacketcommands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->editdocumentpacketcommands(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment UniversalTransferDocumentBuyerTitles = 20;
  for (int i = 0; i < this->universaltransferdocumentbuyertitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->universaltransferdocumentbuyertitles(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRouteRemoval ResolutionRouteRemovals = 21;
  for (int i = 0; i < this->resolutionrouteremovals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->resolutionrouteremovals(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment RecipientTitles = 22;
  for (int i = 0; i < this->recipienttitles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->recipienttitles(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.CustomDataPatch EditingPatches = 23;
  for (int i = 0; i < this->editingpatches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->editingpatches(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.MessagePatchToPost)
}

::google::protobuf::uint8* MessagePatchToPost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.MessagePatchToPost)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messageid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messageid(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment Receipts = 3;
  for (int i = 0; i < this->receipts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->receipts(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.CorrectionRequestAttachment CorrectionRequests = 4;
  for (int i = 0; i < this->correctionrequests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->correctionrequests(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature Signatures = 5;
  for (int i = 0; i < this->signatures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->signatures(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.RequestedSignatureRejection RequestedSignatureRejections = 6;
  for (int i = 0; i < this->requestedsignaturerejections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->requestedsignaturerejections(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlTorg12BuyerTitles = 7;
  for (int i = 0; i < this->xmltorg12buyertitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->xmltorg12buyertitles(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlAcceptanceCertificateBuyerTitles = 8;
  for (int i = 0; i < this->xmlacceptancecertificatebuyertitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->xmlacceptancecertificatebuyertitles(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionAttachment Resolutions = 9;
  for (int i = 0; i < this->resolutions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->resolutions(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestAttachment ResolutionRequests = 10;
  for (int i = 0; i < this->resolutionrequests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->resolutionrequests(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment ResolutionRequestCancellations = 11;
  for (int i = 0; i < this->resolutionrequestcancellations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->resolutionrequestcancellations(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment ResolutionRequestDenials = 12;
  for (int i = 0; i < this->resolutionrequestdenials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->resolutionrequestdenials(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment ResolutionRequestDenialCancellations = 13;
  for (int i = 0; i < this->resolutionrequestdenialcancellations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->resolutionrequestdenialcancellations(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.RevocationRequestAttachment RevocationRequests = 14;
  for (int i = 0; i < this->revocationrequests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->revocationrequests(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment XmlSignatureRejections = 15;
  for (int i = 0; i < this->xmlsignaturerejections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->xmlsignaturerejections(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.CustomDataPatch CustomDataPatches = 16;
  for (int i = 0; i < this->customdatapatches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->customdatapatches(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRouteAssignment ResolutionRouteAssignments = 17;
  for (int i = 0; i < this->resolutionrouteassignments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->resolutionrouteassignments(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.SignatureVerification SignatureVerifications = 18;
  for (int i = 0; i < this->signatureverifications_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->signatureverifications(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.EditDocumentPacketCommand EditDocumentPacketCommands = 19;
  for (int i = 0; i < this->editdocumentpacketcommands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->editdocumentpacketcommands(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment UniversalTransferDocumentBuyerTitles = 20;
  for (int i = 0; i < this->universaltransferdocumentbuyertitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->universaltransferdocumentbuyertitles(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRouteRemoval ResolutionRouteRemovals = 21;
  for (int i = 0; i < this->resolutionrouteremovals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->resolutionrouteremovals(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment RecipientTitles = 22;
  for (int i = 0; i < this->recipienttitles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->recipienttitles(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.CustomDataPatch EditingPatches = 23;
  for (int i = 0; i < this->editingpatches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->editingpatches(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.MessagePatchToPost)
  return target;
}

int MessagePatchToPost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // required string MessageId = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }

  }
  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment Receipts = 3;
  total_size += 1 * this->receipts_size();
  for (int i = 0; i < this->receipts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->receipts(i));
  }

  // repeated .Diadoc.Api.Proto.Events.CorrectionRequestAttachment CorrectionRequests = 4;
  total_size += 1 * this->correctionrequests_size();
  for (int i = 0; i < this->correctionrequests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->correctionrequests(i));
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature Signatures = 5;
  total_size += 1 * this->signatures_size();
  for (int i = 0; i < this->signatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signatures(i));
  }

  // repeated .Diadoc.Api.Proto.Events.RequestedSignatureRejection RequestedSignatureRejections = 6;
  total_size += 1 * this->requestedsignaturerejections_size();
  for (int i = 0; i < this->requestedsignaturerejections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requestedsignaturerejections(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlTorg12BuyerTitles = 7;
  total_size += 1 * this->xmltorg12buyertitles_size();
  for (int i = 0; i < this->xmltorg12buyertitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xmltorg12buyertitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment XmlAcceptanceCertificateBuyerTitles = 8;
  total_size += 1 * this->xmlacceptancecertificatebuyertitles_size();
  for (int i = 0; i < this->xmlacceptancecertificatebuyertitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xmlacceptancecertificatebuyertitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionAttachment Resolutions = 9;
  total_size += 1 * this->resolutions_size();
  for (int i = 0; i < this->resolutions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutions(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestAttachment ResolutionRequests = 10;
  total_size += 1 * this->resolutionrequests_size();
  for (int i = 0; i < this->resolutionrequests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutionrequests(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment ResolutionRequestCancellations = 11;
  total_size += 1 * this->resolutionrequestcancellations_size();
  for (int i = 0; i < this->resolutionrequestcancellations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutionrequestcancellations(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment ResolutionRequestDenials = 12;
  total_size += 1 * this->resolutionrequestdenials_size();
  for (int i = 0; i < this->resolutionrequestdenials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutionrequestdenials(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment ResolutionRequestDenialCancellations = 13;
  total_size += 1 * this->resolutionrequestdenialcancellations_size();
  for (int i = 0; i < this->resolutionrequestdenialcancellations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutionrequestdenialcancellations(i));
  }

  // repeated .Diadoc.Api.Proto.Events.RevocationRequestAttachment RevocationRequests = 14;
  total_size += 1 * this->revocationrequests_size();
  for (int i = 0; i < this->revocationrequests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->revocationrequests(i));
  }

  // repeated .Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment XmlSignatureRejections = 15;
  total_size += 1 * this->xmlsignaturerejections_size();
  for (int i = 0; i < this->xmlsignaturerejections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xmlsignaturerejections(i));
  }

  // repeated .Diadoc.Api.Proto.Events.CustomDataPatch CustomDataPatches = 16;
  total_size += 2 * this->customdatapatches_size();
  for (int i = 0; i < this->customdatapatches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customdatapatches(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRouteAssignment ResolutionRouteAssignments = 17;
  total_size += 2 * this->resolutionrouteassignments_size();
  for (int i = 0; i < this->resolutionrouteassignments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutionrouteassignments(i));
  }

  // repeated .Diadoc.Api.Proto.Events.SignatureVerification SignatureVerifications = 18;
  total_size += 2 * this->signatureverifications_size();
  for (int i = 0; i < this->signatureverifications_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signatureverifications(i));
  }

  // repeated .Diadoc.Api.Proto.Events.EditDocumentPacketCommand EditDocumentPacketCommands = 19;
  total_size += 2 * this->editdocumentpacketcommands_size();
  for (int i = 0; i < this->editdocumentpacketcommands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->editdocumentpacketcommands(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment UniversalTransferDocumentBuyerTitles = 20;
  total_size += 2 * this->universaltransferdocumentbuyertitles_size();
  for (int i = 0; i < this->universaltransferdocumentbuyertitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->universaltransferdocumentbuyertitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ResolutionRouteRemoval ResolutionRouteRemovals = 21;
  total_size += 2 * this->resolutionrouteremovals_size();
  for (int i = 0; i < this->resolutionrouteremovals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resolutionrouteremovals(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ReceiptAttachment RecipientTitles = 22;
  total_size += 2 * this->recipienttitles_size();
  for (int i = 0; i < this->recipienttitles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recipienttitles(i));
  }

  // repeated .Diadoc.Api.Proto.Events.CustomDataPatch EditingPatches = 23;
  total_size += 2 * this->editingpatches_size();
  for (int i = 0; i < this->editingpatches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->editingpatches(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePatchToPost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessagePatchToPost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessagePatchToPost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessagePatchToPost::MergeFrom(const MessagePatchToPost& from) {
  GOOGLE_CHECK_NE(&from, this);
  receipts_.MergeFrom(from.receipts_);
  correctionrequests_.MergeFrom(from.correctionrequests_);
  signatures_.MergeFrom(from.signatures_);
  requestedsignaturerejections_.MergeFrom(from.requestedsignaturerejections_);
  xmltorg12buyertitles_.MergeFrom(from.xmltorg12buyertitles_);
  xmlacceptancecertificatebuyertitles_.MergeFrom(from.xmlacceptancecertificatebuyertitles_);
  resolutions_.MergeFrom(from.resolutions_);
  resolutionrequests_.MergeFrom(from.resolutionrequests_);
  resolutionrequestcancellations_.MergeFrom(from.resolutionrequestcancellations_);
  resolutionrequestdenials_.MergeFrom(from.resolutionrequestdenials_);
  resolutionrequestdenialcancellations_.MergeFrom(from.resolutionrequestdenialcancellations_);
  revocationrequests_.MergeFrom(from.revocationrequests_);
  xmlsignaturerejections_.MergeFrom(from.xmlsignaturerejections_);
  customdatapatches_.MergeFrom(from.customdatapatches_);
  resolutionrouteassignments_.MergeFrom(from.resolutionrouteassignments_);
  signatureverifications_.MergeFrom(from.signatureverifications_);
  editdocumentpacketcommands_.MergeFrom(from.editdocumentpacketcommands_);
  universaltransferdocumentbuyertitles_.MergeFrom(from.universaltransferdocumentbuyertitles_);
  resolutionrouteremovals_.MergeFrom(from.resolutionrouteremovals_);
  recipienttitles_.MergeFrom(from.recipienttitles_);
  editingpatches_.MergeFrom(from.editingpatches_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessagePatchToPost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePatchToPost::CopyFrom(const MessagePatchToPost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePatchToPost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->receipts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->correctionrequests())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->signatures())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->requestedsignaturerejections())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->xmltorg12buyertitles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->xmlacceptancecertificatebuyertitles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->resolutions())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->resolutionrequests())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->resolutionrequestcancellations())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->resolutionrequestdenials())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->resolutionrequestdenialcancellations())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->revocationrequests())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->xmlsignaturerejections())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->customdatapatches())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->resolutionrouteassignments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->signatureverifications())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->editdocumentpacketcommands())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->universaltransferdocumentbuyertitles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->resolutionrouteremovals())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->recipienttitles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->editingpatches())) return false;
  return true;
}

void MessagePatchToPost::Swap(MessagePatchToPost* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(messageid_, other->messageid_);
    receipts_.Swap(&other->receipts_);
    correctionrequests_.Swap(&other->correctionrequests_);
    signatures_.Swap(&other->signatures_);
    requestedsignaturerejections_.Swap(&other->requestedsignaturerejections_);
    xmltorg12buyertitles_.Swap(&other->xmltorg12buyertitles_);
    xmlacceptancecertificatebuyertitles_.Swap(&other->xmlacceptancecertificatebuyertitles_);
    resolutions_.Swap(&other->resolutions_);
    resolutionrequests_.Swap(&other->resolutionrequests_);
    resolutionrequestcancellations_.Swap(&other->resolutionrequestcancellations_);
    resolutionrequestdenials_.Swap(&other->resolutionrequestdenials_);
    resolutionrequestdenialcancellations_.Swap(&other->resolutionrequestdenialcancellations_);
    revocationrequests_.Swap(&other->revocationrequests_);
    xmlsignaturerejections_.Swap(&other->xmlsignaturerejections_);
    customdatapatches_.Swap(&other->customdatapatches_);
    resolutionrouteassignments_.Swap(&other->resolutionrouteassignments_);
    signatureverifications_.Swap(&other->signatureverifications_);
    editdocumentpacketcommands_.Swap(&other->editdocumentpacketcommands_);
    universaltransferdocumentbuyertitles_.Swap(&other->universaltransferdocumentbuyertitles_);
    resolutionrouteremovals_.Swap(&other->resolutionrouteremovals_);
    recipienttitles_.Swap(&other->recipienttitles_);
    editingpatches_.Swap(&other->editingpatches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessagePatchToPost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessagePatchToPost_descriptor_;
  metadata.reflection = MessagePatchToPost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignatureVerification::kInitialDocumentIdFieldNumber;
const int SignatureVerification::kIsValidFieldNumber;
const int SignatureVerification::kErrorMessageFieldNumber;
const int SignatureVerification::kLabelsFieldNumber;
#endif  // !_MSC_VER

SignatureVerification::SignatureVerification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.SignatureVerification)
}

void SignatureVerification::InitAsDefaultInstance() {
}

SignatureVerification::SignatureVerification(const SignatureVerification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.SignatureVerification)
}

void SignatureVerification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isvalid_ = false;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignatureVerification::~SignatureVerification() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.SignatureVerification)
  SharedDtor();
}

void SignatureVerification::SharedDtor() {
  if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialdocumentid_;
  }
  if (errormessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errormessage_;
  }
  if (this != default_instance_) {
  }
}

void SignatureVerification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignatureVerification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignatureVerification_descriptor_;
}

const SignatureVerification& SignatureVerification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

SignatureVerification* SignatureVerification::default_instance_ = NULL;

SignatureVerification* SignatureVerification::New() const {
  return new SignatureVerification;
}

void SignatureVerification::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_initialdocumentid()) {
      if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        initialdocumentid_->clear();
      }
    }
    isvalid_ = false;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errormessage_->clear();
      }
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignatureVerification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.SignatureVerification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InitialDocumentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initialdocumentid().data(), this->initialdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "initialdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsValid;
        break;
      }

      // required bool IsValid = 2;
      case 2: {
        if (tag == 16) {
         parse_IsValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvalid_)));
          set_has_isvalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ErrorMessage;
        break;
      }

      // optional string ErrorMessage = 3;
      case 3: {
        if (tag == 26) {
         parse_ErrorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errormessage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 4;
      case 4: {
        if (tag == 34) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.SignatureVerification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.SignatureVerification)
  return false;
#undef DO_
}

void SignatureVerification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.SignatureVerification)
  // required string InitialDocumentId = 1;
  if (has_initialdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialdocumentid().data(), this->initialdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->initialdocumentid(), output);
  }

  // required bool IsValid = 2;
  if (has_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isvalid(), output);
  }

  // optional string ErrorMessage = 3;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errormessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errormessage(), output);
  }

  // repeated string Labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.SignatureVerification)
}

::google::protobuf::uint8* SignatureVerification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.SignatureVerification)
  // required string InitialDocumentId = 1;
  if (has_initialdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialdocumentid().data(), this->initialdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initialdocumentid(), target);
  }

  // required bool IsValid = 2;
  if (has_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isvalid(), target);
  }

  // optional string ErrorMessage = 3;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errormessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errormessage(), target);
  }

  // repeated string Labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.SignatureVerification)
  return target;
}

int SignatureVerification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InitialDocumentId = 1;
    if (has_initialdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialdocumentid());
    }

    // required bool IsValid = 2;
    if (has_isvalid()) {
      total_size += 1 + 1;
    }

    // optional string ErrorMessage = 3;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }

  }
  // repeated string Labels = 4;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignatureVerification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignatureVerification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignatureVerification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignatureVerification::MergeFrom(const SignatureVerification& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialdocumentid()) {
      set_initialdocumentid(from.initialdocumentid());
    }
    if (from.has_isvalid()) {
      set_isvalid(from.isvalid());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignatureVerification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureVerification::CopyFrom(const SignatureVerification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureVerification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SignatureVerification::Swap(SignatureVerification* other) {
  if (other != this) {
    std::swap(initialdocumentid_, other->initialdocumentid_);
    std::swap(isvalid_, other->isvalid_);
    std::swap(errormessage_, other->errormessage_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignatureVerification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignatureVerification_descriptor_;
  metadata.reflection = SignatureVerification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionRequestAttachment::kInitialDocumentIdFieldNumber;
const int ResolutionRequestAttachment::kTypeFieldNumber;
const int ResolutionRequestAttachment::kTargetUserIdFieldNumber;
const int ResolutionRequestAttachment::kTargetDepartmentIdFieldNumber;
const int ResolutionRequestAttachment::kCommentFieldNumber;
const int ResolutionRequestAttachment::kLabelsFieldNumber;
#endif  // !_MSC_VER

ResolutionRequestAttachment::ResolutionRequestAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ResolutionRequestAttachment)
}

void ResolutionRequestAttachment::InitAsDefaultInstance() {
}

ResolutionRequestAttachment::ResolutionRequestAttachment(const ResolutionRequestAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ResolutionRequestAttachment)
}

void ResolutionRequestAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = -1;
  targetuserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetdepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRequestAttachment::~ResolutionRequestAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ResolutionRequestAttachment)
  SharedDtor();
}

void ResolutionRequestAttachment::SharedDtor() {
  if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialdocumentid_;
  }
  if (targetuserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetuserid_;
  }
  if (targetdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetdepartmentid_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRequestAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRequestAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRequestAttachment_descriptor_;
}

const ResolutionRequestAttachment& ResolutionRequestAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

ResolutionRequestAttachment* ResolutionRequestAttachment::default_instance_ = NULL;

ResolutionRequestAttachment* ResolutionRequestAttachment::New() const {
  return new ResolutionRequestAttachment;
}

void ResolutionRequestAttachment::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_initialdocumentid()) {
      if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        initialdocumentid_->clear();
      }
    }
    type_ = -1;
    if (has_targetuserid()) {
      if (targetuserid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetuserid_->clear();
      }
    }
    if (has_targetdepartmentid()) {
      if (targetdepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetdepartmentid_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRequestAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ResolutionRequestAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InitialDocumentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initialdocumentid().data(), this->initialdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "initialdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required .Diadoc.Api.Proto.Events.ResolutionRequestType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Events::ResolutionRequestType_IsValid(value)) {
            set_type(static_cast< ::Diadoc::Api::Proto::Events::ResolutionRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TargetUserId;
        break;
      }

      // optional string TargetUserId = 3;
      case 3: {
        if (tag == 26) {
         parse_TargetUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetuserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetuserid().data(), this->targetuserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetuserid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TargetDepartmentId;
        break;
      }

      // optional string TargetDepartmentId = 4;
      case 4: {
        if (tag == 34) {
         parse_TargetDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetdepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetdepartmentid().data(), this->targetdepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetdepartmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Comment;
        break;
      }

      // optional string Comment = 5;
      case 5: {
        if (tag == 42) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 6;
      case 6: {
        if (tag == 50) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ResolutionRequestAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ResolutionRequestAttachment)
  return false;
#undef DO_
}

void ResolutionRequestAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ResolutionRequestAttachment)
  // required string InitialDocumentId = 1;
  if (has_initialdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialdocumentid().data(), this->initialdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->initialdocumentid(), output);
  }

  // required .Diadoc.Api.Proto.Events.ResolutionRequestType Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string TargetUserId = 3;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetuserid().data(), this->targetuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetuserid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->targetuserid(), output);
  }

  // optional string TargetDepartmentId = 4;
  if (has_targetdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetdepartmentid().data(), this->targetdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetdepartmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->targetdepartmentid(), output);
  }

  // optional string Comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->comment(), output);
  }

  // repeated string Labels = 6;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ResolutionRequestAttachment)
}

::google::protobuf::uint8* ResolutionRequestAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ResolutionRequestAttachment)
  // required string InitialDocumentId = 1;
  if (has_initialdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialdocumentid().data(), this->initialdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initialdocumentid(), target);
  }

  // required .Diadoc.Api.Proto.Events.ResolutionRequestType Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string TargetUserId = 3;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetuserid().data(), this->targetuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetuserid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->targetuserid(), target);
  }

  // optional string TargetDepartmentId = 4;
  if (has_targetdepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetdepartmentid().data(), this->targetdepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetdepartmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->targetdepartmentid(), target);
  }

  // optional string Comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }

  // repeated string Labels = 6;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ResolutionRequestAttachment)
  return target;
}

int ResolutionRequestAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InitialDocumentId = 1;
    if (has_initialdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialdocumentid());
    }

    // required .Diadoc.Api.Proto.Events.ResolutionRequestType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string TargetUserId = 3;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetuserid());
    }

    // optional string TargetDepartmentId = 4;
    if (has_targetdepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetdepartmentid());
    }

    // optional string Comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  // repeated string Labels = 6;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRequestAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRequestAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRequestAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRequestAttachment::MergeFrom(const ResolutionRequestAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialdocumentid()) {
      set_initialdocumentid(from.initialdocumentid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
    if (from.has_targetdepartmentid()) {
      set_targetdepartmentid(from.targetdepartmentid());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRequestAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRequestAttachment::CopyFrom(const ResolutionRequestAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRequestAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResolutionRequestAttachment::Swap(ResolutionRequestAttachment* other) {
  if (other != this) {
    std::swap(initialdocumentid_, other->initialdocumentid_);
    std::swap(type_, other->type_);
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(targetdepartmentid_, other->targetdepartmentid_);
    std::swap(comment_, other->comment_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRequestAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRequestAttachment_descriptor_;
  metadata.reflection = ResolutionRequestAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionRouteAssignment::kInitialDocumentIdFieldNumber;
const int ResolutionRouteAssignment::kRouteIdFieldNumber;
const int ResolutionRouteAssignment::kCommentFieldNumber;
const int ResolutionRouteAssignment::kLabelsFieldNumber;
#endif  // !_MSC_VER

ResolutionRouteAssignment::ResolutionRouteAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ResolutionRouteAssignment)
}

void ResolutionRouteAssignment::InitAsDefaultInstance() {
}

ResolutionRouteAssignment::ResolutionRouteAssignment(const ResolutionRouteAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ResolutionRouteAssignment)
}

void ResolutionRouteAssignment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  routeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRouteAssignment::~ResolutionRouteAssignment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ResolutionRouteAssignment)
  SharedDtor();
}

void ResolutionRouteAssignment::SharedDtor() {
  if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialdocumentid_;
  }
  if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete routeid_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRouteAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRouteAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRouteAssignment_descriptor_;
}

const ResolutionRouteAssignment& ResolutionRouteAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

ResolutionRouteAssignment* ResolutionRouteAssignment::default_instance_ = NULL;

ResolutionRouteAssignment* ResolutionRouteAssignment::New() const {
  return new ResolutionRouteAssignment;
}

void ResolutionRouteAssignment::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_initialdocumentid()) {
      if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        initialdocumentid_->clear();
      }
    }
    if (has_routeid()) {
      if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        routeid_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRouteAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ResolutionRouteAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InitialDocumentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initialdocumentid().data(), this->initialdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "initialdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RouteId;
        break;
      }

      // required string RouteId = 2;
      case 2: {
        if (tag == 18) {
         parse_RouteId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_routeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->routeid().data(), this->routeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "routeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 4;
      case 4: {
        if (tag == 34) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ResolutionRouteAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ResolutionRouteAssignment)
  return false;
#undef DO_
}

void ResolutionRouteAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ResolutionRouteAssignment)
  // required string InitialDocumentId = 1;
  if (has_initialdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialdocumentid().data(), this->initialdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->initialdocumentid(), output);
  }

  // required string RouteId = 2;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routeid().data(), this->routeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "routeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->routeid(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated string Labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ResolutionRouteAssignment)
}

::google::protobuf::uint8* ResolutionRouteAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ResolutionRouteAssignment)
  // required string InitialDocumentId = 1;
  if (has_initialdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialdocumentid().data(), this->initialdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initialdocumentid(), target);
  }

  // required string RouteId = 2;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routeid().data(), this->routeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "routeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->routeid(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated string Labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ResolutionRouteAssignment)
  return target;
}

int ResolutionRouteAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InitialDocumentId = 1;
    if (has_initialdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialdocumentid());
    }

    // required string RouteId = 2;
    if (has_routeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->routeid());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  // repeated string Labels = 4;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRouteAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRouteAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRouteAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRouteAssignment::MergeFrom(const ResolutionRouteAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialdocumentid()) {
      set_initialdocumentid(from.initialdocumentid());
    }
    if (from.has_routeid()) {
      set_routeid(from.routeid());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRouteAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRouteAssignment::CopyFrom(const ResolutionRouteAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRouteAssignment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResolutionRouteAssignment::Swap(ResolutionRouteAssignment* other) {
  if (other != this) {
    std::swap(initialdocumentid_, other->initialdocumentid_);
    std::swap(routeid_, other->routeid_);
    std::swap(comment_, other->comment_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRouteAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRouteAssignment_descriptor_;
  metadata.reflection = ResolutionRouteAssignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionRequestCancellationAttachment::kInitialResolutionRequestIdFieldNumber;
const int ResolutionRequestCancellationAttachment::kCommentFieldNumber;
const int ResolutionRequestCancellationAttachment::kLabelsFieldNumber;
#endif  // !_MSC_VER

ResolutionRequestCancellationAttachment::ResolutionRequestCancellationAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment)
}

void ResolutionRequestCancellationAttachment::InitAsDefaultInstance() {
}

ResolutionRequestCancellationAttachment::ResolutionRequestCancellationAttachment(const ResolutionRequestCancellationAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment)
}

void ResolutionRequestCancellationAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  initialresolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRequestCancellationAttachment::~ResolutionRequestCancellationAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment)
  SharedDtor();
}

void ResolutionRequestCancellationAttachment::SharedDtor() {
  if (initialresolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialresolutionrequestid_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRequestCancellationAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRequestCancellationAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRequestCancellationAttachment_descriptor_;
}

const ResolutionRequestCancellationAttachment& ResolutionRequestCancellationAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

ResolutionRequestCancellationAttachment* ResolutionRequestCancellationAttachment::default_instance_ = NULL;

ResolutionRequestCancellationAttachment* ResolutionRequestCancellationAttachment::New() const {
  return new ResolutionRequestCancellationAttachment;
}

void ResolutionRequestCancellationAttachment::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_initialresolutionrequestid()) {
      if (initialresolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        initialresolutionrequestid_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRequestCancellationAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InitialResolutionRequestId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialresolutionrequestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initialresolutionrequestid().data(), this->initialresolutionrequestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "initialresolutionrequestid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Comment;
        break;
      }

      // optional string Comment = 2;
      case 2: {
        if (tag == 18) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 3;
      case 3: {
        if (tag == 26) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment)
  return false;
#undef DO_
}

void ResolutionRequestCancellationAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment)
  // required string InitialResolutionRequestId = 1;
  if (has_initialresolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialresolutionrequestid().data(), this->initialresolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialresolutionrequestid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->initialresolutionrequestid(), output);
  }

  // optional string Comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // repeated string Labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment)
}

::google::protobuf::uint8* ResolutionRequestCancellationAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment)
  // required string InitialResolutionRequestId = 1;
  if (has_initialresolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialresolutionrequestid().data(), this->initialresolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialresolutionrequestid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initialresolutionrequestid(), target);
  }

  // optional string Comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // repeated string Labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ResolutionRequestCancellationAttachment)
  return target;
}

int ResolutionRequestCancellationAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InitialResolutionRequestId = 1;
    if (has_initialresolutionrequestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialresolutionrequestid());
    }

    // optional string Comment = 2;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  // repeated string Labels = 3;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRequestCancellationAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRequestCancellationAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRequestCancellationAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRequestCancellationAttachment::MergeFrom(const ResolutionRequestCancellationAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialresolutionrequestid()) {
      set_initialresolutionrequestid(from.initialresolutionrequestid());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRequestCancellationAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRequestCancellationAttachment::CopyFrom(const ResolutionRequestCancellationAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRequestCancellationAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResolutionRequestCancellationAttachment::Swap(ResolutionRequestCancellationAttachment* other) {
  if (other != this) {
    std::swap(initialresolutionrequestid_, other->initialresolutionrequestid_);
    std::swap(comment_, other->comment_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRequestCancellationAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRequestCancellationAttachment_descriptor_;
  metadata.reflection = ResolutionRequestCancellationAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionRequestDenialCancellationAttachment::kInitialResolutionRequestDenialIdFieldNumber;
#endif  // !_MSC_VER

ResolutionRequestDenialCancellationAttachment::ResolutionRequestDenialCancellationAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment)
}

void ResolutionRequestDenialCancellationAttachment::InitAsDefaultInstance() {
}

ResolutionRequestDenialCancellationAttachment::ResolutionRequestDenialCancellationAttachment(const ResolutionRequestDenialCancellationAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment)
}

void ResolutionRequestDenialCancellationAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  initialresolutionrequestdenialid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRequestDenialCancellationAttachment::~ResolutionRequestDenialCancellationAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment)
  SharedDtor();
}

void ResolutionRequestDenialCancellationAttachment::SharedDtor() {
  if (initialresolutionrequestdenialid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialresolutionrequestdenialid_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRequestDenialCancellationAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRequestDenialCancellationAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRequestDenialCancellationAttachment_descriptor_;
}

const ResolutionRequestDenialCancellationAttachment& ResolutionRequestDenialCancellationAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

ResolutionRequestDenialCancellationAttachment* ResolutionRequestDenialCancellationAttachment::default_instance_ = NULL;

ResolutionRequestDenialCancellationAttachment* ResolutionRequestDenialCancellationAttachment::New() const {
  return new ResolutionRequestDenialCancellationAttachment;
}

void ResolutionRequestDenialCancellationAttachment::Clear() {
  if (has_initialresolutionrequestdenialid()) {
    if (initialresolutionrequestdenialid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      initialresolutionrequestdenialid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRequestDenialCancellationAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InitialResolutionRequestDenialId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialresolutionrequestdenialid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initialresolutionrequestdenialid().data(), this->initialresolutionrequestdenialid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "initialresolutionrequestdenialid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment)
  return false;
#undef DO_
}

void ResolutionRequestDenialCancellationAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment)
  // required string InitialResolutionRequestDenialId = 1;
  if (has_initialresolutionrequestdenialid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialresolutionrequestdenialid().data(), this->initialresolutionrequestdenialid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialresolutionrequestdenialid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->initialresolutionrequestdenialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment)
}

::google::protobuf::uint8* ResolutionRequestDenialCancellationAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment)
  // required string InitialResolutionRequestDenialId = 1;
  if (has_initialresolutionrequestdenialid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialresolutionrequestdenialid().data(), this->initialresolutionrequestdenialid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialresolutionrequestdenialid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initialresolutionrequestdenialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ResolutionRequestDenialCancellationAttachment)
  return target;
}

int ResolutionRequestDenialCancellationAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InitialResolutionRequestDenialId = 1;
    if (has_initialresolutionrequestdenialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialresolutionrequestdenialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRequestDenialCancellationAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRequestDenialCancellationAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRequestDenialCancellationAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRequestDenialCancellationAttachment::MergeFrom(const ResolutionRequestDenialCancellationAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialresolutionrequestdenialid()) {
      set_initialresolutionrequestdenialid(from.initialresolutionrequestdenialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRequestDenialCancellationAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRequestDenialCancellationAttachment::CopyFrom(const ResolutionRequestDenialCancellationAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRequestDenialCancellationAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResolutionRequestDenialCancellationAttachment::Swap(ResolutionRequestDenialCancellationAttachment* other) {
  if (other != this) {
    std::swap(initialresolutionrequestdenialid_, other->initialresolutionrequestdenialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRequestDenialCancellationAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRequestDenialCancellationAttachment_descriptor_;
  metadata.reflection = ResolutionRequestDenialCancellationAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionRequestDenialAttachment::kInitialResolutionRequestIdFieldNumber;
const int ResolutionRequestDenialAttachment::kCommentFieldNumber;
const int ResolutionRequestDenialAttachment::kLabelsFieldNumber;
#endif  // !_MSC_VER

ResolutionRequestDenialAttachment::ResolutionRequestDenialAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment)
}

void ResolutionRequestDenialAttachment::InitAsDefaultInstance() {
}

ResolutionRequestDenialAttachment::ResolutionRequestDenialAttachment(const ResolutionRequestDenialAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment)
}

void ResolutionRequestDenialAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  initialresolutionrequestid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRequestDenialAttachment::~ResolutionRequestDenialAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment)
  SharedDtor();
}

void ResolutionRequestDenialAttachment::SharedDtor() {
  if (initialresolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialresolutionrequestid_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRequestDenialAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRequestDenialAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRequestDenialAttachment_descriptor_;
}

const ResolutionRequestDenialAttachment& ResolutionRequestDenialAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

ResolutionRequestDenialAttachment* ResolutionRequestDenialAttachment::default_instance_ = NULL;

ResolutionRequestDenialAttachment* ResolutionRequestDenialAttachment::New() const {
  return new ResolutionRequestDenialAttachment;
}

void ResolutionRequestDenialAttachment::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_initialresolutionrequestid()) {
      if (initialresolutionrequestid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        initialresolutionrequestid_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRequestDenialAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InitialResolutionRequestId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialresolutionrequestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initialresolutionrequestid().data(), this->initialresolutionrequestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "initialresolutionrequestid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Comment;
        break;
      }

      // optional string Comment = 2;
      case 2: {
        if (tag == 18) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 3;
      case 3: {
        if (tag == 26) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment)
  return false;
#undef DO_
}

void ResolutionRequestDenialAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment)
  // required string InitialResolutionRequestId = 1;
  if (has_initialresolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialresolutionrequestid().data(), this->initialresolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialresolutionrequestid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->initialresolutionrequestid(), output);
  }

  // optional string Comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // repeated string Labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment)
}

::google::protobuf::uint8* ResolutionRequestDenialAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment)
  // required string InitialResolutionRequestId = 1;
  if (has_initialresolutionrequestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialresolutionrequestid().data(), this->initialresolutionrequestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialresolutionrequestid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initialresolutionrequestid(), target);
  }

  // optional string Comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // repeated string Labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ResolutionRequestDenialAttachment)
  return target;
}

int ResolutionRequestDenialAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InitialResolutionRequestId = 1;
    if (has_initialresolutionrequestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialresolutionrequestid());
    }

    // optional string Comment = 2;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  // repeated string Labels = 3;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRequestDenialAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRequestDenialAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRequestDenialAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRequestDenialAttachment::MergeFrom(const ResolutionRequestDenialAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialresolutionrequestid()) {
      set_initialresolutionrequestid(from.initialresolutionrequestid());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRequestDenialAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRequestDenialAttachment::CopyFrom(const ResolutionRequestDenialAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRequestDenialAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResolutionRequestDenialAttachment::Swap(ResolutionRequestDenialAttachment* other) {
  if (other != this) {
    std::swap(initialresolutionrequestid_, other->initialresolutionrequestid_);
    std::swap(comment_, other->comment_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRequestDenialAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRequestDenialAttachment_descriptor_;
  metadata.reflection = ResolutionRequestDenialAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionAttachment::kInitialDocumentIdFieldNumber;
const int ResolutionAttachment::kResolutionTypeFieldNumber;
const int ResolutionAttachment::kCommentFieldNumber;
const int ResolutionAttachment::kLabelsFieldNumber;
#endif  // !_MSC_VER

ResolutionAttachment::ResolutionAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ResolutionAttachment)
}

void ResolutionAttachment::InitAsDefaultInstance() {
}

ResolutionAttachment::ResolutionAttachment(const ResolutionAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ResolutionAttachment)
}

void ResolutionAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  initialdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resolutiontype_ = -1;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionAttachment::~ResolutionAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ResolutionAttachment)
  SharedDtor();
}

void ResolutionAttachment::SharedDtor() {
  if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete initialdocumentid_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionAttachment_descriptor_;
}

const ResolutionAttachment& ResolutionAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

ResolutionAttachment* ResolutionAttachment::default_instance_ = NULL;

ResolutionAttachment* ResolutionAttachment::New() const {
  return new ResolutionAttachment;
}

void ResolutionAttachment::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_initialdocumentid()) {
      if (initialdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        initialdocumentid_->clear();
      }
    }
    resolutiontype_ = -1;
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ResolutionAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InitialDocumentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initialdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initialdocumentid().data(), this->initialdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "initialdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ResolutionType;
        break;
      }

      // required .Diadoc.Api.Proto.Events.ResolutionType ResolutionType = 2;
      case 2: {
        if (tag == 16) {
         parse_ResolutionType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Events::ResolutionType_IsValid(value)) {
            set_resolutiontype(static_cast< ::Diadoc::Api::Proto::Events::ResolutionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3;
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 4;
      case 4: {
        if (tag == 34) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ResolutionAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ResolutionAttachment)
  return false;
#undef DO_
}

void ResolutionAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ResolutionAttachment)
  // required string InitialDocumentId = 1;
  if (has_initialdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialdocumentid().data(), this->initialdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->initialdocumentid(), output);
  }

  // required .Diadoc.Api.Proto.Events.ResolutionType ResolutionType = 2;
  if (has_resolutiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->resolutiontype(), output);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated string Labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ResolutionAttachment)
}

::google::protobuf::uint8* ResolutionAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ResolutionAttachment)
  // required string InitialDocumentId = 1;
  if (has_initialdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initialdocumentid().data(), this->initialdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "initialdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->initialdocumentid(), target);
  }

  // required .Diadoc.Api.Proto.Events.ResolutionType ResolutionType = 2;
  if (has_resolutiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->resolutiontype(), target);
  }

  // optional string Comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated string Labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ResolutionAttachment)
  return target;
}

int ResolutionAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InitialDocumentId = 1;
    if (has_initialdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initialdocumentid());
    }

    // required .Diadoc.Api.Proto.Events.ResolutionType ResolutionType = 2;
    if (has_resolutiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resolutiontype());
    }

    // optional string Comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  // repeated string Labels = 4;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionAttachment::MergeFrom(const ResolutionAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialdocumentid()) {
      set_initialdocumentid(from.initialdocumentid());
    }
    if (from.has_resolutiontype()) {
      set_resolutiontype(from.resolutiontype());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionAttachment::CopyFrom(const ResolutionAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResolutionAttachment::Swap(ResolutionAttachment* other) {
  if (other != this) {
    std::swap(initialdocumentid_, other->initialdocumentid_);
    std::swap(resolutiontype_, other->resolutiontype_);
    std::swap(comment_, other->comment_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionAttachment_descriptor_;
  metadata.reflection = ResolutionAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiptAttachment::kParentEntityIdFieldNumber;
const int ReceiptAttachment::kSignedContentFieldNumber;
const int ReceiptAttachment::kLabelsFieldNumber;
#endif  // !_MSC_VER

ReceiptAttachment::ReceiptAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ReceiptAttachment)
}

void ReceiptAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

ReceiptAttachment::ReceiptAttachment(const ReceiptAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ReceiptAttachment)
}

void ReceiptAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signedcontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiptAttachment::~ReceiptAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ReceiptAttachment)
  SharedDtor();
}

void ReceiptAttachment::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void ReceiptAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiptAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiptAttachment_descriptor_;
}

const ReceiptAttachment& ReceiptAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

ReceiptAttachment* ReceiptAttachment::default_instance_ = NULL;

ReceiptAttachment* ReceiptAttachment::New() const {
  return new ReceiptAttachment;
}

void ReceiptAttachment::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parententityid_->clear();
      }
    }
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiptAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ReceiptAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parententityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SignedContent;
        break;
      }

      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
      case 2: {
        if (tag == 18) {
         parse_SignedContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 4;
      case 4: {
        if (tag == 34) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ReceiptAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ReceiptAttachment)
  return false;
#undef DO_
}

void ReceiptAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ReceiptAttachment)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parententityid(), output);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signedcontent(), output);
  }

  // repeated string Labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ReceiptAttachment)
}

::google::protobuf::uint8* ReceiptAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ReceiptAttachment)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signedcontent(), target);
  }

  // repeated string Labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ReceiptAttachment)
  return target;
}

int ReceiptAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

  }
  // repeated string Labels = 4;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiptAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiptAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiptAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiptAttachment::MergeFrom(const ReceiptAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiptAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiptAttachment::CopyFrom(const ReceiptAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiptAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReceiptAttachment::Swap(ReceiptAttachment* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signedcontent_, other->signedcontent_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiptAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiptAttachment_descriptor_;
  metadata.reflection = ReceiptAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CorrectionRequestAttachment::kParentEntityIdFieldNumber;
const int CorrectionRequestAttachment::kSignedContentFieldNumber;
const int CorrectionRequestAttachment::kLabelsFieldNumber;
#endif  // !_MSC_VER

CorrectionRequestAttachment::CorrectionRequestAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.CorrectionRequestAttachment)
}

void CorrectionRequestAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

CorrectionRequestAttachment::CorrectionRequestAttachment(const CorrectionRequestAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.CorrectionRequestAttachment)
}

void CorrectionRequestAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signedcontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorrectionRequestAttachment::~CorrectionRequestAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.CorrectionRequestAttachment)
  SharedDtor();
}

void CorrectionRequestAttachment::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void CorrectionRequestAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CorrectionRequestAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CorrectionRequestAttachment_descriptor_;
}

const CorrectionRequestAttachment& CorrectionRequestAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

CorrectionRequestAttachment* CorrectionRequestAttachment::default_instance_ = NULL;

CorrectionRequestAttachment* CorrectionRequestAttachment::New() const {
  return new CorrectionRequestAttachment;
}

void CorrectionRequestAttachment::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parententityid_->clear();
      }
    }
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CorrectionRequestAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.CorrectionRequestAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parententityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SignedContent;
        break;
      }

      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
      case 2: {
        if (tag == 18) {
         parse_SignedContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 4;
      case 4: {
        if (tag == 34) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.CorrectionRequestAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.CorrectionRequestAttachment)
  return false;
#undef DO_
}

void CorrectionRequestAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.CorrectionRequestAttachment)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parententityid(), output);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signedcontent(), output);
  }

  // repeated string Labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.CorrectionRequestAttachment)
}

::google::protobuf::uint8* CorrectionRequestAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.CorrectionRequestAttachment)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signedcontent(), target);
  }

  // repeated string Labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.CorrectionRequestAttachment)
  return target;
}

int CorrectionRequestAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

  }
  // repeated string Labels = 4;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorrectionRequestAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CorrectionRequestAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CorrectionRequestAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CorrectionRequestAttachment::MergeFrom(const CorrectionRequestAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CorrectionRequestAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorrectionRequestAttachment::CopyFrom(const CorrectionRequestAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorrectionRequestAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CorrectionRequestAttachment::Swap(CorrectionRequestAttachment* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signedcontent_, other->signedcontent_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CorrectionRequestAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CorrectionRequestAttachment_descriptor_;
  metadata.reflection = CorrectionRequestAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentSignature::kParentEntityIdFieldNumber;
const int DocumentSignature::kSignatureFieldNumber;
const int DocumentSignature::kSignWithTestSignatureFieldNumber;
const int DocumentSignature::kIsApprovementSignatureFieldNumber;
const int DocumentSignature::kSignatureNameOnShelfFieldNumber;
const int DocumentSignature::kPatchedContentIdFieldNumber;
const int DocumentSignature::kLabelsFieldNumber;
#endif  // !_MSC_VER

DocumentSignature::DocumentSignature()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.DocumentSignature)
}

void DocumentSignature::InitAsDefaultInstance() {
}

DocumentSignature::DocumentSignature(const DocumentSignature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.DocumentSignature)
}

void DocumentSignature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signwithtestsignature_ = false;
  isapprovementsignature_ = false;
  signaturenameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patchedcontentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentSignature::~DocumentSignature() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.DocumentSignature)
  SharedDtor();
}

void DocumentSignature::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (signaturenameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signaturenameonshelf_;
  }
  if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patchedcontentid_;
  }
  if (this != default_instance_) {
  }
}

void DocumentSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentSignature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentSignature_descriptor_;
}

const DocumentSignature& DocumentSignature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

DocumentSignature* DocumentSignature::default_instance_ = NULL;

DocumentSignature* DocumentSignature::New() const {
  return new DocumentSignature;
}

void DocumentSignature::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DocumentSignature*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(signwithtestsignature_, isapprovementsignature_);
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parententityid_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
    if (has_signaturenameonshelf()) {
      if (signaturenameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signaturenameonshelf_->clear();
      }
    }
    if (has_patchedcontentid()) {
      if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patchedcontentid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.DocumentSignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parententityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Signature;
        break;
      }

      // optional bytes Signature = 2;
      case 2: {
        if (tag == 18) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SignWithTestSignature;
        break;
      }

      // optional bool SignWithTestSignature = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_SignWithTestSignature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signwithtestsignature_)));
          set_has_signwithtestsignature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsApprovementSignature;
        break;
      }

      // optional bool IsApprovementSignature = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_IsApprovementSignature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isapprovementsignature_)));
          set_has_isapprovementsignature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SignatureNameOnShelf;
        break;
      }

      // optional string SignatureNameOnShelf = 6;
      case 6: {
        if (tag == 50) {
         parse_SignatureNameOnShelf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signaturenameonshelf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signaturenameonshelf().data(), this->signaturenameonshelf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signaturenameonshelf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_PatchedContentId;
        break;
      }

      // optional string PatchedContentId = 7;
      case 7: {
        if (tag == 58) {
         parse_PatchedContentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patchedcontentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patchedcontentid().data(), this->patchedcontentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "patchedcontentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 8;
      case 8: {
        if (tag == 66) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.DocumentSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.DocumentSignature)
  return false;
#undef DO_
}

void DocumentSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.DocumentSignature)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parententityid(), output);
  }

  // optional bytes Signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  // optional bool SignWithTestSignature = 4 [default = false];
  if (has_signwithtestsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->signwithtestsignature(), output);
  }

  // optional bool IsApprovementSignature = 5 [default = false];
  if (has_isapprovementsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isapprovementsignature(), output);
  }

  // optional string SignatureNameOnShelf = 6;
  if (has_signaturenameonshelf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signaturenameonshelf().data(), this->signaturenameonshelf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signaturenameonshelf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->signaturenameonshelf(), output);
  }

  // optional string PatchedContentId = 7;
  if (has_patchedcontentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patchedcontentid().data(), this->patchedcontentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patchedcontentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->patchedcontentid(), output);
  }

  // repeated string Labels = 8;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.DocumentSignature)
}

::google::protobuf::uint8* DocumentSignature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.DocumentSignature)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // optional bytes Signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  // optional bool SignWithTestSignature = 4 [default = false];
  if (has_signwithtestsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->signwithtestsignature(), target);
  }

  // optional bool IsApprovementSignature = 5 [default = false];
  if (has_isapprovementsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isapprovementsignature(), target);
  }

  // optional string SignatureNameOnShelf = 6;
  if (has_signaturenameonshelf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signaturenameonshelf().data(), this->signaturenameonshelf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signaturenameonshelf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->signaturenameonshelf(), target);
  }

  // optional string PatchedContentId = 7;
  if (has_patchedcontentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patchedcontentid().data(), this->patchedcontentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patchedcontentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->patchedcontentid(), target);
  }

  // repeated string Labels = 8;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.DocumentSignature)
  return target;
}

int DocumentSignature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // optional bytes Signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bool SignWithTestSignature = 4 [default = false];
    if (has_signwithtestsignature()) {
      total_size += 1 + 1;
    }

    // optional bool IsApprovementSignature = 5 [default = false];
    if (has_isapprovementsignature()) {
      total_size += 1 + 1;
    }

    // optional string SignatureNameOnShelf = 6;
    if (has_signaturenameonshelf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signaturenameonshelf());
    }

    // optional string PatchedContentId = 7;
    if (has_patchedcontentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patchedcontentid());
    }

  }
  // repeated string Labels = 8;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentSignature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentSignature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentSignature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentSignature::MergeFrom(const DocumentSignature& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_signwithtestsignature()) {
      set_signwithtestsignature(from.signwithtestsignature());
    }
    if (from.has_isapprovementsignature()) {
      set_isapprovementsignature(from.isapprovementsignature());
    }
    if (from.has_signaturenameonshelf()) {
      set_signaturenameonshelf(from.signaturenameonshelf());
    }
    if (from.has_patchedcontentid()) {
      set_patchedcontentid(from.patchedcontentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentSignature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentSignature::CopyFrom(const DocumentSignature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSignature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DocumentSignature::Swap(DocumentSignature* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signature_, other->signature_);
    std::swap(signwithtestsignature_, other->signwithtestsignature_);
    std::swap(isapprovementsignature_, other->isapprovementsignature_);
    std::swap(signaturenameonshelf_, other->signaturenameonshelf_);
    std::swap(patchedcontentid_, other->patchedcontentid_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentSignature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentSignature_descriptor_;
  metadata.reflection = DocumentSignature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentSenderSignature::kParentEntityIdFieldNumber;
const int DocumentSenderSignature::kSignatureFieldNumber;
const int DocumentSenderSignature::kSignWithTestSignatureFieldNumber;
const int DocumentSenderSignature::kPatchedContentIdFieldNumber;
#endif  // !_MSC_VER

DocumentSenderSignature::DocumentSenderSignature()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.DocumentSenderSignature)
}

void DocumentSenderSignature::InitAsDefaultInstance() {
}

DocumentSenderSignature::DocumentSenderSignature(const DocumentSenderSignature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.DocumentSenderSignature)
}

void DocumentSenderSignature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signwithtestsignature_ = false;
  patchedcontentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentSenderSignature::~DocumentSenderSignature() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.DocumentSenderSignature)
  SharedDtor();
}

void DocumentSenderSignature::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patchedcontentid_;
  }
  if (this != default_instance_) {
  }
}

void DocumentSenderSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentSenderSignature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentSenderSignature_descriptor_;
}

const DocumentSenderSignature& DocumentSenderSignature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

DocumentSenderSignature* DocumentSenderSignature::default_instance_ = NULL;

DocumentSenderSignature* DocumentSenderSignature::New() const {
  return new DocumentSenderSignature;
}

void DocumentSenderSignature::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parententityid_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
    signwithtestsignature_ = false;
    if (has_patchedcontentid()) {
      if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patchedcontentid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentSenderSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.DocumentSenderSignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parententityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Signature;
        break;
      }

      // optional bytes Signature = 2;
      case 2: {
        if (tag == 18) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SignWithTestSignature;
        break;
      }

      // optional bool SignWithTestSignature = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_SignWithTestSignature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signwithtestsignature_)));
          set_has_signwithtestsignature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_PatchedContentId;
        break;
      }

      // optional string PatchedContentId = 5;
      case 5: {
        if (tag == 42) {
         parse_PatchedContentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patchedcontentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patchedcontentid().data(), this->patchedcontentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "patchedcontentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.DocumentSenderSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.DocumentSenderSignature)
  return false;
#undef DO_
}

void DocumentSenderSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.DocumentSenderSignature)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parententityid(), output);
  }

  // optional bytes Signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  // optional bool SignWithTestSignature = 4 [default = false];
  if (has_signwithtestsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->signwithtestsignature(), output);
  }

  // optional string PatchedContentId = 5;
  if (has_patchedcontentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patchedcontentid().data(), this->patchedcontentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patchedcontentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->patchedcontentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.DocumentSenderSignature)
}

::google::protobuf::uint8* DocumentSenderSignature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.DocumentSenderSignature)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // optional bytes Signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  // optional bool SignWithTestSignature = 4 [default = false];
  if (has_signwithtestsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->signwithtestsignature(), target);
  }

  // optional string PatchedContentId = 5;
  if (has_patchedcontentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patchedcontentid().data(), this->patchedcontentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patchedcontentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->patchedcontentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.DocumentSenderSignature)
  return target;
}

int DocumentSenderSignature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // optional bytes Signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bool SignWithTestSignature = 4 [default = false];
    if (has_signwithtestsignature()) {
      total_size += 1 + 1;
    }

    // optional string PatchedContentId = 5;
    if (has_patchedcontentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patchedcontentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentSenderSignature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentSenderSignature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentSenderSignature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentSenderSignature::MergeFrom(const DocumentSenderSignature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_signwithtestsignature()) {
      set_signwithtestsignature(from.signwithtestsignature());
    }
    if (from.has_patchedcontentid()) {
      set_patchedcontentid(from.patchedcontentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentSenderSignature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentSenderSignature::CopyFrom(const DocumentSenderSignature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSenderSignature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DocumentSenderSignature::Swap(DocumentSenderSignature* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signature_, other->signature_);
    std::swap(signwithtestsignature_, other->signwithtestsignature_);
    std::swap(patchedcontentid_, other->patchedcontentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentSenderSignature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentSenderSignature_descriptor_;
  metadata.reflection = DocumentSenderSignature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestedSignatureRejection::kParentEntityIdFieldNumber;
const int RequestedSignatureRejection::kSignedContentFieldNumber;
const int RequestedSignatureRejection::kLabelsFieldNumber;
#endif  // !_MSC_VER

RequestedSignatureRejection::RequestedSignatureRejection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.RequestedSignatureRejection)
}

void RequestedSignatureRejection::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

RequestedSignatureRejection::RequestedSignatureRejection(const RequestedSignatureRejection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.RequestedSignatureRejection)
}

void RequestedSignatureRejection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signedcontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestedSignatureRejection::~RequestedSignatureRejection() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.RequestedSignatureRejection)
  SharedDtor();
}

void RequestedSignatureRejection::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void RequestedSignatureRejection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestedSignatureRejection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestedSignatureRejection_descriptor_;
}

const RequestedSignatureRejection& RequestedSignatureRejection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

RequestedSignatureRejection* RequestedSignatureRejection::default_instance_ = NULL;

RequestedSignatureRejection* RequestedSignatureRejection::New() const {
  return new RequestedSignatureRejection;
}

void RequestedSignatureRejection::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parententityid_->clear();
      }
    }
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestedSignatureRejection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.RequestedSignatureRejection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parententityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SignedContent;
        break;
      }

      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
      case 2: {
        if (tag == 18) {
         parse_SignedContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 3;
      case 3: {
        if (tag == 26) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.RequestedSignatureRejection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.RequestedSignatureRejection)
  return false;
#undef DO_
}

void RequestedSignatureRejection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.RequestedSignatureRejection)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parententityid(), output);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signedcontent(), output);
  }

  // repeated string Labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.RequestedSignatureRejection)
}

::google::protobuf::uint8* RequestedSignatureRejection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.RequestedSignatureRejection)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signedcontent(), target);
  }

  // repeated string Labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.RequestedSignatureRejection)
  return target;
}

int RequestedSignatureRejection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

  }
  // repeated string Labels = 3;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestedSignatureRejection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestedSignatureRejection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestedSignatureRejection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestedSignatureRejection::MergeFrom(const RequestedSignatureRejection& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestedSignatureRejection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestedSignatureRejection::CopyFrom(const RequestedSignatureRejection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestedSignatureRejection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestedSignatureRejection::Swap(RequestedSignatureRejection* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signedcontent_, other->signedcontent_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestedSignatureRejection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestedSignatureRejection_descriptor_;
  metadata.reflection = RequestedSignatureRejection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignedContent::kContentFieldNumber;
const int SignedContent::kSignatureFieldNumber;
const int SignedContent::kNameOnShelfFieldNumber;
const int SignedContent::kSignWithTestSignatureFieldNumber;
const int SignedContent::kSignatureNameOnShelfFieldNumber;
#endif  // !_MSC_VER

SignedContent::SignedContent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.SignedContent)
}

void SignedContent::InitAsDefaultInstance() {
}

SignedContent::SignedContent(const SignedContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.SignedContent)
}

void SignedContent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signwithtestsignature_ = false;
  signaturenameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedContent::~SignedContent() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.SignedContent)
  SharedDtor();
}

void SignedContent::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (nameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nameonshelf_;
  }
  if (signaturenameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signaturenameonshelf_;
  }
  if (this != default_instance_) {
  }
}

void SignedContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedContent_descriptor_;
}

const SignedContent& SignedContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

SignedContent* SignedContent::default_instance_ = NULL;

SignedContent* SignedContent::New() const {
  return new SignedContent;
}

void SignedContent::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
    if (has_nameonshelf()) {
      if (nameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nameonshelf_->clear();
      }
    }
    signwithtestsignature_ = false;
    if (has_signaturenameonshelf()) {
      if (signaturenameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signaturenameonshelf_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.SignedContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes Content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Signature;
        break;
      }

      // optional bytes Signature = 2;
      case 2: {
        if (tag == 18) {
         parse_Signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_NameOnShelf;
        break;
      }

      // optional string NameOnShelf = 4;
      case 4: {
        if (tag == 34) {
         parse_NameOnShelf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameonshelf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nameonshelf().data(), this->nameonshelf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nameonshelf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SignWithTestSignature;
        break;
      }

      // optional bool SignWithTestSignature = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_SignWithTestSignature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signwithtestsignature_)));
          set_has_signwithtestsignature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_SignatureNameOnShelf;
        break;
      }

      // optional string SignatureNameOnShelf = 6;
      case 6: {
        if (tag == 50) {
         parse_SignatureNameOnShelf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signaturenameonshelf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signaturenameonshelf().data(), this->signaturenameonshelf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signaturenameonshelf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.SignedContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.SignedContent)
  return false;
#undef DO_
}

void SignedContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.SignedContent)
  // optional bytes Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // optional bytes Signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  // optional string NameOnShelf = 4;
  if (has_nameonshelf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nameonshelf().data(), this->nameonshelf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nameonshelf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nameonshelf(), output);
  }

  // optional bool SignWithTestSignature = 5 [default = false];
  if (has_signwithtestsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->signwithtestsignature(), output);
  }

  // optional string SignatureNameOnShelf = 6;
  if (has_signaturenameonshelf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signaturenameonshelf().data(), this->signaturenameonshelf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signaturenameonshelf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->signaturenameonshelf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.SignedContent)
}

::google::protobuf::uint8* SignedContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.SignedContent)
  // optional bytes Content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // optional bytes Signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  // optional string NameOnShelf = 4;
  if (has_nameonshelf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nameonshelf().data(), this->nameonshelf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nameonshelf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nameonshelf(), target);
  }

  // optional bool SignWithTestSignature = 5 [default = false];
  if (has_signwithtestsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->signwithtestsignature(), target);
  }

  // optional string SignatureNameOnShelf = 6;
  if (has_signaturenameonshelf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signaturenameonshelf().data(), this->signaturenameonshelf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signaturenameonshelf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->signaturenameonshelf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.SignedContent)
  return target;
}

int SignedContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes Content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional bytes Signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional string NameOnShelf = 4;
    if (has_nameonshelf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nameonshelf());
    }

    // optional bool SignWithTestSignature = 5 [default = false];
    if (has_signwithtestsignature()) {
      total_size += 1 + 1;
    }

    // optional string SignatureNameOnShelf = 6;
    if (has_signaturenameonshelf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signaturenameonshelf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedContent::MergeFrom(const SignedContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_nameonshelf()) {
      set_nameonshelf(from.nameonshelf());
    }
    if (from.has_signwithtestsignature()) {
      set_signwithtestsignature(from.signwithtestsignature());
    }
    if (from.has_signaturenameonshelf()) {
      set_signaturenameonshelf(from.signaturenameonshelf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedContent::CopyFrom(const SignedContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedContent::IsInitialized() const {

  return true;
}

void SignedContent::Swap(SignedContent* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(signature_, other->signature_);
    std::swap(nameonshelf_, other->nameonshelf_);
    std::swap(signwithtestsignature_, other->signwithtestsignature_);
    std::swap(signaturenameonshelf_, other->signaturenameonshelf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignedContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedContent_descriptor_;
  metadata.reflection = SignedContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DraftToSend::kBoxIdFieldNumber;
const int DraftToSend::kDraftIdFieldNumber;
const int DraftToSend::kToBoxIdFieldNumber;
const int DraftToSend::kToDepartmentIdFieldNumber;
const int DraftToSend::kDocumentSignaturesFieldNumber;
const int DraftToSend::kProxyBoxIdFieldNumber;
const int DraftToSend::kProxyDepartmentIdFieldNumber;
#endif  // !_MSC_VER

DraftToSend::DraftToSend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.DraftToSend)
}

void DraftToSend::InitAsDefaultInstance() {
}

DraftToSend::DraftToSend(const DraftToSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.DraftToSend)
}

void DraftToSend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  draftid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  todepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxyboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxydepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DraftToSend::~DraftToSend() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.DraftToSend)
  SharedDtor();
}

void DraftToSend::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (draftid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete draftid_;
  }
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toboxid_;
  }
  if (todepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete todepartmentid_;
  }
  if (proxyboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyboxid_;
  }
  if (proxydepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxydepartmentid_;
  }
  if (this != default_instance_) {
  }
}

void DraftToSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DraftToSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DraftToSend_descriptor_;
}

const DraftToSend& DraftToSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

DraftToSend* DraftToSend::default_instance_ = NULL;

DraftToSend* DraftToSend::New() const {
  return new DraftToSend;
}

void DraftToSend::Clear() {
  if (_has_bits_[0 / 32] & 111) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxid_->clear();
      }
    }
    if (has_draftid()) {
      if (draftid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        draftid_->clear();
      }
    }
    if (has_toboxid()) {
      if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        toboxid_->clear();
      }
    }
    if (has_todepartmentid()) {
      if (todepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        todepartmentid_->clear();
      }
    }
    if (has_proxyboxid()) {
      if (proxyboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyboxid_->clear();
      }
    }
    if (has_proxydepartmentid()) {
      if (proxydepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxydepartmentid_->clear();
      }
    }
  }
  documentsignatures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DraftToSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.DraftToSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DraftId;
        break;
      }

      // required string DraftId = 2;
      case 2: {
        if (tag == 18) {
         parse_DraftId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_draftid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->draftid().data(), this->draftid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "draftid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ToBoxId;
        break;
      }

      // optional string ToBoxId = 3;
      case 3: {
        if (tag == 26) {
         parse_ToBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->toboxid().data(), this->toboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "toboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ToDepartmentId;
        break;
      }

      // optional string ToDepartmentId = 4;
      case 4: {
        if (tag == 34) {
         parse_ToDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->todepartmentid().data(), this->todepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "todepartmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DocumentSignatures;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.DocumentSenderSignature DocumentSignatures = 5;
      case 5: {
        if (tag == 42) {
         parse_DocumentSignatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documentsignatures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DocumentSignatures;
        if (input->ExpectTag(50)) goto parse_ProxyBoxId;
        break;
      }

      // optional string ProxyBoxId = 6;
      case 6: {
        if (tag == 50) {
         parse_ProxyBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyboxid().data(), this->proxyboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ProxyDepartmentId;
        break;
      }

      // optional string ProxyDepartmentId = 7;
      case 7: {
        if (tag == 58) {
         parse_ProxyDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxydepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxydepartmentid().data(), this->proxydepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxydepartmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.DraftToSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.DraftToSend)
  return false;
#undef DO_
}

void DraftToSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.DraftToSend)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->boxid(), output);
  }

  // required string DraftId = 2;
  if (has_draftid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->draftid().data(), this->draftid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draftid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->draftid(), output);
  }

  // optional string ToBoxId = 3;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->toboxid(), output);
  }

  // optional string ToDepartmentId = 4;
  if (has_todepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->todepartmentid().data(), this->todepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "todepartmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->todepartmentid(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSenderSignature DocumentSignatures = 5;
  for (int i = 0; i < this->documentsignatures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->documentsignatures(i), output);
  }

  // optional string ProxyBoxId = 6;
  if (has_proxyboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyboxid().data(), this->proxyboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->proxyboxid(), output);
  }

  // optional string ProxyDepartmentId = 7;
  if (has_proxydepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxydepartmentid().data(), this->proxydepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxydepartmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->proxydepartmentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.DraftToSend)
}

::google::protobuf::uint8* DraftToSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.DraftToSend)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // required string DraftId = 2;
  if (has_draftid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->draftid().data(), this->draftid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "draftid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->draftid(), target);
  }

  // optional string ToBoxId = 3;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->toboxid(), target);
  }

  // optional string ToDepartmentId = 4;
  if (has_todepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->todepartmentid().data(), this->todepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "todepartmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->todepartmentid(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSenderSignature DocumentSignatures = 5;
  for (int i = 0; i < this->documentsignatures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->documentsignatures(i), target);
  }

  // optional string ProxyBoxId = 6;
  if (has_proxyboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyboxid().data(), this->proxyboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->proxyboxid(), target);
  }

  // optional string ProxyDepartmentId = 7;
  if (has_proxydepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxydepartmentid().data(), this->proxydepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxydepartmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->proxydepartmentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.DraftToSend)
  return target;
}

int DraftToSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // required string DraftId = 2;
    if (has_draftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->draftid());
    }

    // optional string ToBoxId = 3;
    if (has_toboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toboxid());
    }

    // optional string ToDepartmentId = 4;
    if (has_todepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->todepartmentid());
    }

    // optional string ProxyBoxId = 6;
    if (has_proxyboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyboxid());
    }

    // optional string ProxyDepartmentId = 7;
    if (has_proxydepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxydepartmentid());
    }

  }
  // repeated .Diadoc.Api.Proto.Events.DocumentSenderSignature DocumentSignatures = 5;
  total_size += 1 * this->documentsignatures_size();
  for (int i = 0; i < this->documentsignatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documentsignatures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DraftToSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DraftToSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DraftToSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DraftToSend::MergeFrom(const DraftToSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  documentsignatures_.MergeFrom(from.documentsignatures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_draftid()) {
      set_draftid(from.draftid());
    }
    if (from.has_toboxid()) {
      set_toboxid(from.toboxid());
    }
    if (from.has_todepartmentid()) {
      set_todepartmentid(from.todepartmentid());
    }
    if (from.has_proxyboxid()) {
      set_proxyboxid(from.proxyboxid());
    }
    if (from.has_proxydepartmentid()) {
      set_proxydepartmentid(from.proxydepartmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DraftToSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DraftToSend::CopyFrom(const DraftToSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DraftToSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->documentsignatures())) return false;
  return true;
}

void DraftToSend::Swap(DraftToSend* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(draftid_, other->draftid_);
    std::swap(toboxid_, other->toboxid_);
    std::swap(todepartmentid_, other->todepartmentid_);
    documentsignatures_.Swap(&other->documentsignatures_);
    std::swap(proxyboxid_, other->proxyboxid_);
    std::swap(proxydepartmentid_, other->proxydepartmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DraftToSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DraftToSend_descriptor_;
  metadata.reflection = DraftToSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepareDocumentsToSignRequest::kBoxIdFieldNumber;
const int PrepareDocumentsToSignRequest::kDraftDocumentsFieldNumber;
const int PrepareDocumentsToSignRequest::kDocumentsFieldNumber;
const int PrepareDocumentsToSignRequest::kContentsFieldNumber;
#endif  // !_MSC_VER

PrepareDocumentsToSignRequest::PrepareDocumentsToSignRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest)
}

void PrepareDocumentsToSignRequest::InitAsDefaultInstance() {
}

PrepareDocumentsToSignRequest::PrepareDocumentsToSignRequest(const PrepareDocumentsToSignRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest)
}

void PrepareDocumentsToSignRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareDocumentsToSignRequest::~PrepareDocumentsToSignRequest() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest)
  SharedDtor();
}

void PrepareDocumentsToSignRequest::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (this != default_instance_) {
  }
}

void PrepareDocumentsToSignRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareDocumentsToSignRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareDocumentsToSignRequest_descriptor_;
}

const PrepareDocumentsToSignRequest& PrepareDocumentsToSignRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

PrepareDocumentsToSignRequest* PrepareDocumentsToSignRequest::default_instance_ = NULL;

PrepareDocumentsToSignRequest* PrepareDocumentsToSignRequest::New() const {
  return new PrepareDocumentsToSignRequest;
}

void PrepareDocumentsToSignRequest::Clear() {
  if (has_boxid()) {
    if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      boxid_->clear();
    }
  }
  draftdocuments_.Clear();
  documents_.Clear();
  contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepareDocumentsToSignRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DraftDocuments;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.DraftDocumentToPatch DraftDocuments = 2;
      case 2: {
        if (tag == 18) {
         parse_DraftDocuments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_draftdocuments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DraftDocuments;
        if (input->ExpectTag(26)) goto parse_Documents;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.DocumentToPatch Documents = 3;
      case 3: {
        if (tag == 26) {
         parse_Documents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Documents;
        if (input->ExpectTag(34)) goto parse_Contents;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.ContentToPatch Contents = 4;
      case 4: {
        if (tag == 34) {
         parse_Contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Contents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest)
  return false;
#undef DO_
}

void PrepareDocumentsToSignRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->boxid(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.DraftDocumentToPatch DraftDocuments = 2;
  for (int i = 0; i < this->draftdocuments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->draftdocuments(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentToPatch Documents = 3;
  for (int i = 0; i < this->documents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->documents(i), output);
  }

  // repeated .Diadoc.Api.Proto.Events.ContentToPatch Contents = 4;
  for (int i = 0; i < this->contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->contents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest)
}

::google::protobuf::uint8* PrepareDocumentsToSignRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.DraftDocumentToPatch DraftDocuments = 2;
  for (int i = 0; i < this->draftdocuments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->draftdocuments(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentToPatch Documents = 3;
  for (int i = 0; i < this->documents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->documents(i), target);
  }

  // repeated .Diadoc.Api.Proto.Events.ContentToPatch Contents = 4;
  for (int i = 0; i < this->contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->contents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.PrepareDocumentsToSignRequest)
  return target;
}

int PrepareDocumentsToSignRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

  }
  // repeated .Diadoc.Api.Proto.Events.DraftDocumentToPatch DraftDocuments = 2;
  total_size += 1 * this->draftdocuments_size();
  for (int i = 0; i < this->draftdocuments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->draftdocuments(i));
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentToPatch Documents = 3;
  total_size += 1 * this->documents_size();
  for (int i = 0; i < this->documents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documents(i));
  }

  // repeated .Diadoc.Api.Proto.Events.ContentToPatch Contents = 4;
  total_size += 1 * this->contents_size();
  for (int i = 0; i < this->contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareDocumentsToSignRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepareDocumentsToSignRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareDocumentsToSignRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareDocumentsToSignRequest::MergeFrom(const PrepareDocumentsToSignRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  draftdocuments_.MergeFrom(from.draftdocuments_);
  documents_.MergeFrom(from.documents_);
  contents_.MergeFrom(from.contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepareDocumentsToSignRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareDocumentsToSignRequest::CopyFrom(const PrepareDocumentsToSignRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareDocumentsToSignRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->draftdocuments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->contents())) return false;
  return true;
}

void PrepareDocumentsToSignRequest::Swap(PrepareDocumentsToSignRequest* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    draftdocuments_.Swap(&other->draftdocuments_);
    documents_.Swap(&other->documents_);
    contents_.Swap(&other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepareDocumentsToSignRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareDocumentsToSignRequest_descriptor_;
  metadata.reflection = PrepareDocumentsToSignRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DraftDocumentToPatch::kDocumentIdFieldNumber;
const int DraftDocumentToPatch::kToBoxIdFieldNumber;
const int DraftDocumentToPatch::kSignerFieldNumber;
const int DraftDocumentToPatch::kExtendedSignerFieldNumber;
#endif  // !_MSC_VER

DraftDocumentToPatch::DraftDocumentToPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.DraftDocumentToPatch)
}

void DraftDocumentToPatch::InitAsDefaultInstance() {
  documentid_ = const_cast< ::Diadoc::Api::Proto::DocumentId*>(&::Diadoc::Api::Proto::DocumentId::default_instance());
  signer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Signer*>(&::Diadoc::Api::Proto::Invoicing::Signer::default_instance());
}

DraftDocumentToPatch::DraftDocumentToPatch(const DraftDocumentToPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.DraftDocumentToPatch)
}

void DraftDocumentToPatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentid_ = NULL;
  toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DraftDocumentToPatch::~DraftDocumentToPatch() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.DraftDocumentToPatch)
  SharedDtor();
}

void DraftDocumentToPatch::SharedDtor() {
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toboxid_;
  }
  if (this != default_instance_) {
    delete documentid_;
    delete signer_;
  }
}

void DraftDocumentToPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DraftDocumentToPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DraftDocumentToPatch_descriptor_;
}

const DraftDocumentToPatch& DraftDocumentToPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

DraftDocumentToPatch* DraftDocumentToPatch::default_instance_ = NULL;

DraftDocumentToPatch* DraftDocumentToPatch::New() const {
  return new DraftDocumentToPatch;
}

void DraftDocumentToPatch::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_documentid()) {
      if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
    }
    if (has_toboxid()) {
      if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        toboxid_->clear();
      }
    }
    if (has_signer()) {
      if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
    }
  }
  extendedsigner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DraftDocumentToPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.DraftDocumentToPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ToBoxId;
        break;
      }

      // optional string ToBoxId = 2;
      case 2: {
        if (tag == 18) {
         parse_ToBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->toboxid().data(), this->toboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "toboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Signer;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 3;
      case 3: {
        if (tag == 26) {
         parse_Signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ExtendedSigner;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 4;
      case 4: {
        if (tag == 34) {
         parse_ExtendedSigner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extendedsigner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ExtendedSigner;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.DraftDocumentToPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.DraftDocumentToPatch)
  return false;
#undef DO_
}

void DraftDocumentToPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.DraftDocumentToPatch)
  // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documentid(), output);
  }

  // optional string ToBoxId = 2;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->toboxid(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 3;
  if (has_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signer(), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 4;
  for (int i = 0; i < this->extendedsigner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->extendedsigner(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.DraftDocumentToPatch)
}

::google::protobuf::uint8* DraftDocumentToPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.DraftDocumentToPatch)
  // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  if (has_documentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documentid(), target);
  }

  // optional string ToBoxId = 2;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->toboxid(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 3;
  if (has_signer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signer(), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 4;
  for (int i = 0; i < this->extendedsigner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->extendedsigner(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.DraftDocumentToPatch)
  return target;
}

int DraftDocumentToPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
    if (has_documentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentid());
    }

    // optional string ToBoxId = 2;
    if (has_toboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toboxid());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 3;
    if (has_signer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signer());
    }

  }
  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 4;
  total_size += 1 * this->extendedsigner_size();
  for (int i = 0; i < this->extendedsigner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extendedsigner(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DraftDocumentToPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DraftDocumentToPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DraftDocumentToPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DraftDocumentToPatch::MergeFrom(const DraftDocumentToPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  extendedsigner_.MergeFrom(from.extendedsigner_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentid()) {
      mutable_documentid()->::Diadoc::Api::Proto::DocumentId::MergeFrom(from.documentid());
    }
    if (from.has_toboxid()) {
      set_toboxid(from.toboxid());
    }
    if (from.has_signer()) {
      mutable_signer()->::Diadoc::Api::Proto::Invoicing::Signer::MergeFrom(from.signer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DraftDocumentToPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DraftDocumentToPatch::CopyFrom(const DraftDocumentToPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DraftDocumentToPatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_documentid()) {
    if (!this->documentid().IsInitialized()) return false;
  }
  if (has_signer()) {
    if (!this->signer().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->extendedsigner())) return false;
  return true;
}

void DraftDocumentToPatch::Swap(DraftDocumentToPatch* other) {
  if (other != this) {
    std::swap(documentid_, other->documentid_);
    std::swap(toboxid_, other->toboxid_);
    std::swap(signer_, other->signer_);
    extendedsigner_.Swap(&other->extendedsigner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DraftDocumentToPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DraftDocumentToPatch_descriptor_;
  metadata.reflection = DraftDocumentToPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContentToPatch::kTypeNamedIdFieldNumber;
const int ContentToPatch::kFunctionFieldNumber;
const int ContentToPatch::kVersionFieldNumber;
const int ContentToPatch::kContentFieldNumber;
const int ContentToPatch::kToBoxIdFieldNumber;
const int ContentToPatch::kSignerFieldNumber;
const int ContentToPatch::kExtendedSignerFieldNumber;
#endif  // !_MSC_VER

ContentToPatch::ContentToPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ContentToPatch)
}

void ContentToPatch::InitAsDefaultInstance() {
  content_ = const_cast< ::Diadoc::Api::Proto::Events::UnsignedContent*>(&::Diadoc::Api::Proto::Events::UnsignedContent::default_instance());
  signer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Signer*>(&::Diadoc::Api::Proto::Invoicing::Signer::default_instance());
}

ContentToPatch::ContentToPatch(const ContentToPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ContentToPatch)
}

void ContentToPatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = NULL;
  toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentToPatch::~ContentToPatch() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ContentToPatch)
  SharedDtor();
}

void ContentToPatch::SharedDtor() {
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typenamedid_;
  }
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toboxid_;
  }
  if (this != default_instance_) {
    delete content_;
    delete signer_;
  }
}

void ContentToPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentToPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentToPatch_descriptor_;
}

const ContentToPatch& ContentToPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

ContentToPatch* ContentToPatch::default_instance_ = NULL;

ContentToPatch* ContentToPatch::New() const {
  return new ContentToPatch;
}

void ContentToPatch::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_typenamedid()) {
      if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        typenamedid_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_content()) {
      if (content_ != NULL) content_->::Diadoc::Api::Proto::Events::UnsignedContent::Clear();
    }
    if (has_toboxid()) {
      if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        toboxid_->clear();
      }
    }
    if (has_signer()) {
      if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
    }
  }
  extendedsigner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContentToPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ContentToPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string TypeNamedId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typenamedid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->typenamedid().data(), this->typenamedid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "typenamedid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Function;
        break;
      }

      // required string Function = 2;
      case 2: {
        if (tag == 18) {
         parse_Function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "function");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Version;
        break;
      }

      // required string Version = 3;
      case 3: {
        if (tag == 26) {
         parse_Version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Content;
        break;
      }

      // required .Diadoc.Api.Proto.Events.UnsignedContent Content = 4;
      case 4: {
        if (tag == 34) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ToBoxId;
        break;
      }

      // optional string ToBoxId = 5;
      case 5: {
        if (tag == 42) {
         parse_ToBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->toboxid().data(), this->toboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "toboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Signer;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 6;
      case 6: {
        if (tag == 50) {
         parse_Signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ExtendedSigner;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 7;
      case 7: {
        if (tag == 58) {
         parse_ExtendedSigner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extendedsigner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ExtendedSigner;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ContentToPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ContentToPatch)
  return false;
#undef DO_
}

void ContentToPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ContentToPatch)
  // required string TypeNamedId = 1;
  if (has_typenamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typenamedid().data(), this->typenamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typenamedid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->typenamedid(), output);
  }

  // required string Function = 2;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->function(), output);
  }

  // required string Version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // required .Diadoc.Api.Proto.Events.UnsignedContent Content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->content(), output);
  }

  // optional string ToBoxId = 5;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->toboxid(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 6;
  if (has_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->signer(), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 7;
  for (int i = 0; i < this->extendedsigner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->extendedsigner(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ContentToPatch)
}

::google::protobuf::uint8* ContentToPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ContentToPatch)
  // required string TypeNamedId = 1;
  if (has_typenamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typenamedid().data(), this->typenamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typenamedid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->typenamedid(), target);
  }

  // required string Function = 2;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->function(), target);
  }

  // required string Version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // required .Diadoc.Api.Proto.Events.UnsignedContent Content = 4;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->content(), target);
  }

  // optional string ToBoxId = 5;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->toboxid(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 6;
  if (has_signer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->signer(), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 7;
  for (int i = 0; i < this->extendedsigner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->extendedsigner(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ContentToPatch)
  return target;
}

int ContentToPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string TypeNamedId = 1;
    if (has_typenamedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typenamedid());
    }

    // required string Function = 2;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }

    // required string Version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required .Diadoc.Api.Proto.Events.UnsignedContent Content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional string ToBoxId = 5;
    if (has_toboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toboxid());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 6;
    if (has_signer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signer());
    }

  }
  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 7;
  total_size += 1 * this->extendedsigner_size();
  for (int i = 0; i < this->extendedsigner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extendedsigner(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentToPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContentToPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentToPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentToPatch::MergeFrom(const ContentToPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  extendedsigner_.MergeFrom(from.extendedsigner_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typenamedid()) {
      set_typenamedid(from.typenamedid());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_content()) {
      mutable_content()->::Diadoc::Api::Proto::Events::UnsignedContent::MergeFrom(from.content());
    }
    if (from.has_toboxid()) {
      set_toboxid(from.toboxid());
    }
    if (from.has_signer()) {
      mutable_signer()->::Diadoc::Api::Proto::Invoicing::Signer::MergeFrom(from.signer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContentToPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentToPatch::CopyFrom(const ContentToPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentToPatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_signer()) {
    if (!this->signer().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->extendedsigner())) return false;
  return true;
}

void ContentToPatch::Swap(ContentToPatch* other) {
  if (other != this) {
    std::swap(typenamedid_, other->typenamedid_);
    std::swap(function_, other->function_);
    std::swap(version_, other->version_);
    std::swap(content_, other->content_);
    std::swap(toboxid_, other->toboxid_);
    std::swap(signer_, other->signer_);
    extendedsigner_.Swap(&other->extendedsigner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContentToPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentToPatch_descriptor_;
  metadata.reflection = ContentToPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentToPatch::kDocumentIdFieldNumber;
const int DocumentToPatch::kSignerFieldNumber;
const int DocumentToPatch::kExtendedSignerFieldNumber;
#endif  // !_MSC_VER

DocumentToPatch::DocumentToPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.DocumentToPatch)
}

void DocumentToPatch::InitAsDefaultInstance() {
  documentid_ = const_cast< ::Diadoc::Api::Proto::DocumentId*>(&::Diadoc::Api::Proto::DocumentId::default_instance());
  signer_ = const_cast< ::Diadoc::Api::Proto::Invoicing::Signer*>(&::Diadoc::Api::Proto::Invoicing::Signer::default_instance());
}

DocumentToPatch::DocumentToPatch(const DocumentToPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.DocumentToPatch)
}

void DocumentToPatch::SharedCtor() {
  _cached_size_ = 0;
  documentid_ = NULL;
  signer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentToPatch::~DocumentToPatch() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.DocumentToPatch)
  SharedDtor();
}

void DocumentToPatch::SharedDtor() {
  if (this != default_instance_) {
    delete documentid_;
    delete signer_;
  }
}

void DocumentToPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentToPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentToPatch_descriptor_;
}

const DocumentToPatch& DocumentToPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

DocumentToPatch* DocumentToPatch::default_instance_ = NULL;

DocumentToPatch* DocumentToPatch::New() const {
  return new DocumentToPatch;
}

void DocumentToPatch::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_documentid()) {
      if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
    }
    if (has_signer()) {
      if (signer_ != NULL) signer_->::Diadoc::Api::Proto::Invoicing::Signer::Clear();
    }
  }
  extendedsigner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentToPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.DocumentToPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Signer;
        break;
      }

      // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 2;
      case 2: {
        if (tag == 18) {
         parse_Signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ExtendedSigner;
        break;
      }

      // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 3;
      case 3: {
        if (tag == 26) {
         parse_ExtendedSigner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extendedsigner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ExtendedSigner;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.DocumentToPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.DocumentToPatch)
  return false;
#undef DO_
}

void DocumentToPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.DocumentToPatch)
  // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documentid(), output);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 2;
  if (has_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signer(), output);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 3;
  for (int i = 0; i < this->extendedsigner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->extendedsigner(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.DocumentToPatch)
}

::google::protobuf::uint8* DocumentToPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.DocumentToPatch)
  // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  if (has_documentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documentid(), target);
  }

  // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 2;
  if (has_signer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signer(), target);
  }

  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 3;
  for (int i = 0; i < this->extendedsigner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->extendedsigner(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.DocumentToPatch)
  return target;
}

int DocumentToPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
    if (has_documentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentid());
    }

    // optional .Diadoc.Api.Proto.Invoicing.Signer Signer = 2;
    if (has_signer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signer());
    }

  }
  // repeated .Diadoc.Api.Proto.Invoicing.Signers.ExtendedSigner ExtendedSigner = 3;
  total_size += 1 * this->extendedsigner_size();
  for (int i = 0; i < this->extendedsigner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extendedsigner(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentToPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentToPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentToPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentToPatch::MergeFrom(const DocumentToPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  extendedsigner_.MergeFrom(from.extendedsigner_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentid()) {
      mutable_documentid()->::Diadoc::Api::Proto::DocumentId::MergeFrom(from.documentid());
    }
    if (from.has_signer()) {
      mutable_signer()->::Diadoc::Api::Proto::Invoicing::Signer::MergeFrom(from.signer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentToPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentToPatch::CopyFrom(const DocumentToPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentToPatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_documentid()) {
    if (!this->documentid().IsInitialized()) return false;
  }
  if (has_signer()) {
    if (!this->signer().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->extendedsigner())) return false;
  return true;
}

void DocumentToPatch::Swap(DocumentToPatch* other) {
  if (other != this) {
    std::swap(documentid_, other->documentid_);
    std::swap(signer_, other->signer_);
    extendedsigner_.Swap(&other->extendedsigner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentToPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentToPatch_descriptor_;
  metadata.reflection = DocumentToPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentPatchedContent::kDocumentIdFieldNumber;
const int DocumentPatchedContent::kPatchedContentIdFieldNumber;
const int DocumentPatchedContent::kContentFieldNumber;
#endif  // !_MSC_VER

DocumentPatchedContent::DocumentPatchedContent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.DocumentPatchedContent)
}

void DocumentPatchedContent::InitAsDefaultInstance() {
  documentid_ = const_cast< ::Diadoc::Api::Proto::DocumentId*>(&::Diadoc::Api::Proto::DocumentId::default_instance());
}

DocumentPatchedContent::DocumentPatchedContent(const DocumentPatchedContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.DocumentPatchedContent)
}

void DocumentPatchedContent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentid_ = NULL;
  patchedcontentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentPatchedContent::~DocumentPatchedContent() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.DocumentPatchedContent)
  SharedDtor();
}

void DocumentPatchedContent::SharedDtor() {
  if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete patchedcontentid_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete documentid_;
  }
}

void DocumentPatchedContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentPatchedContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentPatchedContent_descriptor_;
}

const DocumentPatchedContent& DocumentPatchedContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

DocumentPatchedContent* DocumentPatchedContent::default_instance_ = NULL;

DocumentPatchedContent* DocumentPatchedContent::New() const {
  return new DocumentPatchedContent;
}

void DocumentPatchedContent::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_documentid()) {
      if (documentid_ != NULL) documentid_->::Diadoc::Api::Proto::DocumentId::Clear();
    }
    if (has_patchedcontentid()) {
      if (patchedcontentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        patchedcontentid_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentPatchedContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.DocumentPatchedContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_documentid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PatchedContentId;
        break;
      }

      // required string PatchedContentId = 2;
      case 2: {
        if (tag == 18) {
         parse_PatchedContentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patchedcontentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patchedcontentid().data(), this->patchedcontentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "patchedcontentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Content;
        break;
      }

      // optional bytes Content = 3;
      case 3: {
        if (tag == 26) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.DocumentPatchedContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.DocumentPatchedContent)
  return false;
#undef DO_
}

void DocumentPatchedContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.DocumentPatchedContent)
  // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documentid(), output);
  }

  // required string PatchedContentId = 2;
  if (has_patchedcontentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patchedcontentid().data(), this->patchedcontentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patchedcontentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->patchedcontentid(), output);
  }

  // optional bytes Content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.DocumentPatchedContent)
}

::google::protobuf::uint8* DocumentPatchedContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.DocumentPatchedContent)
  // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
  if (has_documentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documentid(), target);
  }

  // required string PatchedContentId = 2;
  if (has_patchedcontentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patchedcontentid().data(), this->patchedcontentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "patchedcontentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->patchedcontentid(), target);
  }

  // optional bytes Content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.DocumentPatchedContent)
  return target;
}

int DocumentPatchedContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.DocumentId DocumentId = 1;
    if (has_documentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documentid());
    }

    // required string PatchedContentId = 2;
    if (has_patchedcontentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patchedcontentid());
    }

    // optional bytes Content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentPatchedContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentPatchedContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentPatchedContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentPatchedContent::MergeFrom(const DocumentPatchedContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentid()) {
      mutable_documentid()->::Diadoc::Api::Proto::DocumentId::MergeFrom(from.documentid());
    }
    if (from.has_patchedcontentid()) {
      set_patchedcontentid(from.patchedcontentid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentPatchedContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentPatchedContent::CopyFrom(const DocumentPatchedContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentPatchedContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_documentid()) {
    if (!this->documentid().IsInitialized()) return false;
  }
  return true;
}

void DocumentPatchedContent::Swap(DocumentPatchedContent* other) {
  if (other != this) {
    std::swap(documentid_, other->documentid_);
    std::swap(patchedcontentid_, other->patchedcontentid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentPatchedContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentPatchedContent_descriptor_;
  metadata.reflection = DocumentPatchedContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepareDocumentsToSignResponse::kDocumentPatchedContentsFieldNumber;
#endif  // !_MSC_VER

PrepareDocumentsToSignResponse::PrepareDocumentsToSignResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse)
}

void PrepareDocumentsToSignResponse::InitAsDefaultInstance() {
}

PrepareDocumentsToSignResponse::PrepareDocumentsToSignResponse(const PrepareDocumentsToSignResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse)
}

void PrepareDocumentsToSignResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareDocumentsToSignResponse::~PrepareDocumentsToSignResponse() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse)
  SharedDtor();
}

void PrepareDocumentsToSignResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrepareDocumentsToSignResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareDocumentsToSignResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareDocumentsToSignResponse_descriptor_;
}

const PrepareDocumentsToSignResponse& PrepareDocumentsToSignResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

PrepareDocumentsToSignResponse* PrepareDocumentsToSignResponse::default_instance_ = NULL;

PrepareDocumentsToSignResponse* PrepareDocumentsToSignResponse::New() const {
  return new PrepareDocumentsToSignResponse;
}

void PrepareDocumentsToSignResponse::Clear() {
  documentpatchedcontents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepareDocumentsToSignResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Diadoc.Api.Proto.Events.DocumentPatchedContent DocumentPatchedContents = 1;
      case 1: {
        if (tag == 10) {
         parse_DocumentPatchedContents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documentpatchedcontents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DocumentPatchedContents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse)
  return false;
#undef DO_
}

void PrepareDocumentsToSignResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse)
  // repeated .Diadoc.Api.Proto.Events.DocumentPatchedContent DocumentPatchedContents = 1;
  for (int i = 0; i < this->documentpatchedcontents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documentpatchedcontents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse)
}

::google::protobuf::uint8* PrepareDocumentsToSignResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse)
  // repeated .Diadoc.Api.Proto.Events.DocumentPatchedContent DocumentPatchedContents = 1;
  for (int i = 0; i < this->documentpatchedcontents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->documentpatchedcontents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.PrepareDocumentsToSignResponse)
  return target;
}

int PrepareDocumentsToSignResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Diadoc.Api.Proto.Events.DocumentPatchedContent DocumentPatchedContents = 1;
  total_size += 1 * this->documentpatchedcontents_size();
  for (int i = 0; i < this->documentpatchedcontents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documentpatchedcontents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareDocumentsToSignResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepareDocumentsToSignResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareDocumentsToSignResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareDocumentsToSignResponse::MergeFrom(const PrepareDocumentsToSignResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  documentpatchedcontents_.MergeFrom(from.documentpatchedcontents_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepareDocumentsToSignResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareDocumentsToSignResponse::CopyFrom(const PrepareDocumentsToSignResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareDocumentsToSignResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->documentpatchedcontents())) return false;
  return true;
}

void PrepareDocumentsToSignResponse::Swap(PrepareDocumentsToSignResponse* other) {
  if (other != this) {
    documentpatchedcontents_.Swap(&other->documentpatchedcontents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepareDocumentsToSignResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareDocumentsToSignResponse_descriptor_;
  metadata.reflection = PrepareDocumentsToSignResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageToSend::kBoxIdFieldNumber;
const int MessageToSend::kMessageIdFieldNumber;
const int MessageToSend::kDocumentSignaturesFieldNumber;
#endif  // !_MSC_VER

MessageToSend::MessageToSend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.MessageToSend)
}

void MessageToSend::InitAsDefaultInstance() {
}

MessageToSend::MessageToSend(const MessageToSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.MessageToSend)
}

void MessageToSend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageToSend::~MessageToSend() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.MessageToSend)
  SharedDtor();
}

void MessageToSend::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messageid_;
  }
  if (this != default_instance_) {
  }
}

void MessageToSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageToSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageToSend_descriptor_;
}

const MessageToSend& MessageToSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

MessageToSend* MessageToSend::default_instance_ = NULL;

MessageToSend* MessageToSend::New() const {
  return new MessageToSend;
}

void MessageToSend::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxid_->clear();
      }
    }
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messageid_->clear();
      }
    }
  }
  documentsignatures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageToSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.MessageToSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MessageId;
        break;
      }

      // required string MessageId = 2;
      case 2: {
        if (tag == 18) {
         parse_MessageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messageid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DocumentSignatures;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 3;
      case 3: {
        if (tag == 26) {
         parse_DocumentSignatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documentsignatures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DocumentSignatures;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.MessageToSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.MessageToSend)
  return false;
#undef DO_
}

void MessageToSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.MessageToSend)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->boxid(), output);
  }

  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messageid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->messageid(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 3;
  for (int i = 0; i < this->documentsignatures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->documentsignatures(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.MessageToSend)
}

::google::protobuf::uint8* MessageToSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.MessageToSend)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messageid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messageid(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 3;
  for (int i = 0; i < this->documentsignatures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->documentsignatures(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.MessageToSend)
  return target;
}

int MessageToSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // required string MessageId = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }

  }
  // repeated .Diadoc.Api.Proto.Events.DocumentSignature DocumentSignatures = 3;
  total_size += 1 * this->documentsignatures_size();
  for (int i = 0; i < this->documentsignatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documentsignatures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageToSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageToSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageToSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageToSend::MergeFrom(const MessageToSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  documentsignatures_.MergeFrom(from.documentsignatures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageToSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageToSend::CopyFrom(const MessageToSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageToSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->documentsignatures())) return false;
  return true;
}

void MessageToSend::Swap(MessageToSend* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(messageid_, other->messageid_);
    documentsignatures_.Swap(&other->documentsignatures_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageToSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageToSend_descriptor_;
  metadata.reflection = MessageToSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RevocationRequestAttachment::kParentEntityIdFieldNumber;
const int RevocationRequestAttachment::kSignedContentFieldNumber;
const int RevocationRequestAttachment::kLabelsFieldNumber;
#endif  // !_MSC_VER

RevocationRequestAttachment::RevocationRequestAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.RevocationRequestAttachment)
}

void RevocationRequestAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

RevocationRequestAttachment::RevocationRequestAttachment(const RevocationRequestAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.RevocationRequestAttachment)
}

void RevocationRequestAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signedcontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RevocationRequestAttachment::~RevocationRequestAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.RevocationRequestAttachment)
  SharedDtor();
}

void RevocationRequestAttachment::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void RevocationRequestAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevocationRequestAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RevocationRequestAttachment_descriptor_;
}

const RevocationRequestAttachment& RevocationRequestAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

RevocationRequestAttachment* RevocationRequestAttachment::default_instance_ = NULL;

RevocationRequestAttachment* RevocationRequestAttachment::New() const {
  return new RevocationRequestAttachment;
}

void RevocationRequestAttachment::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parententityid_->clear();
      }
    }
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RevocationRequestAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.RevocationRequestAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parententityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SignedContent;
        break;
      }

      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
      case 2: {
        if (tag == 18) {
         parse_SignedContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 3;
      case 3: {
        if (tag == 26) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.RevocationRequestAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.RevocationRequestAttachment)
  return false;
#undef DO_
}

void RevocationRequestAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.RevocationRequestAttachment)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parententityid(), output);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signedcontent(), output);
  }

  // repeated string Labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.RevocationRequestAttachment)
}

::google::protobuf::uint8* RevocationRequestAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.RevocationRequestAttachment)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signedcontent(), target);
  }

  // repeated string Labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.RevocationRequestAttachment)
  return target;
}

int RevocationRequestAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

  }
  // repeated string Labels = 3;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevocationRequestAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RevocationRequestAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RevocationRequestAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RevocationRequestAttachment::MergeFrom(const RevocationRequestAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RevocationRequestAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevocationRequestAttachment::CopyFrom(const RevocationRequestAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevocationRequestAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RevocationRequestAttachment::Swap(RevocationRequestAttachment* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signedcontent_, other->signedcontent_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RevocationRequestAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RevocationRequestAttachment_descriptor_;
  metadata.reflection = RevocationRequestAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XmlSignatureRejectionAttachment::kParentEntityIdFieldNumber;
const int XmlSignatureRejectionAttachment::kSignedContentFieldNumber;
const int XmlSignatureRejectionAttachment::kLabelsFieldNumber;
#endif  // !_MSC_VER

XmlSignatureRejectionAttachment::XmlSignatureRejectionAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment)
}

void XmlSignatureRejectionAttachment::InitAsDefaultInstance() {
  signedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::SignedContent*>(&::Diadoc::Api::Proto::Events::SignedContent::default_instance());
}

XmlSignatureRejectionAttachment::XmlSignatureRejectionAttachment(const XmlSignatureRejectionAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment)
}

void XmlSignatureRejectionAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signedcontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XmlSignatureRejectionAttachment::~XmlSignatureRejectionAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment)
  SharedDtor();
}

void XmlSignatureRejectionAttachment::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (this != default_instance_) {
    delete signedcontent_;
  }
}

void XmlSignatureRejectionAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmlSignatureRejectionAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XmlSignatureRejectionAttachment_descriptor_;
}

const XmlSignatureRejectionAttachment& XmlSignatureRejectionAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

XmlSignatureRejectionAttachment* XmlSignatureRejectionAttachment::default_instance_ = NULL;

XmlSignatureRejectionAttachment* XmlSignatureRejectionAttachment::New() const {
  return new XmlSignatureRejectionAttachment;
}

void XmlSignatureRejectionAttachment::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parententityid_->clear();
      }
    }
    if (has_signedcontent()) {
      if (signedcontent_ != NULL) signedcontent_->::Diadoc::Api::Proto::Events::SignedContent::Clear();
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XmlSignatureRejectionAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parententityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SignedContent;
        break;
      }

      // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
      case 2: {
        if (tag == 18) {
         parse_SignedContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 3;
      case 3: {
        if (tag == 26) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment)
  return false;
#undef DO_
}

void XmlSignatureRejectionAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parententityid(), output);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signedcontent(), output);
  }

  // repeated string Labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment)
}

::google::protobuf::uint8* XmlSignatureRejectionAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
  if (has_signedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signedcontent(), target);
  }

  // repeated string Labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.XmlSignatureRejectionAttachment)
  return target;
}

int XmlSignatureRejectionAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required .Diadoc.Api.Proto.Events.SignedContent SignedContent = 2;
    if (has_signedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedcontent());
    }

  }
  // repeated string Labels = 3;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmlSignatureRejectionAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XmlSignatureRejectionAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XmlSignatureRejectionAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XmlSignatureRejectionAttachment::MergeFrom(const XmlSignatureRejectionAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_signedcontent()) {
      mutable_signedcontent()->::Diadoc::Api::Proto::Events::SignedContent::MergeFrom(from.signedcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XmlSignatureRejectionAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmlSignatureRejectionAttachment::CopyFrom(const XmlSignatureRejectionAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlSignatureRejectionAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void XmlSignatureRejectionAttachment::Swap(XmlSignatureRejectionAttachment* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(signedcontent_, other->signedcontent_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XmlSignatureRejectionAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XmlSignatureRejectionAttachment_descriptor_;
  metadata.reflection = XmlSignatureRejectionAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoamingNotificationToPost::kBoxIdFieldNumber;
const int RoamingNotificationToPost::kEventIdFieldNumber;
const int RoamingNotificationToPost::kSuccessFieldNumber;
const int RoamingNotificationToPost::kDescriptionFieldNumber;
#endif  // !_MSC_VER

RoamingNotificationToPost::RoamingNotificationToPost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.RoamingNotificationToPost)
}

void RoamingNotificationToPost::InitAsDefaultInstance() {
}

RoamingNotificationToPost::RoamingNotificationToPost(const RoamingNotificationToPost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.RoamingNotificationToPost)
}

void RoamingNotificationToPost::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoamingNotificationToPost::~RoamingNotificationToPost() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.RoamingNotificationToPost)
  SharedDtor();
}

void RoamingNotificationToPost::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (eventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eventid_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void RoamingNotificationToPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoamingNotificationToPost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoamingNotificationToPost_descriptor_;
}

const RoamingNotificationToPost& RoamingNotificationToPost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

RoamingNotificationToPost* RoamingNotificationToPost::default_instance_ = NULL;

RoamingNotificationToPost* RoamingNotificationToPost::New() const {
  return new RoamingNotificationToPost;
}

void RoamingNotificationToPost::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxid_->clear();
      }
    }
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        eventid_->clear();
      }
    }
    success_ = false;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoamingNotificationToPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.RoamingNotificationToPost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EventId;
        break;
      }

      // required string EventId = 2;
      case 2: {
        if (tag == 18) {
         parse_EventId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "eventid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Success;
        break;
      }

      // required bool Success = 3;
      case 3: {
        if (tag == 24) {
         parse_Success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Description;
        break;
      }

      // optional string Description = 4;
      case 4: {
        if (tag == 34) {
         parse_Description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.RoamingNotificationToPost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.RoamingNotificationToPost)
  return false;
#undef DO_
}

void RoamingNotificationToPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.RoamingNotificationToPost)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->boxid(), output);
  }

  // required string EventId = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eventid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->eventid(), output);
  }

  // required bool Success = 3;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // optional string Description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.RoamingNotificationToPost)
}

::google::protobuf::uint8* RoamingNotificationToPost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.RoamingNotificationToPost)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // required string EventId = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eventid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->eventid(), target);
  }

  // required bool Success = 3;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  // optional string Description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.RoamingNotificationToPost)
  return target;
}

int RoamingNotificationToPost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // required string EventId = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }

    // required bool Success = 3;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string Description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoamingNotificationToPost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoamingNotificationToPost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoamingNotificationToPost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoamingNotificationToPost::MergeFrom(const RoamingNotificationToPost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoamingNotificationToPost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoamingNotificationToPost::CopyFrom(const RoamingNotificationToPost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoamingNotificationToPost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoamingNotificationToPost::Swap(RoamingNotificationToPost* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(eventid_, other->eventid_);
    std::swap(success_, other->success_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoamingNotificationToPost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoamingNotificationToPost_descriptor_;
  metadata.reflection = RoamingNotificationToPost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CustomDataPatch::kParentEntityIdFieldNumber;
const int CustomDataPatch::kOperationFieldNumber;
const int CustomDataPatch::kKeyFieldNumber;
const int CustomDataPatch::kValueFieldNumber;
#endif  // !_MSC_VER

CustomDataPatch::CustomDataPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.CustomDataPatch)
}

void CustomDataPatch::InitAsDefaultInstance() {
}

CustomDataPatch::CustomDataPatch(const CustomDataPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.CustomDataPatch)
}

void CustomDataPatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomDataPatch::~CustomDataPatch() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.CustomDataPatch)
  SharedDtor();
}

void CustomDataPatch::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CustomDataPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomDataPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomDataPatch_descriptor_;
}

const CustomDataPatch& CustomDataPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

CustomDataPatch* CustomDataPatch::default_instance_ = NULL;

CustomDataPatch* CustomDataPatch::New() const {
  return new CustomDataPatch;
}

void CustomDataPatch::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parententityid_->clear();
      }
    }
    operation_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustomDataPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.CustomDataPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parententityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Operation;
        break;
      }

      // required .Diadoc.Api.Proto.Events.CustomDataPatchOperation Operation = 2;
      case 2: {
        if (tag == 16) {
         parse_Operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Diadoc::Api::Proto::Events::CustomDataPatchOperation_IsValid(value)) {
            set_operation(static_cast< ::Diadoc::Api::Proto::Events::CustomDataPatchOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Key;
        break;
      }

      // required string Key = 3;
      case 3: {
        if (tag == 26) {
         parse_Key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Value;
        break;
      }

      // optional string Value = 4;
      case 4: {
        if (tag == 34) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.CustomDataPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.CustomDataPatch)
  return false;
#undef DO_
}

void CustomDataPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.CustomDataPatch)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parententityid(), output);
  }

  // required .Diadoc.Api.Proto.Events.CustomDataPatchOperation Operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }

  // required string Key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // optional string Value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.CustomDataPatch)
}

::google::protobuf::uint8* CustomDataPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.CustomDataPatch)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // required .Diadoc.Api.Proto.Events.CustomDataPatchOperation Operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operation(), target);
  }

  // required string Key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional string Value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.CustomDataPatch)
  return target;
}

int CustomDataPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required .Diadoc.Api.Proto.Events.CustomDataPatchOperation Operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }

    // required string Key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string Value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomDataPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CustomDataPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CustomDataPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CustomDataPatch::MergeFrom(const CustomDataPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustomDataPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomDataPatch::CopyFrom(const CustomDataPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomDataPatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CustomDataPatch::Swap(CustomDataPatch* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(operation_, other->operation_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CustomDataPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CustomDataPatch_descriptor_;
  metadata.reflection = CustomDataPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EditDocumentPacketCommand::kDocumentIdFieldNumber;
const int EditDocumentPacketCommand::kAddDocumentsToPacketFieldNumber;
const int EditDocumentPacketCommand::kRemoveDocumentsFromPacketFieldNumber;
#endif  // !_MSC_VER

EditDocumentPacketCommand::EditDocumentPacketCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.EditDocumentPacketCommand)
}

void EditDocumentPacketCommand::InitAsDefaultInstance() {
}

EditDocumentPacketCommand::EditDocumentPacketCommand(const EditDocumentPacketCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.EditDocumentPacketCommand)
}

void EditDocumentPacketCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditDocumentPacketCommand::~EditDocumentPacketCommand() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.EditDocumentPacketCommand)
  SharedDtor();
}

void EditDocumentPacketCommand::SharedDtor() {
  if (documentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentid_;
  }
  if (this != default_instance_) {
  }
}

void EditDocumentPacketCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditDocumentPacketCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditDocumentPacketCommand_descriptor_;
}

const EditDocumentPacketCommand& EditDocumentPacketCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

EditDocumentPacketCommand* EditDocumentPacketCommand::default_instance_ = NULL;

EditDocumentPacketCommand* EditDocumentPacketCommand::New() const {
  return new EditDocumentPacketCommand;
}

void EditDocumentPacketCommand::Clear() {
  if (has_documentid()) {
    if (documentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      documentid_->clear();
    }
  }
  adddocumentstopacket_.Clear();
  removedocumentsfrompacket_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditDocumentPacketCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.EditDocumentPacketCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string DocumentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentid().data(), this->documentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AddDocumentsToPacket;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId AddDocumentsToPacket = 2;
      case 2: {
        if (tag == 18) {
         parse_AddDocumentsToPacket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adddocumentstopacket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AddDocumentsToPacket;
        if (input->ExpectTag(26)) goto parse_RemoveDocumentsFromPacket;
        break;
      }

      // repeated .Diadoc.Api.Proto.DocumentId RemoveDocumentsFromPacket = 3;
      case 3: {
        if (tag == 26) {
         parse_RemoveDocumentsFromPacket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_removedocumentsfrompacket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RemoveDocumentsFromPacket;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.EditDocumentPacketCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.EditDocumentPacketCommand)
  return false;
#undef DO_
}

void EditDocumentPacketCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.EditDocumentPacketCommand)
  // required string DocumentId = 1;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentid().data(), this->documentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->documentid(), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId AddDocumentsToPacket = 2;
  for (int i = 0; i < this->adddocumentstopacket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->adddocumentstopacket(i), output);
  }

  // repeated .Diadoc.Api.Proto.DocumentId RemoveDocumentsFromPacket = 3;
  for (int i = 0; i < this->removedocumentsfrompacket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->removedocumentsfrompacket(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.EditDocumentPacketCommand)
}

::google::protobuf::uint8* EditDocumentPacketCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.EditDocumentPacketCommand)
  // required string DocumentId = 1;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentid().data(), this->documentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->documentid(), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId AddDocumentsToPacket = 2;
  for (int i = 0; i < this->adddocumentstopacket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->adddocumentstopacket(i), target);
  }

  // repeated .Diadoc.Api.Proto.DocumentId RemoveDocumentsFromPacket = 3;
  for (int i = 0; i < this->removedocumentsfrompacket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->removedocumentsfrompacket(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.EditDocumentPacketCommand)
  return target;
}

int EditDocumentPacketCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string DocumentId = 1;
    if (has_documentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentid());
    }

  }
  // repeated .Diadoc.Api.Proto.DocumentId AddDocumentsToPacket = 2;
  total_size += 1 * this->adddocumentstopacket_size();
  for (int i = 0; i < this->adddocumentstopacket_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adddocumentstopacket(i));
  }

  // repeated .Diadoc.Api.Proto.DocumentId RemoveDocumentsFromPacket = 3;
  total_size += 1 * this->removedocumentsfrompacket_size();
  for (int i = 0; i < this->removedocumentsfrompacket_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->removedocumentsfrompacket(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditDocumentPacketCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditDocumentPacketCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditDocumentPacketCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditDocumentPacketCommand::MergeFrom(const EditDocumentPacketCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  adddocumentstopacket_.MergeFrom(from.adddocumentstopacket_);
  removedocumentsfrompacket_.MergeFrom(from.removedocumentsfrompacket_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentid()) {
      set_documentid(from.documentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditDocumentPacketCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditDocumentPacketCommand::CopyFrom(const EditDocumentPacketCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditDocumentPacketCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->adddocumentstopacket())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->removedocumentsfrompacket())) return false;
  return true;
}

void EditDocumentPacketCommand::Swap(EditDocumentPacketCommand* other) {
  if (other != this) {
    std::swap(documentid_, other->documentid_);
    adddocumentstopacket_.Swap(&other->adddocumentstopacket_);
    removedocumentsfrompacket_.Swap(&other->removedocumentsfrompacket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditDocumentPacketCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditDocumentPacketCommand_descriptor_;
  metadata.reflection = EditDocumentPacketCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolutionRouteRemoval::kParentEntityIdFieldNumber;
const int ResolutionRouteRemoval::kRouteIdFieldNumber;
const int ResolutionRouteRemoval::kCommentFieldNumber;
const int ResolutionRouteRemoval::kLabelsFieldNumber;
#endif  // !_MSC_VER

ResolutionRouteRemoval::ResolutionRouteRemoval()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.ResolutionRouteRemoval)
}

void ResolutionRouteRemoval::InitAsDefaultInstance() {
}

ResolutionRouteRemoval::ResolutionRouteRemoval(const ResolutionRouteRemoval& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.ResolutionRouteRemoval)
}

void ResolutionRouteRemoval::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  parententityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  routeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolutionRouteRemoval::~ResolutionRouteRemoval() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.ResolutionRouteRemoval)
  SharedDtor();
}

void ResolutionRouteRemoval::SharedDtor() {
  if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parententityid_;
  }
  if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete routeid_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void ResolutionRouteRemoval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolutionRouteRemoval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolutionRouteRemoval_descriptor_;
}

const ResolutionRouteRemoval& ResolutionRouteRemoval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

ResolutionRouteRemoval* ResolutionRouteRemoval::default_instance_ = NULL;

ResolutionRouteRemoval* ResolutionRouteRemoval::New() const {
  return new ResolutionRouteRemoval;
}

void ResolutionRouteRemoval::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_parententityid()) {
      if (parententityid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parententityid_->clear();
      }
    }
    if (has_routeid()) {
      if (routeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        routeid_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolutionRouteRemoval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.ResolutionRouteRemoval)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ParentEntityId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parententityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parententityid().data(), this->parententityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parententityid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RouteId;
        break;
      }

      // required string RouteId = 2;
      case 2: {
        if (tag == 18) {
         parse_RouteId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_routeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->routeid().data(), this->routeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "routeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Comment;
        break;
      }

      // optional string Comment = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Labels;
        break;
      }

      // repeated string Labels = 4;
      case 4: {
        if (tag == 34) {
         parse_Labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.ResolutionRouteRemoval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.ResolutionRouteRemoval)
  return false;
#undef DO_
}

void ResolutionRouteRemoval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.ResolutionRouteRemoval)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parententityid(), output);
  }

  // required string RouteId = 2;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routeid().data(), this->routeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "routeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->routeid(), output);
  }

  // optional string Comment = 3 [default = ""];
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // repeated string Labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.ResolutionRouteRemoval)
}

::google::protobuf::uint8* ResolutionRouteRemoval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.ResolutionRouteRemoval)
  // required string ParentEntityId = 1;
  if (has_parententityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parententityid().data(), this->parententityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parententityid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parententityid(), target);
  }

  // required string RouteId = 2;
  if (has_routeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routeid().data(), this->routeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "routeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->routeid(), target);
  }

  // optional string Comment = 3 [default = ""];
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // repeated string Labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.ResolutionRouteRemoval)
  return target;
}

int ResolutionRouteRemoval::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ParentEntityId = 1;
    if (has_parententityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parententityid());
    }

    // required string RouteId = 2;
    if (has_routeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->routeid());
    }

    // optional string Comment = 3 [default = ""];
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  // repeated string Labels = 4;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolutionRouteRemoval::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolutionRouteRemoval* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolutionRouteRemoval*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolutionRouteRemoval::MergeFrom(const ResolutionRouteRemoval& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parententityid()) {
      set_parententityid(from.parententityid());
    }
    if (from.has_routeid()) {
      set_routeid(from.routeid());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolutionRouteRemoval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolutionRouteRemoval::CopyFrom(const ResolutionRouteRemoval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolutionRouteRemoval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResolutionRouteRemoval::Swap(ResolutionRouteRemoval* other) {
  if (other != this) {
    std::swap(parententityid_, other->parententityid_);
    std::swap(routeid_, other->routeid_);
    std::swap(comment_, other->comment_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolutionRouteRemoval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolutionRouteRemoval_descriptor_;
  metadata.reflection = ResolutionRouteRemoval_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TemplateToPost::kFromBoxIdFieldNumber;
const int TemplateToPost::kToBoxIdFieldNumber;
const int TemplateToPost::kMessageFromBoxIdFieldNumber;
const int TemplateToPost::kMessageToBoxIdFieldNumber;
const int TemplateToPost::kMessageToDepartmentIdFieldNumber;
const int TemplateToPost::kDocumentAttachmentsFieldNumber;
#endif  // !_MSC_VER

TemplateToPost::TemplateToPost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.TemplateToPost)
}

void TemplateToPost::InitAsDefaultInstance() {
}

TemplateToPost::TemplateToPost(const TemplateToPost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.TemplateToPost)
}

void TemplateToPost::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fromboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagefromboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetoboxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetodepartmentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TemplateToPost::~TemplateToPost() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.TemplateToPost)
  SharedDtor();
}

void TemplateToPost::SharedDtor() {
  if (fromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromboxid_;
  }
  if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toboxid_;
  }
  if (messagefromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagefromboxid_;
  }
  if (messagetoboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetoboxid_;
  }
  if (messagetodepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagetodepartmentid_;
  }
  if (this != default_instance_) {
  }
}

void TemplateToPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TemplateToPost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TemplateToPost_descriptor_;
}

const TemplateToPost& TemplateToPost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

TemplateToPost* TemplateToPost::default_instance_ = NULL;

TemplateToPost* TemplateToPost::New() const {
  return new TemplateToPost;
}

void TemplateToPost::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_fromboxid()) {
      if (fromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromboxid_->clear();
      }
    }
    if (has_toboxid()) {
      if (toboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        toboxid_->clear();
      }
    }
    if (has_messagefromboxid()) {
      if (messagefromboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagefromboxid_->clear();
      }
    }
    if (has_messagetoboxid()) {
      if (messagetoboxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagetoboxid_->clear();
      }
    }
    if (has_messagetodepartmentid()) {
      if (messagetodepartmentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagetodepartmentid_->clear();
      }
    }
  }
  documentattachments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TemplateToPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.TemplateToPost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FromBoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromboxid().data(), this->fromboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fromboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ToBoxId;
        break;
      }

      // required string ToBoxId = 2;
      case 2: {
        if (tag == 18) {
         parse_ToBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->toboxid().data(), this->toboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "toboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MessageFromBoxId;
        break;
      }

      // required string MessageFromBoxId = 3;
      case 3: {
        if (tag == 26) {
         parse_MessageFromBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagefromboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagefromboxid().data(), this->messagefromboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagefromboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_MessageToBoxId;
        break;
      }

      // required string MessageToBoxId = 4;
      case 4: {
        if (tag == 34) {
         parse_MessageToBoxId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetoboxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetoboxid().data(), this->messagetoboxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagetoboxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_MessageToDepartmentId;
        break;
      }

      // optional string MessageToDepartmentId = 5;
      case 5: {
        if (tag == 42) {
         parse_MessageToDepartmentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetodepartmentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetodepartmentid().data(), this->messagetodepartmentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagetodepartmentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DocumentAttachments;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.TemplateDocumentAttachment DocumentAttachments = 6;
      case 6: {
        if (tag == 50) {
         parse_DocumentAttachments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documentattachments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DocumentAttachments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.TemplateToPost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.TemplateToPost)
  return false;
#undef DO_
}

void TemplateToPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.TemplateToPost)
  // required string FromBoxId = 1;
  if (has_fromboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromboxid().data(), this->fromboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fromboxid(), output);
  }

  // required string ToBoxId = 2;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->toboxid(), output);
  }

  // required string MessageFromBoxId = 3;
  if (has_messagefromboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagefromboxid().data(), this->messagefromboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagefromboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->messagefromboxid(), output);
  }

  // required string MessageToBoxId = 4;
  if (has_messagetoboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetoboxid().data(), this->messagetoboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetoboxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->messagetoboxid(), output);
  }

  // optional string MessageToDepartmentId = 5;
  if (has_messagetodepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetodepartmentid().data(), this->messagetodepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetodepartmentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->messagetodepartmentid(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.TemplateDocumentAttachment DocumentAttachments = 6;
  for (int i = 0; i < this->documentattachments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->documentattachments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.TemplateToPost)
}

::google::protobuf::uint8* TemplateToPost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.TemplateToPost)
  // required string FromBoxId = 1;
  if (has_fromboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromboxid().data(), this->fromboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromboxid(), target);
  }

  // required string ToBoxId = 2;
  if (has_toboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toboxid().data(), this->toboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->toboxid(), target);
  }

  // required string MessageFromBoxId = 3;
  if (has_messagefromboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagefromboxid().data(), this->messagefromboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagefromboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messagefromboxid(), target);
  }

  // required string MessageToBoxId = 4;
  if (has_messagetoboxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetoboxid().data(), this->messagetoboxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetoboxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->messagetoboxid(), target);
  }

  // optional string MessageToDepartmentId = 5;
  if (has_messagetodepartmentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetodepartmentid().data(), this->messagetodepartmentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagetodepartmentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->messagetodepartmentid(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.TemplateDocumentAttachment DocumentAttachments = 6;
  for (int i = 0; i < this->documentattachments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->documentattachments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.TemplateToPost)
  return target;
}

int TemplateToPost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FromBoxId = 1;
    if (has_fromboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromboxid());
    }

    // required string ToBoxId = 2;
    if (has_toboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toboxid());
    }

    // required string MessageFromBoxId = 3;
    if (has_messagefromboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagefromboxid());
    }

    // required string MessageToBoxId = 4;
    if (has_messagetoboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagetoboxid());
    }

    // optional string MessageToDepartmentId = 5;
    if (has_messagetodepartmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagetodepartmentid());
    }

  }
  // repeated .Diadoc.Api.Proto.Events.TemplateDocumentAttachment DocumentAttachments = 6;
  total_size += 1 * this->documentattachments_size();
  for (int i = 0; i < this->documentattachments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documentattachments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TemplateToPost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TemplateToPost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TemplateToPost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TemplateToPost::MergeFrom(const TemplateToPost& from) {
  GOOGLE_CHECK_NE(&from, this);
  documentattachments_.MergeFrom(from.documentattachments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromboxid()) {
      set_fromboxid(from.fromboxid());
    }
    if (from.has_toboxid()) {
      set_toboxid(from.toboxid());
    }
    if (from.has_messagefromboxid()) {
      set_messagefromboxid(from.messagefromboxid());
    }
    if (from.has_messagetoboxid()) {
      set_messagetoboxid(from.messagetoboxid());
    }
    if (from.has_messagetodepartmentid()) {
      set_messagetodepartmentid(from.messagetodepartmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TemplateToPost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemplateToPost::CopyFrom(const TemplateToPost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateToPost::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->documentattachments())) return false;
  return true;
}

void TemplateToPost::Swap(TemplateToPost* other) {
  if (other != this) {
    std::swap(fromboxid_, other->fromboxid_);
    std::swap(toboxid_, other->toboxid_);
    std::swap(messagefromboxid_, other->messagefromboxid_);
    std::swap(messagetoboxid_, other->messagetoboxid_);
    std::swap(messagetodepartmentid_, other->messagetodepartmentid_);
    documentattachments_.Swap(&other->documentattachments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TemplateToPost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TemplateToPost_descriptor_;
  metadata.reflection = TemplateToPost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TemplateDocumentAttachment::kUnsignedContentFieldNumber;
const int TemplateDocumentAttachment::kCommentFieldNumber;
const int TemplateDocumentAttachment::kTypeNamedIdFieldNumber;
const int TemplateDocumentAttachment::kFunctionFieldNumber;
const int TemplateDocumentAttachment::kVersionFieldNumber;
const int TemplateDocumentAttachment::kMetadataFieldNumber;
const int TemplateDocumentAttachment::kWorkflowIdFieldNumber;
const int TemplateDocumentAttachment::kCustomDocumentIdFieldNumber;
const int TemplateDocumentAttachment::kEditingSettingIdFieldNumber;
const int TemplateDocumentAttachment::kNeedRecipientSignatureFieldNumber;
#endif  // !_MSC_VER

TemplateDocumentAttachment::TemplateDocumentAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.TemplateDocumentAttachment)
}

void TemplateDocumentAttachment::InitAsDefaultInstance() {
  unsignedcontent_ = const_cast< ::Diadoc::Api::Proto::Events::UnsignedContent*>(&::Diadoc::Api::Proto::Events::UnsignedContent::default_instance());
}

TemplateDocumentAttachment::TemplateDocumentAttachment(const TemplateDocumentAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.TemplateDocumentAttachment)
}

void TemplateDocumentAttachment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  unsignedcontent_ = NULL;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  typenamedid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workflowid_ = 0;
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  editingsettingid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needrecipientsignature_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TemplateDocumentAttachment::~TemplateDocumentAttachment() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.TemplateDocumentAttachment)
  SharedDtor();
}

void TemplateDocumentAttachment::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete typenamedid_;
  }
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (editingsettingid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete editingsettingid_;
  }
  if (this != default_instance_) {
    delete unsignedcontent_;
  }
}

void TemplateDocumentAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TemplateDocumentAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TemplateDocumentAttachment_descriptor_;
}

const TemplateDocumentAttachment& TemplateDocumentAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

TemplateDocumentAttachment* TemplateDocumentAttachment::default_instance_ = NULL;

TemplateDocumentAttachment* TemplateDocumentAttachment::New() const {
  return new TemplateDocumentAttachment;
}

void TemplateDocumentAttachment::Clear() {
  if (_has_bits_[0 / 32] & 223) {
    if (has_unsignedcontent()) {
      if (unsignedcontent_ != NULL) unsignedcontent_->::Diadoc::Api::Proto::Events::UnsignedContent::Clear();
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_typenamedid()) {
      if (typenamedid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        typenamedid_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    workflowid_ = 0;
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_editingsettingid()) {
      if (editingsettingid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        editingsettingid_->clear();
      }
    }
    needrecipientsignature_ = false;
  }
  metadata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TemplateDocumentAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.TemplateDocumentAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Diadoc.Api.Proto.Events.UnsignedContent UnsignedContent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unsignedcontent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Comment;
        break;
      }

      // optional string Comment = 2;
      case 2: {
        if (tag == 18) {
         parse_Comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TypeNamedId;
        break;
      }

      // required string TypeNamedId = 3;
      case 3: {
        if (tag == 26) {
         parse_TypeNamedId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typenamedid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->typenamedid().data(), this->typenamedid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "typenamedid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Function;
        break;
      }

      // optional string Function = 4;
      case 4: {
        if (tag == 34) {
         parse_Function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "function");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Version;
        break;
      }

      // optional string Version = 5;
      case 5: {
        if (tag == 42) {
         parse_Version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Metadata;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 6;
      case 6: {
        if (tag == 50) {
         parse_Metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Metadata;
        if (input->ExpectTag(56)) goto parse_WorkflowId;
        break;
      }

      // optional int32 WorkflowId = 7;
      case 7: {
        if (tag == 56) {
         parse_WorkflowId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workflowid_)));
          set_has_workflowid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 8;
      case 8: {
        if (tag == 66) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_EditingSettingId;
        break;
      }

      // optional string EditingSettingId = 9;
      case 9: {
        if (tag == 74) {
         parse_EditingSettingId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_editingsettingid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->editingsettingid().data(), this->editingsettingid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "editingsettingid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_NeedRecipientSignature;
        break;
      }

      // optional bool NeedRecipientSignature = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_NeedRecipientSignature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needrecipientsignature_)));
          set_has_needrecipientsignature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.TemplateDocumentAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.TemplateDocumentAttachment)
  return false;
#undef DO_
}

void TemplateDocumentAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.TemplateDocumentAttachment)
  // required .Diadoc.Api.Proto.Events.UnsignedContent UnsignedContent = 1;
  if (has_unsignedcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unsignedcontent(), output);
  }

  // optional string Comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // required string TypeNamedId = 3;
  if (has_typenamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typenamedid().data(), this->typenamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typenamedid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->typenamedid(), output);
  }

  // optional string Function = 4;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->function(), output);
  }

  // optional string Version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 6;
  for (int i = 0; i < this->metadata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->metadata(i), output);
  }

  // optional int32 WorkflowId = 7;
  if (has_workflowid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->workflowid(), output);
  }

  // optional string CustomDocumentId = 8;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->customdocumentid(), output);
  }

  // optional string EditingSettingId = 9;
  if (has_editingsettingid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->editingsettingid().data(), this->editingsettingid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "editingsettingid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->editingsettingid(), output);
  }

  // optional bool NeedRecipientSignature = 10 [default = false];
  if (has_needrecipientsignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->needrecipientsignature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.TemplateDocumentAttachment)
}

::google::protobuf::uint8* TemplateDocumentAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.TemplateDocumentAttachment)
  // required .Diadoc.Api.Proto.Events.UnsignedContent UnsignedContent = 1;
  if (has_unsignedcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unsignedcontent(), target);
  }

  // optional string Comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // required string TypeNamedId = 3;
  if (has_typenamedid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->typenamedid().data(), this->typenamedid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "typenamedid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->typenamedid(), target);
  }

  // optional string Function = 4;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->function(), target);
  }

  // optional string Version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 6;
  for (int i = 0; i < this->metadata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->metadata(i), target);
  }

  // optional int32 WorkflowId = 7;
  if (has_workflowid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->workflowid(), target);
  }

  // optional string CustomDocumentId = 8;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->customdocumentid(), target);
  }

  // optional string EditingSettingId = 9;
  if (has_editingsettingid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->editingsettingid().data(), this->editingsettingid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "editingsettingid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->editingsettingid(), target);
  }

  // optional bool NeedRecipientSignature = 10 [default = false];
  if (has_needrecipientsignature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->needrecipientsignature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.TemplateDocumentAttachment)
  return target;
}

int TemplateDocumentAttachment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Diadoc.Api.Proto.Events.UnsignedContent UnsignedContent = 1;
    if (has_unsignedcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unsignedcontent());
    }

    // optional string Comment = 2;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required string TypeNamedId = 3;
    if (has_typenamedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typenamedid());
    }

    // optional string Function = 4;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }

    // optional string Version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 WorkflowId = 7;
    if (has_workflowid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workflowid());
    }

    // optional string CustomDocumentId = 8;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string EditingSettingId = 9;
    if (has_editingsettingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->editingsettingid());
    }

    // optional bool NeedRecipientSignature = 10 [default = false];
    if (has_needrecipientsignature()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Diadoc.Api.Proto.Events.MetadataItem Metadata = 6;
  total_size += 1 * this->metadata_size();
  for (int i = 0; i < this->metadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metadata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TemplateDocumentAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TemplateDocumentAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TemplateDocumentAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TemplateDocumentAttachment::MergeFrom(const TemplateDocumentAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  metadata_.MergeFrom(from.metadata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unsignedcontent()) {
      mutable_unsignedcontent()->::Diadoc::Api::Proto::Events::UnsignedContent::MergeFrom(from.unsignedcontent());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_typenamedid()) {
      set_typenamedid(from.typenamedid());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_workflowid()) {
      set_workflowid(from.workflowid());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_editingsettingid()) {
      set_editingsettingid(from.editingsettingid());
    }
    if (from.has_needrecipientsignature()) {
      set_needrecipientsignature(from.needrecipientsignature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TemplateDocumentAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemplateDocumentAttachment::CopyFrom(const TemplateDocumentAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateDocumentAttachment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->metadata())) return false;
  return true;
}

void TemplateDocumentAttachment::Swap(TemplateDocumentAttachment* other) {
  if (other != this) {
    std::swap(unsignedcontent_, other->unsignedcontent_);
    std::swap(comment_, other->comment_);
    std::swap(typenamedid_, other->typenamedid_);
    std::swap(function_, other->function_);
    std::swap(version_, other->version_);
    metadata_.Swap(&other->metadata_);
    std::swap(workflowid_, other->workflowid_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(editingsettingid_, other->editingsettingid_);
    std::swap(needrecipientsignature_, other->needrecipientsignature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TemplateDocumentAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TemplateDocumentAttachment_descriptor_;
  metadata.reflection = TemplateDocumentAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsignedContent::kContentFieldNumber;
const int UnsignedContent::kNameOnShelfFieldNumber;
#endif  // !_MSC_VER

UnsignedContent::UnsignedContent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.UnsignedContent)
}

void UnsignedContent::InitAsDefaultInstance() {
}

UnsignedContent::UnsignedContent(const UnsignedContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.UnsignedContent)
}

void UnsignedContent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nameonshelf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsignedContent::~UnsignedContent() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.UnsignedContent)
  SharedDtor();
}

void UnsignedContent::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (nameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nameonshelf_;
  }
  if (this != default_instance_) {
  }
}

void UnsignedContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsignedContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsignedContent_descriptor_;
}

const UnsignedContent& UnsignedContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

UnsignedContent* UnsignedContent::default_instance_ = NULL;

UnsignedContent* UnsignedContent::New() const {
  return new UnsignedContent;
}

void UnsignedContent::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_nameonshelf()) {
      if (nameonshelf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nameonshelf_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsignedContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.UnsignedContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes Content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NameOnShelf;
        break;
      }

      // optional string NameOnShelf = 2;
      case 2: {
        if (tag == 18) {
         parse_NameOnShelf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nameonshelf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nameonshelf().data(), this->nameonshelf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nameonshelf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.UnsignedContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.UnsignedContent)
  return false;
#undef DO_
}

void UnsignedContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.UnsignedContent)
  // optional bytes Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  // optional string NameOnShelf = 2;
  if (has_nameonshelf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nameonshelf().data(), this->nameonshelf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nameonshelf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nameonshelf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.UnsignedContent)
}

::google::protobuf::uint8* UnsignedContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.UnsignedContent)
  // optional bytes Content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  // optional string NameOnShelf = 2;
  if (has_nameonshelf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nameonshelf().data(), this->nameonshelf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nameonshelf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nameonshelf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.UnsignedContent)
  return target;
}

int UnsignedContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes Content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional string NameOnShelf = 2;
    if (has_nameonshelf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nameonshelf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsignedContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsignedContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsignedContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsignedContent::MergeFrom(const UnsignedContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_nameonshelf()) {
      set_nameonshelf(from.nameonshelf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsignedContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsignedContent::CopyFrom(const UnsignedContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsignedContent::IsInitialized() const {

  return true;
}

void UnsignedContent::Swap(UnsignedContent* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(nameonshelf_, other->nameonshelf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsignedContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsignedContent_descriptor_;
  metadata.reflection = UnsignedContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TemplateTransformationToPost::kBoxIdFieldNumber;
const int TemplateTransformationToPost::kTemplateIdFieldNumber;
const int TemplateTransformationToPost::kDocumentTransformationsFieldNumber;
#endif  // !_MSC_VER

TemplateTransformationToPost::TemplateTransformationToPost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.TemplateTransformationToPost)
}

void TemplateTransformationToPost::InitAsDefaultInstance() {
}

TemplateTransformationToPost::TemplateTransformationToPost(const TemplateTransformationToPost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.TemplateTransformationToPost)
}

void TemplateTransformationToPost::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  templateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TemplateTransformationToPost::~TemplateTransformationToPost() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.TemplateTransformationToPost)
  SharedDtor();
}

void TemplateTransformationToPost::SharedDtor() {
  if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boxid_;
  }
  if (templateid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete templateid_;
  }
  if (this != default_instance_) {
  }
}

void TemplateTransformationToPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TemplateTransformationToPost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TemplateTransformationToPost_descriptor_;
}

const TemplateTransformationToPost& TemplateTransformationToPost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

TemplateTransformationToPost* TemplateTransformationToPost::default_instance_ = NULL;

TemplateTransformationToPost* TemplateTransformationToPost::New() const {
  return new TemplateTransformationToPost;
}

void TemplateTransformationToPost::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boxid_->clear();
      }
    }
    if (has_templateid()) {
      if (templateid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        templateid_->clear();
      }
    }
  }
  documenttransformations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TemplateTransformationToPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.TemplateTransformationToPost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BoxId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boxid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TemplateId;
        break;
      }

      // required string TemplateId = 2;
      case 2: {
        if (tag == 18) {
         parse_TemplateId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templateid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->templateid().data(), this->templateid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "templateid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DocumentTransformations;
        break;
      }

      // repeated .Diadoc.Api.Proto.Events.DocumentTransformation DocumentTransformations = 3;
      case 3: {
        if (tag == 26) {
         parse_DocumentTransformations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documenttransformations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DocumentTransformations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.TemplateTransformationToPost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.TemplateTransformationToPost)
  return false;
#undef DO_
}

void TemplateTransformationToPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.TemplateTransformationToPost)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->boxid(), output);
  }

  // required string TemplateId = 2;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templateid().data(), this->templateid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "templateid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->templateid(), output);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentTransformation DocumentTransformations = 3;
  for (int i = 0; i < this->documenttransformations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->documenttransformations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.TemplateTransformationToPost)
}

::google::protobuf::uint8* TemplateTransformationToPost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.TemplateTransformationToPost)
  // required string BoxId = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boxid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boxid(), target);
  }

  // required string TemplateId = 2;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->templateid().data(), this->templateid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "templateid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->templateid(), target);
  }

  // repeated .Diadoc.Api.Proto.Events.DocumentTransformation DocumentTransformations = 3;
  for (int i = 0; i < this->documenttransformations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->documenttransformations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.TemplateTransformationToPost)
  return target;
}

int TemplateTransformationToPost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BoxId = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

    // required string TemplateId = 2;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templateid());
    }

  }
  // repeated .Diadoc.Api.Proto.Events.DocumentTransformation DocumentTransformations = 3;
  total_size += 1 * this->documenttransformations_size();
  for (int i = 0; i < this->documenttransformations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->documenttransformations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TemplateTransformationToPost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TemplateTransformationToPost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TemplateTransformationToPost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TemplateTransformationToPost::MergeFrom(const TemplateTransformationToPost& from) {
  GOOGLE_CHECK_NE(&from, this);
  documenttransformations_.MergeFrom(from.documenttransformations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TemplateTransformationToPost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemplateTransformationToPost::CopyFrom(const TemplateTransformationToPost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateTransformationToPost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->documenttransformations())) return false;
  return true;
}

void TemplateTransformationToPost::Swap(TemplateTransformationToPost* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(templateid_, other->templateid_);
    documenttransformations_.Swap(&other->documenttransformations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TemplateTransformationToPost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TemplateTransformationToPost_descriptor_;
  metadata.reflection = TemplateTransformationToPost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentTransformation::kDocumentIdFieldNumber;
const int DocumentTransformation::kCustomDocumentIdFieldNumber;
#endif  // !_MSC_VER

DocumentTransformation::DocumentTransformation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Diadoc.Api.Proto.Events.DocumentTransformation)
}

void DocumentTransformation::InitAsDefaultInstance() {
}

DocumentTransformation::DocumentTransformation(const DocumentTransformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Diadoc.Api.Proto.Events.DocumentTransformation)
}

void DocumentTransformation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  documentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdocumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentTransformation::~DocumentTransformation() {
  // @@protoc_insertion_point(destructor:Diadoc.Api.Proto.Events.DocumentTransformation)
  SharedDtor();
}

void DocumentTransformation::SharedDtor() {
  if (documentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete documentid_;
  }
  if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customdocumentid_;
  }
  if (this != default_instance_) {
  }
}

void DocumentTransformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentTransformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentTransformation_descriptor_;
}

const DocumentTransformation& DocumentTransformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Events_2fDiadocMessage_2dPostApi_2eproto();
  return *default_instance_;
}

DocumentTransformation* DocumentTransformation::default_instance_ = NULL;

DocumentTransformation* DocumentTransformation::New() const {
  return new DocumentTransformation;
}

void DocumentTransformation::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_documentid()) {
      if (documentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        documentid_->clear();
      }
    }
    if (has_customdocumentid()) {
      if (customdocumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customdocumentid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentTransformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Diadoc.Api.Proto.Events.DocumentTransformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string DocumentId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->documentid().data(), this->documentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "documentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CustomDocumentId;
        break;
      }

      // optional string CustomDocumentId = 2;
      case 2: {
        if (tag == 18) {
         parse_CustomDocumentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdocumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdocumentid().data(), this->customdocumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customdocumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Diadoc.Api.Proto.Events.DocumentTransformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Diadoc.Api.Proto.Events.DocumentTransformation)
  return false;
#undef DO_
}

void DocumentTransformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Diadoc.Api.Proto.Events.DocumentTransformation)
  // required string DocumentId = 1;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentid().data(), this->documentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->documentid(), output);
  }

  // optional string CustomDocumentId = 2;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->customdocumentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Diadoc.Api.Proto.Events.DocumentTransformation)
}

::google::protobuf::uint8* DocumentTransformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Diadoc.Api.Proto.Events.DocumentTransformation)
  // required string DocumentId = 1;
  if (has_documentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->documentid().data(), this->documentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "documentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->documentid(), target);
  }

  // optional string CustomDocumentId = 2;
  if (has_customdocumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdocumentid().data(), this->customdocumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customdocumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->customdocumentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Diadoc.Api.Proto.Events.DocumentTransformation)
  return target;
}

int DocumentTransformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string DocumentId = 1;
    if (has_documentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentid());
    }

    // optional string CustomDocumentId = 2;
    if (has_customdocumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdocumentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentTransformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentTransformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentTransformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentTransformation::MergeFrom(const DocumentTransformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentid()) {
      set_documentid(from.documentid());
    }
    if (from.has_customdocumentid()) {
      set_customdocumentid(from.customdocumentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentTransformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentTransformation::CopyFrom(const DocumentTransformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentTransformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DocumentTransformation::Swap(DocumentTransformation* other) {
  if (other != this) {
    std::swap(documentid_, other->documentid_);
    std::swap(customdocumentid_, other->customdocumentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentTransformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentTransformation_descriptor_;
  metadata.reflection = DocumentTransformation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Events
}  // namespace Proto
}  // namespace Api
}  // namespace Diadoc

// @@protoc_insertion_point(global_scope)
